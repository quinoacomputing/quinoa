/*!
  \page      walker_main Walker

@m_div{m-col-m-6 m-right-m}
<img src="walker_white.svg"/>
@m_enddiv

__Time-integrator for stochastic differential equations__

Walker is a numerical integrator for stochastic differential equations (SDE). It
can be used to analyze and design the evolution of fluctuating variables and
their statistics in state space and time. Walker can compute time evolutions of
multiple variables governed by coupled SDE systems of different types. It allows
the estimation of arbitrary coupled statistics and probability density
functions.

In a nutshell, walker solves the Fokker-Planck equation

@m_class{m-show-m}

\f[
\newcommand{\bv}[1]{{\mbox{\boldmath$#1$}}}
    \frac{\partial}{\partial t}F(\bv{Y},t) = - \sum_{\alpha=1}^N
    \frac{\partial}{\partial Y_\alpha}\big[ A_\alpha(\bv{Y},t) F(\bv{Y},t)
    \big] + \frac{1}{2} \sum_{\alpha=1}^N \sum_{\beta=1}^N
    \frac{\partial^2}{\partial Y_\alpha \partial
    Y_\beta}\big[B_{\alpha\beta}(\bv{Y},t)F(\bv{Y},t)\big]
\f]

@m_class{m-hide-m}

\f[
\newcommand{\bv}[1]{{\mbox{\boldmath$#1$}}}
  \begin{split}
    \frac{\partial}{\partial t}F(\bv{Y},t) = - \sum_{\alpha=1}^N
    \frac{\partial}{\partial Y_\alpha}\big[ A_\alpha(\bv{Y},t) F(\bv{Y},t)
    \big] \\ + \frac{1}{2} \sum_{\alpha=1}^N \sum_{\beta=1}^N
    \frac{\partial^2}{\partial Y_\alpha \partial
    Y_\beta}\big[B_{\alpha\beta}(\bv{Y},t)F(\bv{Y},t)\big]
  \end{split}
\f]

which is equivalent to the system of SDEs

@m_class{m-show-m}

\f[
\newcommand{\bv}[1]{{\mbox{\boldmath$#1$}}}
    \mathrm{d}Y_\alpha(t) = A_\alpha(\bv{Y},t)\mathrm{d}t + \sum_{\beta=1}^N
    b_{\alpha\beta}(\bv{Y},t)\mathrm{d}W_\beta(t), \qquad \alpha = 1,\dots,N,
    \qquad B_{\alpha\beta} = b_{\alpha\gamma}b_{\gamma\beta}
\f]

@m_class{m-hide-m}

\f[
\newcommand{\bv}[1]{{\mbox{\boldmath$#1$}}}
  \begin{split}
    \mathrm{d}Y_\alpha(t) = A_\alpha(\bv{Y},t)\mathrm{d}t + \sum_{\beta=1}^N
    b_{\alpha\beta}(\bv{Y},t)\mathrm{d}W_\beta(t), \\ \alpha = 1,\dots,N,
    \qquad B_{\alpha\beta} = b_{\alpha\gamma}b_{\gamma\beta}
  \end{split}
\f]

Here \f$\mathrm{d}{\mbox{\boldmath$W$}}(t)\f$ is a vector-valued isotropic
[Wiener process](https://en.wikipedia.org/wiki/Wiener_process) and
\f$F({\mbox{\boldmath$Y$}},t)\f$ is the joint probability distribution of
\f$N\f$ variables \f$Y_\alpha\f$ of the sample space. The drift, \f$A_\alpha\f$,
and diffusion, \f$B_{\alpha\beta}\f$, functions can be defined in any way as
long as the diffusion is positive semi-definite. Walker discretizes and
numerically solves the system of SDEs using a large number of particles and can
estimate arbitrary statistics and distributions as they evolve in time.

Walker can be used to design statistical moment approximations. If the
approximate shape of the probability distribution for a fluctuating variable is
known (or can be usefully @ref papers_walker "assumed"), its governing SDE can,
in some cases, be derived. Numerically integrating this governing equation,
Walker allows extracting arbitrary statistics which can be used to test and
verify hypotheses of functional forms of statistics as a function of other
statistics. This enables, e.g., developing statistical moment approximations for
turbulent flows where higher order statistics must be expressed in terms of
lower order statistics based on some approximation.

Walker can also be used to design approximations for probability density
functions of fluctuating variables. If reasonable assumptions on probability
distributions of some key variables of a process can be made, Walker can be used
to integrate their governing equations and design parameterizations of those
governing equations based on statistics extracted from the computed
distributions.

@section walker_performance Performance

Walker uses the [Charm++](http://charmplusplus.org/) runtime system to run
concurrently either on a single machine or a networked set of computers. The
software design is asynchronous, yielding 100% CPU utilization at all times, and
it exhibits 100% efficiency weak scaling with up to 3 trillion
(\f$3\!\times\!10^{12}\f$) particles up to 24K CPU cores, see also
[d5304e78](https://github.com/quinoacomputing/quinoa/commit/d5304e78).

@m_div{m-col-m-10 m-center-m}
<img src="walker_weak.png"/>
This figure quantifies the excellent scalability of walker, integrating up to 3
trillion particles and aggregating data across all CPUs for estimating various
statistics and probability distributions.
@m_enddiv

@section walker_equations Differential equations

The following differential equations are implemented:

1. __Beta__ --- A system of SDEs, with linear drift and quadratic diagonal
diffusion, whose invariant is the joint beta distribution. For more details on
the beta SDE, see [Bakosi, Ristorcelli, Exploring the beta distribution in variable-density turbulent mixing, J. Turbul, 2010](https://doi.org/10.1080/14685248.2010.510843).

   - For a short overview of the equation and its implementation, see
     DiffEq/Beta.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/BetaCoeffPolicy.h.

2. __Diagonal Ornstein-Uhlenbeck__ --- A system of SDEs with linear drift and
constant diagonal diffusion, whose invariant is the joint normal distribution.

   - For a short overview of the equation and its implementation, see
     DiffEq/DiagOrnsteinUhlenbeck.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/DiagOrnsteinUhlenbeckCoeffPolicy.h.

3. __Ornstein-Uhlenbeck__ --- A system of SDEs with linear drift and constant
diffusion, whose invariant is the joint normal distribution.

   - For a short overview of the equation and its implementation, see
     DiffEq/OrnsteinUhlenbeck.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/OrnsteinUhlenbeckCoeffPolicy.h.

4. __Dirichlet__ --- A system of SDEs, whose invariant is the Dirichlet
distribution. For more details on the Dirichlet SDE, see [Bakosi, Ristorcelli, A Stochastic Diffusion Process for the Dirichlet Distribution, Int. J. Stoch. Anal., 2013](https://doi.org/10.1155/2013/842981).

   - For a short overview of the equation and its implementation, see
     DiffEq/Dirichlet.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/DirichletCoeffPolicy.h.

5. __Generalized Dirichlet__ --- A system of SDEs, whose invariant is Lochner's
generalized Dirichlet distribution. For more details on the generalized
Dirichlet SDE, see [Bakosi, Ristorcelli, A Stochastic Diffusion Process for Lochner's generalized Dirichlet distribution, J. Math. Phys., 2013](https://doi.org/10.1063/1.4822416).

   - For a short overview of the equation and its the implementation, see
     DiffEq/GeneralizedDirichlet.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/GeneralizedDirichletCoeffPolicy.h.

6. __Gamma__ --- A system of SDEs, with linear drift and linear diagonal
diffusion, whose invariant is the joint gamma distribution.

   - For a short overview of the equation and its implementation, see
     DiffEq/Gamma.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/GammaCoeffPolicy.h.

7. __Skew-normal__ --- A system of SDEs, whose invariant is the joint
skew-normal distribution. For more details on the skew-normal distribution, see
[Azzalini, Dalla Valle, The Multivariate Skew-Normal Distribution](http://www.jstor.org/stable/2337278).

   - For a short overview of the equation and its implementation, see
     see DiffEq/SkewNormal.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/SkewNormalCoeffPolicy.h.

8. __Wright-Fisher__ --- A system of SDEs, whose invariant is the Dirichlet
distribution. For more details on the Wright-Fisher SDE, see [Steinrucken, et al., An explicit transition density expansion for a multi-allelic Wrightâ€“Fisher diffusion with general diploid selection, Theor. Popul. Biol., 2013](http://www.sciencedirect.com/science/article/pii/S0040580912001013).

   - For the implementation, see DiffEq/WrightFisher.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/WrightFisherCoeffPolicy.h.

9. __Number-fraction beta__ --- A system of SDEs, with linear drift and
quadratic diagonal diffusion, whose invariant is the joint beta distribution.
The number-fraction beta SDE is based on the beta SDE, additionally computing
two more stochastic variables that are functions of the beta variables
integrated, assuming that the beta variables are number, or mole-, fractions.
For more details on the beta SDE, see [Bakosi, Ristorcelli, Exploring the beta distribution in variable-density turbulent mixing, J. Turbul, 2010](https://doi.org/10.1080/14685248.2010.510843).

   - For a short overview of the equation and its implementation, see
     DiffEq/NumberFractionBeta.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/NumberFractionBetaCoeffPolicy.h.

10. __Mass-fraction beta__ --- A system of SDEs, with linear drift and quadratic
diagonal diffusion, whose invariant is the joint beta distribution.  The
mass-fraction beta SDE is based on the beta SDE, additionally computing two more
stochastic variables that are functions of the beta variables integrated,
assuming that the beta variables are mass-fractions. For more details on the
beta SDE, see [Bakosi, Ristorcelli, Exploring the beta distribution in variable-density turbulent mixing, J. Turbul, 2010](https://doi.org/10.1080/14685248.2010.510843).

   - For a short overview of the equation and its implementation, see
     DiffEq/MassFractionBeta.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/MassFractionBetaCoeffPolicy.h.

11. __Mix number-fraction beta__ --- A system of SDEs, with linear drift and
quadratic diagonal diffusion, whose invariant is the joint beta distribution.
The mix number-fraction beta SDE is based on the beta SDE, with the following
differences: (1) the SDE coefficients are specified consistent with the binary
turbulent mixing process, and (2) additionally computing two more stochastic
variables that are functions of the beta variables integrated, assuming that the
beta variables are number, or mole-, fractions. For more details on the beta
SDE, see [Bakosi, Ristorcelli, Exploring the beta distribution in variable-density turbulent mixing, J. Turbul, 2010](https://doi.org/10.1080/14685248.2010.510843).

   - For a short overview of the equation and its implementation, see
     DiffEq/MixNumberFractionBeta.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/MixNumberFractionBetaCoeffPolicy.h.

12. __Mix mass-fraction beta__ --- A system of SDEs, with linear drift and
quadratic diagonal diffusion, whose invariant is the joint beta distribution.
The mix mass-fraction beta SDE is based on the beta SDE, with the following
differences: (1) the SDE coefficients are specified consistent with the binary
turbulent mixing process, and (2) additionally computing two more stochastic
variables that are functions of the beta variables integrated, assuming that the
beta variables are mass-fractions. For more details on the beta SDE, see
[Bakosi, Ristorcelli, Exploring the beta distribution in variable-density turbulent mixing, J. Turbul, 2010](https://doi.org/10.1080/14685248.2010.510843).

   - For a short overview of the equation and its implementation, see
     DiffEq/MixMassFractionBeta.h.
   - For initialization policies, see DiffEq/InitPolicy.h.
   - For coefficients policies, see DiffEq/MixMassFractionBetaCoeffPolicy.h.

@section walker_ex Examples
\subpage walker_examples

@section walker_pages Other pages related to walker
 - @ref diffeq
 - @ref concurrency
 - @ref inhomogeneity
 - @ref io
 - @ref rngs_input
 - @ref statistics_output
 - @ref layout
*/
