/*!
  \page      rngs_input Random number generators input

This page discusses how to configure random number generators (RNG) in @ref
walker_main and @ref rngtest_main.

@section Requirements

  - Any control file setup that needs one or more RNGs must contain an
    `rngs...end` block. This is used to enable and configure
    one or more RNGs.

  - The `rngs...end` block must appear before any reference to
    an RNG.

  - The `rngs...end` block consists of a list of `<rngname>...end` blocks, where
    `<rngname>` is a placeholder for the name of the RNG to be enabled and
    configured. Currently, three different libraries are interfaced:
    Intel's [Math Kernel Library](https://software.intel.com/en-us/intel-mkl)
    (MKL), [RNGSSE](https://doi.org/10.1016/j.cpc.2013.04.007), and
    [Random123](http://www.thesalmons.org/john/random123/releases/latest/docs/index.html).
    See also the page on @ref rngtest_main. The first part of `<rngname>` is
    the library, `mkl`, `rngsse`, or `r123`, followed by an underscore, `_`,
    followed by the name of the particular RNG from the given library.

  - Each `<rngname>...end` block expects a different syntax,
    depending on what options are available for (and interfaced with) the given
    RNG.

@section mkl_conf Configuration of MKL VSL RNGs

All RNGs provided by MKL can be configured to be initialized using a
user-specified `seed`, and use a user-specified
`uniform_method`, `gaussian_method`,
`beta_method`, and `gamma_method`, each
used to control the algorithm used for the various distribution generators. For
more details on the available options for these keywords, see the on-screen help
from the executable, e.g.,

@code{.bash}
walker -H uniform_method
@endcode

@note MKL is optional. All features in Quinoa can be exercised if MKL is not
available.

@warning Not all MKL RNGs support generating random numbers in parallel. Only
`mkl_mcg31`, `mkl_mcg59`, and
`mkl_wh` have leapfrog support and thus will support
generating random numbers from independent streams.

@section rngsse_conf Configuration of RNGSSE RNGs

All RNGs provided by the RNGSSE library can be configured to be initialized
using a user-specified sequence length by the `seqlen`
keyword. For more details on the available options for the
`seqlen` keyword, see the on-screen help from the executable,
e.g.,

@code{.bash}
walker -H seqlen
@endcode

@m_div{m-block m-success}
All RNGSSE2 RNGs support sampling in parallel.
@m_enddiv

@note RNGSSE2 is optional. All features in Quinoa can be exercised if RNGSSE2 is
not available.

@warning Not all RNGSSE RNGs support all types of seqence lengths. See tk::ctr::RNG::support for details.

@section r123_conf Configuration of Random123 RNGs

The RNGs provided by the Random123 library that are hooked up are _ThreeFry_ and
_Philox_. They can be configured to be initialized using a user-specified seed
with the `seed` keyword.

@m_div{m-block m-success}
All Random123 RNGs support sampling in parallel.
@m_enddiv

@section rng_example Configuring random number generators

Here is an example control file block configuring multiple generators.

@code{.bash}
  rngs
    mkl_mcg59
      seed 2134
      uniform_method accurate
    end

    mkl_r250 seed 1 end
    mkl_mcg31 end
    mkl_mrg32k3a seed 0 end

    rngsse_mrg32k3a end
    rngsse_gq58.4
      seqlen long
    end

    r123_threefry end
  end
@endcode
*/
