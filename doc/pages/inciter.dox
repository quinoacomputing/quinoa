/*!
  \page      inciter_main Inciter (Compressible flow solver)

@m_div{m-col-m-6 m-right-m}
<img src="inciter_white.svg"/>
@m_enddiv

__Navier-Stokes solver for complex domains__

Inciter is a fully asynchronous distributed-memory-parallel fluid solver for
complex 3D engineering geometries. Computational domains of arbitrary shapes
are discretized into tetrahedron elements and decomposed into small chunks
assigned to different CPUs. The number of chunks may be more than the number of
CPUs allowing _overdecomposition_, which is useful for effective automatic load
balancing across large computers. The solution along partition boundaries, that
exists on multiple processing elements, is made consistent with _asynchronous_
communication which enables overlapping parallel computation, communication,
input, and output (I/O).

Inciter can solve the Euler equations, modeling single-, and multi-material
compressible flow, using continuous and discontinuous Galerkin finite element
methods, with solution-adaptive mesh-, and polynomial-degree refinement,
enabling dynamically concentrating compute resources to regions with
interesting physics. Current development continues in the following directions:
(A) solvers for multi-material flows (single velocity, multiple densities,
multiple mass fractions, and multiple internal energies) solving the Euler
equations, (B) polynomial adaptation for both single-, and multi-material
flows, (C) productize the solvers (i.e., increase robustness,
user-friendliness, and add practicality features), (D) implementation of 3D
parallel mesh-to-mesh solution transfer to enable fluid-structure interaction
problems, coupling compressible flow with the kinematics of rigid body motion
of objects embedded in a fluid flow, allowing the computation of body motion in
response to aerodynamic forces, and (E) implementing new equations of state,
suitable for detonation products, to enable blast simulations.

Inciter currently has three different families of fluid dynamics algorithms:

1. `ALECG`, a node-centered continuous Galerkin finite element method,
   featuring Riemann solvers and MUSCL reconstruction on cell-edges, combined
   with Runge-Kutta time stepping, see @ref inciter_alecg for a high-level
   description and @ref papers_inciter "Inciter papers" for more details.

2. `DG`, a cell-centered discontinuous Galerkin finte element method,
   containing multiple solvers for both single-, and multi-material
   flows, see @ref inciter_dg and @ref inciter_mm for high-level descriptions
   and @ref papers_inciter "Inciter papers" for more details.

3. `FV`, a cell-centered finite volume method for multi-material flows, see
   @ref inciter_mm for a high-level description and @ref papers_inciter "Inciter papers"
   for more details. `FV` methods are considered a part of the `DG`
   family of methods.

4. `DiagCG`, a node-centered continuous Galerkin finite element method,
   combining flux-corrected transport with Lax-Wendroff time
   stepping, see @ref inciter_diagcg for a high-level description and
   @ref papers_inciter "Inciter papers" for more details.

@section inciter_pages Related pages
- @ref running_inciter "Running Inciter"
- @ref inciter_alecg "ALECG hydrodynamics"
- @ref inciter_dg "Single-material DG hydrodynamics"
- @ref inciter_mm "Multi-material hydrodynamics"
- @ref inciter_diagcg "DiagCG hydrodynamics"
- @ref inciter_amr "Adaptive Mesh Refinement (TetAMR)"
- @ref inciter_cmd "Command line arguments"
- @ref inciter_ctr "Control file keywords"
- @ref papers_inciter "Publications"
- @ref roadmap_inciter "Roadmap"
- @ref inciter_performance "Performance"
- @ref inciter_design "Software design"
- @ref inciter_newscheme "How to add a new scheme"
- @ref inciter_newpde "How to add a new PDE type"
- @ref layout "Data layout"
- @ref inciter_examples "Examples"
*/
