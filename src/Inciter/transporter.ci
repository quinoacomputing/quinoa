// *****************************************************************************
/*!
  \file      src/Inciter/transporter.ci
  \copyright 2012-2015, J. Bakosi, 2016-2018, Los Alamos National Security, LLC.
  \brief     Charm++ module interface file for Transporter
  \details   Charm++ module interface file for Transporter
*/
// *****************************************************************************

module transporter {

  include "Types.h";

  namespace inciter {

    chare Transporter {
      entry Transporter();
      entry [reductiontarget] void load( uint64_t nelem, uint64_t npoin );
      entry [reductiontarget] void nchare();
      entry [reductiontarget] void bounds();
      entry [reductiontarget] void distributed();
      entry [reductiontarget] void refinserted();
      entry [reductiontarget] void discinserted();
      entry [reductiontarget] void disccreated();
      entry [reductiontarget] void workinserted();
      entry [reductiontarget] void matched( std::size_t extra );
      entry [reductiontarget] void refined( std::size_t nelem,
                                            std::size_t npoin );
      entry [reductiontarget] void discresized();
      entry [reductiontarget] void workresized();
      entry [reductiontarget] void comfinal();
      entry [reductiontarget] void totalvol( tk::real v, tk::real initial );
      entry [reductiontarget] void vol();
      entry [reductiontarget] void minstat( tk::real d0, tk::real d1,
                                            tk::real d2);
      entry [reductiontarget] void maxstat( tk::real d0, tk::real d1,
                                            tk::real d2 );
      entry [reductiontarget] void sumstat( tk::real d0, tk::real d1,
                                            tk::real d2, tk::real d3,
                                            tk::real d4, tk::real d5 );
      entry [reductiontarget] void pdfstat( CkReductionMsg* msg );
      entry [reductiontarget] void diagnostics( CkReductionMsg* msg );
      entry [reductiontarget] void start();
      entry [reductiontarget] void next();
      entry [reductiontarget] void advance( tk::real );
      entry [reductiontarget] void finish();

      entry void pepartitioned();
      entry void pedistributed();
      entry void chbnd();
      entry void chcomm();
      entry void chmask();
      entry void chreordered();
      entry void chbounds();

      entry void chcreated();
      entry void chbndface();
      entry void chcomfac();
      entry void chghost();
      entry void chadj();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4stat() {
        when minstat_complete(), maxstat_complete(), sumstat_complete(),
             pdfstat_complete() serial "stat" { stat(); } };

      entry void wait4resize() {
        when disc_resized(), work_resized() serial "resize" { resized(); } };

      entry void minstat_complete();
      entry void maxstat_complete();
      entry void sumstat_complete();
      entry void pdfstat_complete();
      entry void disc_resized();
      entry void work_resized();
    }

  } // inciter::

}
