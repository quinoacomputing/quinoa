// *****************************************************************************
/*!
  \file      src/Inciter/transporter.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019-2021 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for Transporter
  \details   Charm++ module interface file for Transporter
*/
// *****************************************************************************

module transporter {

  include "Types.hpp";

  extern module meshwriter;

  namespace inciter {

    chare [migratable] Transporter {
      entry Transporter();
      entry [reductiontarget] void load( std::size_t meshid,
                                         std::size_t nelem );
      entry [reductiontarget] void partitioned( std::size_t meshid );
      entry [reductiontarget] void distributed( std::size_t meshid );
      entry [reductiontarget] void refinserted( std::size_t meshid,
                                                std::size_t error );
      entry [reductiontarget] void discinserted( std::size_t meshid );
      entry [reductiontarget] void disccreated( std::size_t summeshid,
                                                std::size_t npoin );
      entry [reductiontarget] void workinserted( std::size_t meshid );
      entry [reductiontarget] void queriedRef( std::size_t meshid );
      entry [reductiontarget] void respondedRef( std::size_t meshid );
      entry [reductiontarget] void compatibility( std::size_t meshid );
      entry [reductiontarget] void matched( std::size_t summeshid,
                                            std::size_t nextra,
                                            std::size_t nref,
                                            std::size_t nderef,
                                            std::size_t initial );
      entry [reductiontarget] void bndint( tk::real sx,
                                           tk::real sy,
                                           tk::real sz,
                                           tk::real cb,
                                           tk::real summeshid );
      entry [reductiontarget] void refined( std::size_t meshid,
                                            std::size_t nelem,
                                            std::size_t npoin );
      entry [reductiontarget] void resized( std::size_t meshid );
      entry [reductiontarget] void startEsup( std::size_t meshid );
      entry [reductiontarget] void queried( std::size_t meshid );
      entry [reductiontarget] void responded( std::size_t meshid );
      entry [reductiontarget] void doneInsertingGhosts(std::size_t meshid);
      entry [reductiontarget] void comfinal( std::size_t initial,
                                             std::size_t summeshid );
      entry [reductiontarget] void totalvol( tk::real v,
                                             tk::real initial,
                                             tk::real summeshid );
      entry [reductiontarget] void minstat( tk::real d0, tk::real d1,
                                            tk::real d2, tk::real rmeshid );
      entry [reductiontarget] void maxstat( tk::real d0, tk::real d1,
                                            tk::real d2, tk::real rmeshid );
      entry [reductiontarget] void sumstat( tk::real d0, tk::real d1,
                                            tk::real d2, tk::real d3,
                                            tk::real d4, tk::real d5,
                                            tk::real summeshid );
      entry [reductiontarget] void pdfstat( CkReductionMsg* msg );
      entry [reductiontarget] void boxvol( tk::real meshdata[n], int n );
      entry [reductiontarget] void solutionTransferred();
      entry [reductiontarget] void minDtAcrossMeshes( tk::real redndata[n], int n );
      entry [reductiontarget] void diagnostics( CkReductionMsg* msg );
      entry void resume();
      entry [reductiontarget] void checkpoint( std::size_t finished,
                                               std::size_t meshid );
      entry [reductiontarget] void finish( std::size_t meshid );

      entry void pepartitioned();
      entry void pedistributed();
      entry void chbnd();
      entry void chcomm();
      entry void chmask();
      entry void chreordered();

      entry void chcreated();
      entry void chbndface();
      entry void chcomfac();
      entry void chghost();
      entry void chadj();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4stat() {
        forall [meshid] ( 0 : m_nelem.size(), 1 ) {
          when minstat_complete[meshid]( std::size_t _meshid ),
               maxstat_complete[meshid]( std::size_t _meshid ),
               sumstat_complete[meshid]( std::size_t _meshid ),
               pdfstat_complete[meshid]( std::size_t _meshid )
          serial "stat" { stat(); }
        }
      };

      entry void minstat_complete( std::size_t _meshid );
      entry void maxstat_complete( std::size_t _meshid );
      entry void sumstat_complete( std::size_t _meshid );
      entry void pdfstat_complete( std::size_t _meshid );
    }

  } // inciter::

}
