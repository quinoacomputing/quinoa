// *****************************************************************************
/*!
  \file      src/Inciter/dg.ci
  \copyright 2016-2018, Los Alamos National Security, LLC.
  \brief     Charm++ module interface file for the discontinuous Galerkin scheme
  \details   Charm++ module interface file for the discontinuous Galerking
             scheme.
  \see       DG.h and DG.C for more info.
*/
// *****************************************************************************

module dg {

  extern module transporter;
  extern module discretization;
  extern module solver;

  include "UnsMesh.h";
  include "PUPUtil.h";
  include "FaceData.h";

  namespace inciter {

    array [1D] DG {
      entry DG( const CProxy_Discretization& disc,
                const tk::CProxy_Solver&,
                const FaceData& fd );
      entry void comfac( int fromch, const tk::UnsMesh::FaceSet& infaces );
      entry void comGhost( int fromch, const GhostData& ghost );
      entry void reqGhost();
      initnode void registerReducers();      
      entry void setup( tk::real v );
      entry void dt();
      entry void diag();
      entry void comsol( int fromch,
                         const std::vector< std::size_t >& tetid,
                         const std::vector< std::vector< tk::real > >& u );
      entry [reductiontarget] void advance( tk::real newdt );
      entry void resized();
      entry void lhs();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      // If we have computed our own ghost data in setupGhost(), and every chare
      // we communicate with has requested ghost data from us, we fulfill the
      // requests and send out ghost data.
      //
      // We only perform solution of the linear system if both the own and
      // communicated (ghost) portion of the unknown/solution vector are
      // complete.

      entry void wait4ghost() {
        when ownghost_complete(), reqghost_complete() serial "ghost"
        { sendGhost(); } };

      entry void wait4sol() {
        when ownsol_complete(), comsol_complete() serial "sol" { solve(); } };

      entry void wait4eval() {
        when diag_complete(), ref_complete(), lhs_complete(),
             resize_complete() serial "eval" { eval(); } };

      entry void ownghost_complete();
      entry void reqghost_complete();
      entry void ownsol_complete();
      entry void comsol_complete();
      entry void diag_complete();
      entry void ref_complete();
      entry void lhs_complete();
      entry void resize_complete();
    };

  } // inciter::

}
