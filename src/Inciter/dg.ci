// *****************************************************************************
/*!
  \file      src/Inciter/dg.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019-2021 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for the discontinuous Galerkin scheme
  \details   Charm++ module interface file for the discontinuous Galerking
             scheme.
  \see       DG.h and DG.C for more info.
*/
// *****************************************************************************

module dg {

  extern module transporter;
  extern module discretization;
  extern module ghosts;

  include "UnsMesh.hpp";
  include "PUPUtil.hpp";
  include "FaceData.hpp";

  namespace inciter {

    array [1D] DG {
      entry DG( const CProxy_Discretization& disc,
                const CProxy_Ghosts& ghostsproxy,
                const std::map< int, std::vector< std::size_t > >& bface,
                const std::map< int, std::vector< std::size_t > >& /* bnode */,
                const std::vector< std::size_t >& triinpoel );
      initnode void registerReducers();      
      entry void resizeSolVectors();
      entry void setup();
      entry void box( tk::real v, const std::vector< tk::real >& blkvol );
      entry void comlim( int fromch,
                         const std::vector< std::size_t >& tetid,
                         const std::vector< std::vector< tk::real > >& u,
                         const std::vector< std::vector< tk::real > >& prim );
      entry void comnodeout( const std::vector< std::size_t >& gid,
                             const std::vector< std::size_t >& nesup,
                             const std::vector< std::vector< tk::real > >& Lu,
                             const std::vector< std::vector< tk::real > >& Lp );
      entry void comrefine( int fromch,
                            const std::vector< std::size_t >& tetid,
                            const std::vector< std::size_t >& ndof );
      entry void comsmooth( int fromch,
                            const std::vector< std::size_t >& tetid,
                            const std::vector< std::size_t >& ndof );
      entry void comreco( int fromch,
                          const std::vector< std::size_t >& tetid,
                          const std::vector< std::vector< tk::real > >& u,
                          const std::vector< std::vector< tk::real > >& prim );
      entry void comsol( int fromch,
                         std::size_t fromstage,
                         const std::vector< std::size_t >& tetid,
                         const std::vector< std::vector< tk::real > >& u,
                         const std::vector< std::vector< tk::real > >& prim,
                         const std::vector< std::size_t >& ndof );
      entry void refine( const std::vector< tk::real >& l2ref );
      entry [reductiontarget] void solve( tk::real newdt );
      entry void resized();
      entry void transferSol();
      entry void advance( tk::real newdt, tk::real );
      entry void lhs();
      entry void comnodalExtrema( const std::vector< std::size_t >& gid,
                                  const std::vector< std::vector< tk::real > >& G1,
                                  const std::vector< std::vector< tk::real > >& G2 );
      entry void step();
      entry void start();
      entry void next();
      entry void evalLB( int nrestart );

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4sol() {
        when ownsol_complete(), comsol_complete() serial "sol" { refine(); }
      }

      entry void wait4refine() {
        when ownrefine_complete(), comrefine_complete() serial "refine" { smooth(); }
      }

      entry void wait4smooth() {
        when ownsmooth_complete(), comsmooth_complete() serial "smooth" { reco(); }
      }

      entry void wait4reco() {
        when ownreco_complete(), comreco_complete() serial "reco"
        { nodalExtrema(); } }

      entry void wait4nodalExtrema() {
        when ownnodalExtrema_complete(), comnodalExtrema_complete()
        serial "nodalExtrema" { lim(); } }

      entry void wait4lim() {
        when ownlim_complete(), comlim_complete() serial "lim" { dt(); } }

      entry void wait4nod() {
        when ownnod_complete( CkCallback c,
                              const std::unordered_map< std::size_t, std::size_t >& addedTets ),
          comnodeout_complete()
        serial "nod" { writeFields( c, addedTets ); } }

      entry void ownsol_complete();
      entry void comsol_complete();
      entry void ownrefine_complete();
      entry void comrefine_complete();
      entry void ownsmooth_complete();
      entry void comsmooth_complete();
      entry void ownreco_complete();
      entry void comreco_complete();
      entry void ownnodalExtrema_complete();
      entry void comnodalExtrema_complete();
      entry void ownlim_complete();
      entry void comlim_complete();
      entry void ownnod_complete( CkCallback c, const std::unordered_map< std::size_t, std::size_t >& addedTets );
      entry void comnodeout_complete();
    }

  } // inciter::

}
