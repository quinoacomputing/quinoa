// *****************************************************************************
/*!
  \file      src/Inciter/matcg.ci
  \copyright 2012-2015, J. Bakosi, 2016-2018, Los Alamos National Security, LLC.
  \brief     Charm++ module interface file for continuous Galerkin FEM w/ matrix
  \details   Charm++ module interface file for the continuous Galerkin (CG)
     discretization scheme using a compressed sparse row (CSR) matrix for the
     left hand side and a linear solver.
  \see       MatCG.h and MatCG.C for more info.
*/
// *****************************************************************************

module matcg {

  extern module transporter;
  extern module discretization;
  extern module solver;

  include "UnsMesh.h";
  include "PUPUtil.h";
  include "FaceData.h";

  namespace inciter {

    array [1D] MatCG {
      entry MatCG( const CProxy_Discretization& disc,
                   const tk::CProxy_Solver& solver,
                   const FaceData& fd );
      initnode void registerReducers();
      entry void setup( tk::real v );
      entry void dt();
      entry void diag();
      entry [reductiontarget] void advance( tk::real newdt );
      entry void updateSol( const std::vector< std::size_t >& gid,
                            const std::vector< tk::real >& sol );
      entry void updateLowSol( const std::vector< std::size_t >& gid,
                               const std::vector< tk::real >& sol );
      entry void resized();
      entry void lhs();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      entry void wait4eval() {
        when diag_complete(), ref_complete(), lhs_complete(),
             resize_complete() serial "eval" { eval(); } };

      entry void diag_complete();
      entry void ref_complete();
      entry void lhs_complete();
      entry void resize_complete();
    };

  } // inciter::

}
