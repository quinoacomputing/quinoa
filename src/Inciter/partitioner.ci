// *****************************************************************************
/*!
  \file      src/Inciter/partitioner.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for the chare partitioner nodegroup
  \details   Charm++ module interface file for the chare partitioner nodegroup
             used to perform mesh partitioning.
*/
// *****************************************************************************

module partitioner {

  include "Types.hpp";
  include "UnsMesh.hpp";
  include "Scheme.hpp";
  include "FaceData.hpp";
  include "Callback.hpp";

  extern module transporter;
  extern module refiner;
  extern module meshwriter;

  namespace inciter {

    nodegroup [migratable] Partitioner {
      entry Partitioner(
        const tk::PartitionerCallback& cbp,
        const tk::RefinerCallback& cbr,
        const tk::SorterCallback& cbs,
        const CProxy_Transporter& host,
        const CProxy_Refiner& refiner,
        const CProxy_Sorter& sorter,
        const tk::CProxy_MeshWriter& meshwriter,
        const Scheme& scheme,
        const std::map< int, std::vector< std::size_t > >& belem,
        const std::map< int, std::vector< std::size_t > >& faces,
        const std::map< int, std::vector< std::size_t > >& bnode );
      initnode void registerReducers();
      entry [exclusive] void partition( int nchare );
      entry [exclusive] void addMesh(
        int fromnode,
        const std::unordered_map< int,
                std::tuple<
                  std::vector< std::size_t >,
                  tk::UnsMesh::CoordMap,
                  std::unordered_map< int, std::vector< std::size_t > >,
                  std::unordered_map< int, std::vector< std::size_t > >
                > >& chmesh );
      entry [exclusive] void recvMesh();
      entry void refine();
    };

  } // inciter::
}
