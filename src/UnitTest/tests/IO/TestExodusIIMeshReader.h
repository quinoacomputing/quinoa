// *****************************************************************************
/*!
  \file      src/UnitTest/tests/IO/TestExodusIIMeshReader.h
  \author    J. Bakosi
  \copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.
  \brief     Unit tests for the ExodusII unstructured-mesh reader
  \details   Unit tests for the ExodusII unstructured-mesh reader
*/
// *****************************************************************************
#ifndef test_ExodusIIMeshReader_h
#define test_ExodusIIMeshReader_h

#include <iterator>
#include <algorithm>

#include "NoWarning/tut.h"

#include "Init.h"
#include "UnsMesh.h"
#include "TUTUtil.h"
#include "QuinoaConfig.h"
#include "ExodusIIMeshReader.h"

namespace tut {

//! All tests in group inherited from this base
struct ExodusIIMeshReader_common {

    // Coordinates for simple tetrahedron-mesh
    std::vector< tk::real > box24_coord { 0,   0,   0,
                                          1,   0,   0,
                                          1,   1,   0,
                                          0,   1,   0,
                                          0,   0,   1,
                                          1,   0,   1,
                                          1,   1,   1,
                                          0,   1,   1,
                                          0.5, 0.5, 0,
                                          0.5, 0.5, 1,
                                          0.5, 0,   0.5,
                                          1,   0.5, 0.5,
                                          0.5, 1,   0.5,
                                          0,   0.5, 0.5 };

    // Element connectivity for simple tetrahedron-mesh
    std::vector< std::size_t > box24_inpoel { 11, 13,  8, 10,
                                               9, 13, 12, 11,
                                              13, 12, 11,  8,
                                               9, 13, 11, 10,
                                               0, 13,  4, 10,
                                               6,  5,  9, 11,
                                              13,  7,  4,  9,
                                               7,  6,  9, 12,
                                               6, 12,  2, 11,
                                               0,  3, 13,  8,
                                              12,  3,  2,  8,
                                               2,  1, 11,  8,
                                               3,  7, 13, 12,
                                               5,  4,  9, 10,
                                               0,  1,  8, 10,
                                               1,  5, 11, 10,
                                               5,  9, 11, 10,
                                               1, 11,  8, 10,
                                               4, 13,  9, 10,
                                              13,  7,  9, 12,
                                              12,  2, 11,  8,
                                               6,  9, 12, 11,
                                              13,  3, 12,  8,
                                              13,  0,  8, 10 };

    // X coordinates for a five-block tetrahedron-mesh
    std::vector< tk::real > shear_5blocks_coordx = {
      9267.83542668967, 9265.70533800492, 10431.8959350137, 
      8590.35289998965, 1541.03854502253, 3428.34501734486, 1543.19372967879, 
      -1.53120240898716, -12000, -12000, -10814.8191906402, -12000, 
      -10813.2715221157, 12000, 12000, 10813.2715221157, 10814.8191906402, 
      12000, 10465.2918209732, 10814.8191906402, 12000, -1543.19372967879, 
      -3448.22524193791, -1541.03854502253, -7243.43829018978, 
      -8597.96418188709, -9265.70533800492, -7246.64992405183, 
      -10462.2279847906, -10485.9414041032, -9267.83542668967, 
      -10295.9463452935, -8306.45172737393, -10273.7115257364, 
      -8283.8018120481, -6318.77565833086, -5987.12702139264, 
      -6311.85858832251, -12000, -8584.22308057719, -10404.4860163122, 
      -9267.83542668967, 3445.16856257882, 1543.19372967879, 4597.38037352791, 
      4595.39779944173, 5971.2095300263, 7246.64992405183, 7243.43829018978, 
      1541.03854502253, 0.524237328620075, -1541.03854502253, 
      -3439.88467971574, -1543.19372967879, -5966.78017190094, 
      4595.39779944173, 7243.43829018978, 4597.38037352791, 5966.14679301243, 
      -12000, -10814.8191906402, -12000, -12000, 9267.83542668967, 
      10402.3110576205, -4595.39779944173, 6308.51348897238, 6300.84423680379, 
      8298.7438283579, 10266.3457228884, 8278.51220372614, -4595.39779944173, 
      7246.64992405183, 10306.5842478909, 8613.09299129283, 10813.2715221157, 
      12000, 12000, -10443.0584327809, -12000, 11170.5391413182, 12000, 
      11163.999410538, -10813.2715221157, -12000, 12000, 12000, 12000, 12000, 
      -4597.38037352791, -7243.43829018978, -7246.64992405183, 
      -9265.70533800492, -12000, -4597.38037352791, -12000, -12000, 
      10491.7985485365, 9265.70533800492, 12000, 9267.83542668967, 
      9265.70533800492, 10431.8959350137, 8590.35289998965, 1541.03854502253, 
      3428.34501734486, 1543.19372967879, -1.53120240898716, -12000, -12000, 
      -10814.8191906402, -12000, -10813.2715221157, 12000, 12000, 
      10813.2715221157, 10814.8191906402, 12000, 10465.2918209732, 
      10814.8191906402, 12000, -1543.19372967879, -3448.22524193791, 
      -1541.03854502253, -7243.43829018978, -8597.96418188709, 
      -9265.70533800492, -7246.64992405183, -10462.2279847906, 
      -10485.9414041032, -9267.83542668967, -10295.9463452935, 
      -8306.45172737393, -10273.7115257364, -8283.8018120481, 
      -6318.77565833086, -5987.12702139264, -6311.85858832251, -12000, 
      -8584.22308057719, -10404.4860163122, -9267.83542668967, 
      3445.16856257882, 1543.19372967879, 4597.38037352791, 4595.39779944173, 
      5971.2095300263, 7246.64992405183, 7243.43829018978, 1541.03854502253, 
      0.524237328620075, -1541.03854502253, -3439.88467971574, 
      -1543.19372967879, -5966.78017190094, 4595.39779944173, 7243.43829018978, 
      4597.38037352791, 5966.14679301243, -12000, -10814.8191906402, -12000, 
      -12000, 9267.83542668967, 10402.3110576205, -4595.39779944173, 
      6308.51348897238, 6300.84423680379, 8298.7438283579, 10266.3457228884, 
      8278.51220372614, -4595.39779944173, 7246.64992405183, 10306.5842478909, 
      8613.09299129283, 10813.2715221157, 12000, 12000, -10443.0584327809, 
      -12000, 11170.5391413182, 12000, 11163.999410538, -10813.2715221157, 
      -12000, 12000, 12000, 12000, 12000, -4597.38037352791, -7243.43829018978, 
      -7246.64992405183, -9265.70533800492, -12000, -4597.38037352791, -12000, 
      -12000, 10491.7985485365, 9265.70533800492, 12000, 9267.83542668967, 
      9265.70533800492, 10431.8959350137, 8590.35289998965, 1541.03854502253, 
      3428.34501734486, 1543.19372967879, -1.53120240898716, -12000, -12000, 
      -10814.8191906402, -12000, -10813.2715221157, 12000, 12000, 
      10813.2715221157, 10814.8191906402, 12000, 10465.2918209732, 
      10814.8191906402, 12000, -1543.19372967879, -3448.22524193791, 
      -1541.03854502253, -7243.43829018978, -8597.96418188709, 
      -9265.70533800492, -7246.64992405183, -10462.2279847906, 
      -10485.9414041032, -9267.83542668967, -10295.9463452935, 
      -8306.45172737393, -10273.7115257364, -8283.8018120481, 
      -6318.77565833086, -5987.12702139264, -6311.85858832251, -12000, 
      -8584.22308057719, -10404.4860163122, -9267.83542668967, 
      3445.16856257882, 1543.19372967879, 4597.38037352791, 4595.39779944173, 
      5971.2095300263, 7246.64992405183, 7243.43829018978, 1541.03854502253, 
      0.524237328620075, -1541.03854502253, -3439.88467971574, 
      -1543.19372967879, -5966.78017190094, 4595.39779944173, 7243.43829018978, 
      4597.38037352791, 5966.14679301243, -12000, -10814.8191906402, -12000, 
      -12000, 9267.83542668967, 10402.3110576205, -4595.39779944173, 
      6308.51348897238, 6300.84423680379, 8298.7438283579, 10266.3457228884, 
      8278.51220372614, -4595.39779944173, 7246.64992405183, 10306.5842478909, 
      8613.09299129283, 10813.2715221157, 12000, 12000, -10443.0584327809, 
      -12000, 11170.5391413182, 12000, 11163.999410538, -10813.2715221157, 
      -12000, 12000, 12000, 12000, 12000, -4597.38037352791, -7243.43829018978, 
      -7246.64992405183, -9265.70533800492, -12000, -4597.38037352791, -12000, 
      -12000, 10491.7985485365, 9265.70533800492, 12000, 9267.83542668967, 
      9265.70533800492, 10431.8959350137, 8590.35289998965, 1541.03854502253, 
      3428.34501734486, 1543.19372967879, -1.53120240898716, -12000, -12000, 
      -10814.8191906402, -12000, -10813.2715221157, 12000, 12000, 
      10813.2715221157, 10814.8191906402, 12000, 10465.2918209732, 
      10814.8191906402, 12000, -1543.19372967879, -3448.22524193791, 
      -1541.03854502253, -7243.43829018978, -8597.96418188709, 
      -9265.70533800492, -7246.64992405183, -10462.2279847906, 
      -10485.9414041032, -9267.83542668967, -10295.9463452935, 
      -8306.45172737393, -10273.7115257364, -8283.8018120481, 
      -6318.77565833086, -5987.12702139264, -6311.85858832251, -12000, 
      -8584.22308057719, -10404.4860163122, -9267.83542668967, 
      3445.16856257882, 1543.19372967879, 4597.38037352791, 4595.39779944173, 
      5971.2095300263, 7246.64992405183, 7243.43829018978, 1541.03854502253, 
      0.524237328620075, -1541.03854502253, -3439.88467971574, 
      -1543.19372967879, -5966.78017190094, 4595.39779944173, 7243.43829018978, 
      4597.38037352791, 5966.14679301243, -12000, -10814.8191906402, -12000, 
      -12000, 9267.83542668967, 10402.3110576205, -4595.39779944173, 
      6308.51348897238, 6300.84423680379, 8298.7438283579, 10266.3457228884, 
      8278.51220372614, -4595.39779944173, 7246.64992405183, 10306.5842478909, 
      8613.09299129283, 10813.2715221157, 12000, 12000, -10443.0584327809, 
      -12000, 11170.5391413182, 12000, 11163.999410538, -10813.2715221157, 
      -12000, 12000, 12000, 12000, 12000, -4597.38037352791, -7243.43829018978, 
      -7246.64992405183, -9265.70533800492, -12000, -4597.38037352791, -12000, 
      -12000, 10491.7985485365, 9265.70533800492, 12000, 9267.83542668967, 
      9265.70533800492, 10431.8959350137, 8590.35289998965, 1541.03854502253, 
      3428.34501734486, 1543.19372967879, -1.53120240898716, -12000, -12000, 
      -10814.8191906402, -12000, -10813.2715221157, 12000, 12000, 
      10813.2715221157, 10814.8191906402, 12000, 10465.2918209732, 
      10814.8191906402, 12000, -1543.19372967879, -3448.22524193791, 
      -1541.03854502253, -7243.43829018978, -8597.96418188709, 
      -9265.70533800492, -7246.64992405183, -10462.2279847906, 
      -10485.9414041032, -9267.83542668967, -10295.9463452935, 
      -8306.45172737393, -10273.7115257364, -8283.8018120481, 
      -6318.77565833086, -5987.12702139264, -6311.85858832251, -12000, 
      -8584.22308057719, -10404.4860163122, -9267.83542668967, 
      3445.16856257882, 1543.19372967879, 4597.38037352791, 4595.39779944173, 
      5971.2095300263, 7246.64992405183, 7243.43829018978, 1541.03854502253, 
      0.524237328620075, -1541.03854502253, -3439.88467971574, 
      -1543.19372967879, -5966.78017190094, 4595.39779944173, 7243.43829018978, 
      4597.38037352791, 5966.14679301243, -12000, -10814.8191906402, -12000, 
      -12000, 9267.83542668967, 10402.3110576205, -4595.39779944173, 
      6308.51348897238, 6300.84423680379, 8298.7438283579, 10266.3457228884, 
      8278.51220372614, -4595.39779944173, 7246.64992405183, 10306.5842478909, 
      8613.09299129283, 10813.2715221157, 12000, 12000, -10443.0584327809, 
      -12000, 11170.5391413182, 12000, 11163.999410538, -10813.2715221157, 
      -12000, 12000, 12000, 12000, 12000, -4597.38037352791, -7243.43829018978, 
      -7246.64992405183, -9265.70533800492, -12000, -4597.38037352791, -12000, 
      -12000, 10491.7985485365, 9265.70533800492, 12000 };

    // Y coordinates for a five-block tetrahedron-mesh
    std::vector< tk::real > shear_5blocks_coordy = {
      3400, 3400, 1905.76449338784, 1430.9851099303, -3400, 
      -227.438426715468, -3400, -172.544874029468, -2277.56447740374, 
      -2277.08796942847, -3400, -3400, -3400, -2277.08796942847, -3400, -3400, 
      -3400, 2277.56447740374, 1832.05851418974, 3400, 2277.08796942847, -3400, 
      -134.222230704383, -3400, 3400, 1437.08343931893, 3400, 3400, 
      1866.33397376965, 1902.86884255972, 3400, -26.7381911665116, 
      1116.50712417059, 30.094145032434, -1133.90381169443, -1018.60094237475, 
      1292.41326004348, 936.971047368332, -3400, -1434.91193975863, 
      -1871.05163260565, -3400, -36.5530590500571, 3400, 3400, 3400, 
      1343.77563596578, 3400, 3400, 3400, 60.4233320798953, 3400, 
      -112.061842112718, 3400, -1385.46616119612, -3400, -3400, -3400, 
      -1427.49818619252, 3400, 3400, 2277.08796942847, 2277.56447740374, -3400, 
      -1875.04084607969, -3400, -989.489846703821, 914.951648201565, 
      1120.9250313782, 31.0989630657209, -1151.12813904993, 3400, -3400, 
      -55.5902098231577, -1446.98693253471, 3400, 3400, 3400, 
      -1900.35954092555, -824.63747473492, -2358.83385042846, 
      -2277.56447740374, -1562.5814036468, 3400, 3400, 823.67938809126, 
      -823.67938809126, -824.63747473492, 824.63747473492, -3400, -3400, -3400, 
      -3400, -823.67938809126, 3400, 824.63747473492, 823.67938809126, 
      -1905.27198464384, -3400, -3400, 3400, 3400, 1905.76449338784, 
      1430.9851099303, -3400, -227.438426715468, -3400, -172.544874029468, 
      -2277.56447740374, -2277.08796942847, -3400, -3400, -3400, 
      -2277.08796942847, -3400, -3400, -3400, 2277.56447740374, 
      1832.05851418974, 3400, 2277.08796942847, -3400, -134.222230704383, 
      -3400, 3400, 1437.08343931893, 3400, 3400, 1866.33397376965, 
      1902.86884255972, 3400, -26.7381911665116, 1116.50712417059, 
      30.094145032434, -1133.90381169443, -1018.60094237475, 1292.41326004348, 
      936.971047368332, -3400, -1434.91193975863, -1871.05163260565, -3400, 
      -36.5530590500571, 3400, 3400, 3400, 1343.77563596578, 3400, 3400, 3400, 
      60.4233320798953, 3400, -112.061842112718, 3400, -1385.46616119612, 
      -3400, -3400, -3400, -1427.49818619252, 3400, 3400, 2277.08796942847, 
      2277.56447740374, -3400, -1875.04084607969, -3400, -989.489846703821, 
      914.951648201565, 1120.9250313782, 31.0989630657209, -1151.12813904993, 
      3400, -3400, -55.5902098231577, -1446.98693253471, 3400, 3400, 3400, 
      -1900.35954092555, -824.63747473492, -2358.83385042846, 
      -2277.56447740374, -1562.5814036468, 3400, 3400, 823.67938809126, 
      -823.67938809126, -824.63747473492, 824.63747473492, -3400, -3400, -3400, 
      -3400, -823.67938809126, 3400, 824.63747473492, 823.67938809126, 
      -1905.27198464384, -3400, -3400, 3400, 3400, 1905.76449338784, 
      1430.9851099303, -3400, -227.438426715468, -3400, -172.544874029468, 
      -2277.56447740374, -2277.08796942847, -3400, -3400, -3400, 
      -2277.08796942847, -3400, -3400, -3400, 2277.56447740374, 
      1832.05851418974, 3400, 2277.08796942847, -3400, -134.222230704383, 
      -3400, 3400, 1437.08343931893, 3400, 3400, 1866.33397376965, 
      1902.86884255972, 3400, -26.7381911665116, 1116.50712417059, 
      30.094145032434, -1133.90381169443, -1018.60094237475, 1292.41326004348, 
      936.971047368332, -3400, -1434.91193975863, -1871.05163260565, -3400, 
      -36.5530590500571, 3400, 3400, 3400, 1343.77563596578, 3400, 3400, 3400, 
      60.4233320798953, 3400, -112.061842112718, 3400, -1385.46616119612, 
      -3400, -3400, -3400, -1427.49818619252, 3400, 3400, 2277.08796942847, 
      2277.56447740374, -3400, -1875.04084607969, -3400, -989.489846703821, 
      914.951648201565, 1120.9250313782, 31.0989630657209, -1151.12813904993, 
      3400, -3400, -55.5902098231577, -1446.98693253471, 3400, 3400, 3400, 
      -1900.35954092555, -824.63747473492, -2358.83385042846, 
      -2277.56447740374, -1562.5814036468, 3400, 3400, 823.67938809126, 
      -823.67938809126, -824.63747473492, 824.63747473492, -3400, -3400, -3400, 
      -3400, -823.67938809126, 3400, 824.63747473492, 823.67938809126, 
      -1905.27198464384, -3400, -3400, 3400, 3400, 1905.76449338784, 
      1430.9851099303, -3400, -227.438426715468, -3400, -172.544874029468, 
      -2277.56447740374, -2277.08796942847, -3400, -3400, -3400, 
      -2277.08796942847, -3400, -3400, -3400, 2277.56447740374, 
      1832.05851418974, 3400, 2277.08796942847, -3400, -134.222230704383, 
      -3400, 3400, 1437.08343931893, 3400, 3400, 1866.33397376965, 
      1902.86884255972, 3400, -26.7381911665116, 1116.50712417059, 
      30.094145032434, -1133.90381169443, -1018.60094237475, 1292.41326004348, 
      936.971047368332, -3400, -1434.91193975863, -1871.05163260565, -3400, 
      -36.5530590500571, 3400, 3400, 3400, 1343.77563596578, 3400, 3400, 3400, 
      60.4233320798953, 3400, -112.061842112718, 3400, -1385.46616119612, 
      -3400, -3400, -3400, -1427.49818619252, 3400, 3400, 2277.08796942847, 
      2277.56447740374, -3400, -1875.04084607969, -3400, -989.489846703821, 
      914.951648201565, 1120.9250313782, 31.0989630657209, -1151.12813904993, 
      3400, -3400, -55.5902098231577, -1446.98693253471, 3400, 3400, 3400, 
      -1900.35954092555, -824.63747473492, -2358.83385042846, 
      -2277.56447740374, -1562.5814036468, 3400, 3400, 823.67938809126, 
      -823.67938809126, -824.63747473492, 824.63747473492, -3400, -3400, -3400, 
      -3400, -823.67938809126, 3400, 824.63747473492, 823.67938809126, 
      -1905.27198464384, -3400, -3400, 3400, 3400, 1905.76449338784, 
      1430.9851099303, -3400, -227.438426715468, -3400, -172.544874029468, 
      -2277.56447740374, -2277.08796942847, -3400, -3400, -3400, 
      -2277.08796942847, -3400, -3400, -3400, 2277.56447740374, 
      1832.05851418974, 3400, 2277.08796942847, -3400, -134.222230704383, 
      -3400, 3400, 1437.08343931893, 3400, 3400, 1866.33397376965, 
      1902.86884255972, 3400, -26.7381911665116, 1116.50712417059, 
      30.094145032434, -1133.90381169443, -1018.60094237475, 1292.41326004348, 
      936.971047368332, -3400, -1434.91193975863, -1871.05163260565, -3400, 
      -36.5530590500571, 3400, 3400, 3400, 1343.77563596578, 3400, 3400, 3400, 
      60.4233320798953, 3400, -112.061842112718, 3400, -1385.46616119612, 
      -3400, -3400, -3400, -1427.49818619252, 3400, 3400, 2277.08796942847, 
      2277.56447740374, -3400, -1875.04084607969, -3400, -989.489846703821, 
      914.951648201565, 1120.9250313782, 31.0989630657209, -1151.12813904993, 
      3400, -3400, -55.5902098231577, -1446.98693253471, 3400, 3400, 3400, 
      -1900.35954092555, -824.63747473492, -2358.83385042846, 
      -2277.56447740374, -1562.5814036468, 3400, 3400, 823.67938809126, 
      -823.67938809126, -824.63747473492, 824.63747473492, -3400, -3400, -3400, 
      -3400, -823.67938809126, 3400, 824.63747473492, 823.67938809126, 
      -1905.27198464384, -3400, -3400 };

    // Z coordinates for a five-block tetrahedron-mesh
    std::vector< tk::real > shear_5blocks_coordz = {
      3500, 2500, 2500, 2500, 3500, 2500, 2500, 2500, 3500, 2500, 3500, 
      2500, 2500, 3500, 3500, 3500, 2500, 3500, 3500, 3500, 2500, 3500, 2500, 
      2500, 3500, 3500, 3500, 2500, 2500, 3500, 2500, 2500, 2500, 3500, 3500, 
      2500, 2500, 3500, 3500, 2500, 3500, 3500, 3500, 3500, 3500, 2500, 3500, 
      3500, 2500, 2500, 3500, 3500, 3500, 2500, 3500, 3500, 3500, 2500, 2500, 
      3500, 2500, 3500, 2500, 2500, 2500, 2500, 3500, 2500, 3500, 2500, 2500, 
      3500, 2500, 3500, 3500, 2500, 2500, 3500, 2500, 2500, 3138.05098189449, 
      2500, 3019.59403792172, 3500, 2500, 3500, 2500, 3500, 2500, 3500, 2500, 
      3500, 2500, 3500, 2500, 3500, 2500, 3500, 3500, 2500, 4500, 3500, 3500, 
      3500, 4500, 3500, 3500, 3500, 4500, 3500, 4500, 3500, 3500, 4500, 4500, 
      4500, 3500, 4500, 4500, 4500, 3500, 4500, 3500, 3500, 4500, 4500, 4500, 
      3500, 3500, 4500, 3500, 3500, 3500, 4500, 4500, 3500, 3500, 4500, 4500, 
      3500, 4500, 4500, 4500, 4500, 4500, 3500, 4500, 4500, 3500, 3500, 4500, 
      4500, 4500, 3500, 4500, 4500, 4500, 3500, 3500, 4500, 3500, 4500, 3500, 
      3500, 3500, 3500, 4500, 3500, 4500, 3500, 3500, 4500, 3500, 4500, 4500, 
      3500, 3500, 4500, 3500, 3500, 4138.05098189449, 3500, 4019.59403792172, 
      4500, 3500, 4500, 3500, 4500, 3500, 4500, 3500, 4500, 3500, 4500, 3500, 
      4500, 3500, 4500, 4500, 3500, 500, -500, -500, -500, 500, -500, -500, 
      -500, 500, -500, 500, -500, -500, 500, 500, 500, -500, 500, 500, 500, 
      -500, 500, -500, -500, 500, 500, 500, -500, -500, 500, -500, -500, -500, 
      500, 500, -500, -500, 500, 500, -500, 500, 500, 500, 500, 500, -500, 500, 
      500, -500, -500, 500, 500, 500, -500, 500, 500, 500, -500, -500, 500, 
      -500, 500, -500, -500, -500, -500, 500, -500, 500, -500, -500, 500, -500, 
      500, 500, -500, -500, 500, -500, -500, 138.050981894494, -500, 
      19.5940379217242, 500, -500, 500, -500, 500, -500, 500, -500, 500, -500, 
      500, -500, 500, -500, 500, 500, -500, 1500, 500, 500, 500, 1500, 500, 
      500, 500, 1500, 500, 1500, 500, 500, 1500, 1500, 1500, 500, 1500, 1500, 
      1500, 500, 1500, 500, 500, 1500, 1500, 1500, 500, 500, 1500, 500, 500, 
      500, 1500, 1500, 500, 500, 1500, 1500, 500, 1500, 1500, 1500, 1500, 1500, 
      500, 1500, 1500, 500, 500, 1500, 1500, 1500, 500, 1500, 1500, 1500, 500, 
      500, 1500, 500, 1500, 500, 500, 500, 500, 1500, 500, 1500, 500, 500, 
      1500, 500, 1500, 1500, 500, 500, 1500, 500, 500, 1138.05098189449, 500, 
      1019.59403792172, 1500, 500, 1500, 500, 1500, 500, 1500, 500, 1500, 500, 
      1500, 500, 1500, 500, 1500, 1500, 500, 2500, 1500, 1500, 1500, 2500, 
      1500, 1500, 1500, 2500, 1500, 2500, 1500, 1500, 2500, 2500, 2500, 1500, 
      2500, 2500, 2500, 1500, 2500, 1500, 1500, 2500, 2500, 2500, 1500, 1500, 
      2500, 1500, 1500, 1500, 2500, 2500, 1500, 1500, 2500, 2500, 1500, 2500, 
      2500, 2500, 2500, 2500, 1500, 2500, 2500, 1500, 1500, 2500, 2500, 2500, 
      1500, 2500, 2500, 2500, 1500, 1500, 2500, 1500, 2500, 1500, 1500, 1500, 
      1500, 2500, 1500, 2500, 1500, 1500, 2500, 1500, 2500, 2500, 1500, 1500, 
      2500, 1500, 1500, 2138.05098189449, 1500, 2019.59403792172, 2500, 1500, 
      2500, 1500, 2500, 1500, 2500, 1500, 2500, 1500, 2500, 1500, 2500, 1500, 
      2500, 2500, 1500 };

    // Element connectivity for the 2nd block of a five-block tetrahedron-mesh
    std::vector< std::size_t > shear_5blocks_connect1 = {
      1, 2, 3, 4,
      5, 6, 7, 8,
      9, 10, 11, 12,
      11, 10, 13, 12,
      14, 15, 16, 17,
      18, 19, 20, 21,
      19, 1, 3, 4,
      22, 23, 8, 24,
      25, 26, 27, 28,
      26, 29, 30, 31,
      26, 32, 29, 33,
      34, 26, 35, 32,
      35, 33, 26, 36,
      26, 33, 37, 36,
      38, 26, 25, 37,
      25, 26, 28, 37,
      9, 11, 39, 12,
      38, 35, 26, 36,
      35, 40, 32, 33,
      41, 35, 42, 40,
      43, 44, 45, 46,
      47, 45, 48, 49,
      43, 44, 46, 50,
      51, 52, 44, 50,
      51, 22, 53, 8,
      22, 53, 8, 23,
      51, 50, 8, 54,
      43, 46, 6, 50,
      55, 37, 23, 36,
      38, 37, 55, 36,
      26, 28, 37, 33,
      56, 57, 58, 59,
      5, 43, 56, 6,
      60, 61, 62, 63,
      62, 61, 30, 63,
      30, 31, 29, 61,
      16, 64, 65, 17,
      56, 58, 7, 6,
      22, 23, 24, 66,
      56, 6, 67, 59,
      5, 22, 51, 8,
      47, 67, 43, 68,
      56, 58, 6, 59,
      19, 69, 4, 70,
      47, 48, 69, 4,
      69, 48, 1, 4,
      69, 71, 4, 70,
      26, 27, 28, 31,
      26, 29, 31, 33,
      26, 30, 27, 31,
      72, 38, 25, 37,
      43, 67, 56, 6,
      57, 73, 58, 59,
      56, 67, 57, 59,
      47, 43, 45, 46,
      47, 43, 46, 68,
      67, 68, 71, 59,
      51, 8, 53, 54,
      69, 74, 71, 70,
      69, 71, 67, 4,
      75, 67, 71, 59,
      57, 67, 75, 59,
      74, 65, 71, 70,
      47, 49, 48, 4,
      47, 49, 4, 68,
      48, 2, 1, 4,
      20, 21, 76, 77,
      18, 20, 78, 77,
      9, 79, 10, 80,
      9, 79, 11, 10,
      41, 11, 9, 79,
      65, 81, 82, 83,
      84, 31, 30, 61,
      60, 85, 61, 63,
      67, 4, 71, 68,
      86, 87, 74, 70,
      75, 65, 64, 71,
      47, 4, 67, 68,
      43, 67, 6, 68,
      14, 88, 82, 83,
      18, 21, 20, 77,
      19, 70, 3, 89,
      90, 55, 66, 91,
      55, 66, 91, 36,
      92, 93, 40, 91,
      35, 55, 40, 36,
      55, 23, 66, 36,
      5, 22, 8, 24,
      41, 42, 11, 79,
      41, 9, 94, 80,
      88, 87, 82, 83,
      42, 79, 93, 13,
      41, 42, 79, 40,
      65, 82, 87, 83,
      41, 32, 79, 80,
      19, 4, 3, 70,
      53, 72, 95, 37,
      19, 86, 70, 89,
      74, 65, 87, 83,
      74, 87, 88, 83,
      86, 88, 74, 87,
      90, 92, 55, 91,
      41, 94, 32, 80,
      92, 40, 55, 91,
      92, 93, 42, 40,
      34, 96, 29, 97,
      96, 30, 29, 63,
      14, 82, 17, 81,
      84, 62, 60, 61,
      26, 31, 28, 33,
      34, 94, 96, 97,
      53, 55, 38, 37,
      38, 26, 37, 36,
      53, 55, 37, 23,
      53, 8, 23, 54,
      51, 53, 52, 54,
      53, 38, 72, 37,
      90, 55, 23, 66,
      41, 34, 35, 32,
      22, 90, 53, 23,
      11, 79, 42, 13,
      41, 79, 32, 40,
      14, 82, 81, 83,
      22, 90, 23, 66,
      96, 29, 97, 63,
      34, 29, 32, 97,
      92, 35, 55, 40,
      34, 29, 26, 32,
      34, 32, 94, 97,
      41, 32, 35, 40,
      65, 17, 82, 81,
      47, 45, 49, 46,
      19, 69, 1, 4,
      14, 81, 98, 83,
      11, 79, 13, 10,
      14, 16, 98, 81,
      14, 98, 88, 83,
      19, 86, 74, 70,
      20, 3, 1, 76,
      18, 19, 21, 89,
      19, 3, 21, 89,
      16, 17, 65, 81,
      18, 86, 19, 89,
      51, 43, 8, 50,
      47, 69, 67, 4,
      57, 75, 99, 73,
      98, 74, 88, 83,
      14, 15, 17, 82,
      99, 75, 65, 64,
      69, 75, 67, 71,
      43, 6, 46, 68,
      98, 99, 75, 65,
      41, 94, 34, 32,
      99, 75, 64, 73,
      16, 99, 98, 65,
      16, 99, 65, 64,
      84, 27, 30, 31,
      90, 55, 53, 23,
      75, 71, 73, 59,
      57, 75, 73, 59,
      38, 55, 35, 36,
      1, 3, 2, 76,
      30, 61, 29, 63,
      62, 30, 96, 63,
      15, 100, 17, 82,
      34, 30, 26, 29,
      5, 43, 6, 8,
      72, 25, 95, 37,
      5, 8, 7, 24,
      53, 23, 95, 54,
      19, 3, 20, 21,
      86, 87, 70, 89,
      14, 17, 16, 81,
      98, 65, 74, 83,
      47, 46, 49, 68,
      98, 75, 74, 65,
      98, 81, 65, 83,
      16, 65, 98, 81,
      75, 71, 64, 73,
      5, 51, 43, 8,
      67, 6, 68, 59,
      51, 44, 43, 50,
      53, 95, 72, 54,
      48, 49, 2, 4,
      19, 1, 20, 3,
      84, 30, 62, 61,
      34, 96, 30, 29,
      5, 56, 7, 6,
      94, 97, 32, 80,
      92, 42, 35, 40,
      25, 28, 95, 37,
      41, 79, 9, 80,
      53, 37, 95, 23,
      35, 32, 26, 33,
      53, 72, 52, 54,
      42, 93, 79, 40,
      55, 91, 40, 36,
      43, 6, 8, 50,
      74, 65, 75, 71,
      20, 3, 76, 21,
      19, 74, 69, 70,
      35, 40, 33, 36,
      69, 74, 75, 71,
      51, 52, 50, 54,
      74, 87, 65, 70 };

    // Element connectivity for the 2nd block of a five-block tetrahedron-mesh
    std::vector< std::size_t > shear_5blocks_connect2 = {
      101, 102, 103, 104,
      105, 106, 107, 108,
      109, 110, 111, 112,
      111, 110, 113, 112,
      114, 115, 116, 117,
      118, 119, 120, 121,
      119, 101, 103, 104,
      122, 123, 108, 124,
      125, 126, 127, 128,
      126, 129, 130, 131,
      126, 132, 129, 133,
      134, 126, 135, 132,
      135, 133, 126, 136,
      126, 133, 137, 136,
      138, 126, 125, 137,
      125, 126, 128, 137,
      109, 111, 139, 112,
      138, 135, 126, 136,
      135, 140, 132, 133,
      141, 135, 142, 140,
      143, 144, 145, 146,
      147, 145, 148, 149,
      143, 144, 146, 150,
      151, 152, 144, 150,
      151, 122, 153, 108,
      122, 153, 108, 123,
      151, 150, 108, 154,
      143, 146, 106, 150,
      155, 137, 123, 136,
      138, 137, 155, 136,
      126, 128, 137, 133,
      156, 157, 158, 159,
      105, 143, 156, 106,
      160, 161, 162, 163,
      162, 161, 130, 163,
      130, 131, 129, 161,
      116, 164, 165, 117,
      156, 158, 107, 106,
      122, 123, 124, 166,
      156, 106, 167, 159,
      105, 122, 151, 108,
      147, 167, 143, 168,
      156, 158, 106, 159,
      119, 169, 104, 170,
      147, 148, 169, 104,
      169, 148, 101, 104,
      169, 171, 104, 170,
      126, 127, 128, 131,
      126, 129, 131, 133,
      126, 130, 127, 131,
      172, 138, 125, 137,
      143, 167, 156, 106,
      157, 173, 158, 159,
      156, 167, 157, 159,
      147, 143, 145, 146,
      147, 143, 146, 168,
      167, 168, 171, 159,
      151, 108, 153, 154,
      169, 174, 171, 170,
      169, 171, 167, 104,
      175, 167, 171, 159,
      157, 167, 175, 159,
      174, 165, 171, 170,
      147, 149, 148, 104,
      147, 149, 104, 168,
      148, 102, 101, 104,
      120, 121, 176, 177,
      118, 120, 178, 177,
      109, 179, 110, 180,
      109, 179, 111, 110,
      141, 111, 109, 179,
      165, 181, 182, 183,
      184, 131, 130, 161,
      160, 185, 161, 163,
      167, 104, 171, 168,
      186, 187, 174, 170,
      175, 165, 164, 171,
      147, 104, 167, 168,
      143, 167, 106, 168,
      114, 188, 182, 183,
      118, 121, 120, 177,
      119, 170, 103, 189,
      190, 155, 166, 191,
      155, 166, 191, 136,
      192, 193, 140, 191,
      135, 155, 140, 136,
      155, 123, 166, 136,
      105, 122, 108, 124,
      141, 142, 111, 179,
      141, 109, 194, 180,
      188, 187, 182, 183,
      142, 179, 193, 113,
      141, 142, 179, 140,
      165, 182, 187, 183,
      141, 132, 179, 180,
      119, 104, 103, 170,
      153, 172, 195, 137,
      119, 186, 170, 189,
      174, 165, 187, 183,
      174, 187, 188, 183,
      186, 188, 174, 187,
      190, 192, 155, 191,
      141, 194, 132, 180,
      192, 140, 155, 191,
      192, 193, 142, 140,
      134, 196, 129, 197,
      196, 130, 129, 163,
      114, 182, 117, 181,
      184, 162, 160, 161,
      126, 131, 128, 133,
      134, 194, 196, 197,
      153, 155, 138, 137,
      138, 126, 137, 136,
      153, 155, 137, 123,
      153, 108, 123, 154,
      151, 153, 152, 154,
      153, 138, 172, 137,
      190, 155, 123, 166,
      141, 134, 135, 132,
      122, 190, 153, 123,
      111, 179, 142, 113,
      141, 179, 132, 140,
      114, 182, 181, 183,
      122, 190, 123, 166,
      196, 129, 197, 163,
      134, 129, 132, 197,
      192, 135, 155, 140,
      134, 129, 126, 132,
      134, 132, 194, 197,
      141, 132, 135, 140,
      165, 117, 182, 181,
      147, 145, 149, 146,
      119, 169, 101, 104,
      114, 181, 198, 183,
      111, 179, 113, 110,
      114, 116, 198, 181,
      114, 198, 188, 183,
      119, 186, 174, 170,
      120, 103, 101, 176,
      118, 119, 121, 189,
      119, 103, 121, 189,
      116, 117, 165, 181,
      118, 186, 119, 189,
      151, 143, 108, 150,
      147, 169, 167, 104,
      157, 175, 199, 173,
      198, 174, 188, 183,
      114, 115, 117, 182,
      199, 175, 165, 164,
      169, 175, 167, 171,
      143, 106, 146, 168,
      198, 199, 175, 165,
      141, 194, 134, 132,
      199, 175, 164, 173,
      116, 199, 198, 165,
      116, 199, 165, 164,
      184, 127, 130, 131,
      190, 155, 153, 123,
      175, 171, 173, 159,
      157, 175, 173, 159,
      138, 155, 135, 136,
      101, 103, 102, 176,
      130, 161, 129, 163,
      162, 130, 196, 163,
      115, 200, 117, 182,
      134, 130, 126, 129,
      105, 143, 106, 108,
      172, 125, 195, 137,
      105, 108, 107, 124,
      153, 123, 195, 154,
      119, 103, 120, 121,
      186, 187, 170, 189,
      114, 117, 116, 181,
      198, 165, 174, 183,
      147, 146, 149, 168,
      198, 175, 174, 165,
      198, 181, 165, 183,
      116, 165, 198, 181,
      175, 171, 164, 173,
      105, 151, 143, 108,
      167, 106, 168, 159,
      151, 144, 143, 150,
      153, 195, 172, 154,
      148, 149, 102, 104,
      119, 101, 120, 103,
      184, 130, 162, 161,
      134, 196, 130, 129,
      105, 156, 107, 106,
      194, 197, 132, 180,
      192, 142, 135, 140,
      125, 128, 195, 137,
      141, 179, 109, 180,
      153, 137, 195, 123,
      135, 132, 126, 133,
      153, 172, 152, 154,
      142, 193, 179, 140,
      155, 191, 140, 136,
      143, 106, 108, 150,
      174, 165, 175, 171,
      120, 103, 176, 121,
      119, 174, 169, 170,
      135, 140, 133, 136,
      169, 174, 175, 171,
      151, 152, 150, 154,
      174, 187, 165, 170 };

    // Element connectivity for the 3rd block of a five-block tetrahedron-mesh
    std::vector< std::size_t > shear_5blocks_connect3 = {
      201, 202, 203, 204,
      205, 206, 207, 208,
      209, 210, 211, 212,
      211, 210, 213, 212,
      214, 215, 216, 217,
      218, 219, 220, 221,
      219, 201, 203, 204,
      222, 223, 208, 224,
      225, 226, 227, 228,
      226, 229, 230, 231,
      226, 232, 229, 233,
      234, 226, 235, 232,
      235, 233, 226, 236,
      226, 233, 237, 236,
      238, 226, 225, 237,
      225, 226, 228, 237,
      209, 211, 239, 212,
      238, 235, 226, 236,
      235, 240, 232, 233,
      241, 235, 242, 240,
      243, 244, 245, 246,
      247, 245, 248, 249,
      243, 244, 246, 250,
      251, 252, 244, 250,
      251, 222, 253, 208,
      222, 253, 208, 223,
      251, 250, 208, 254,
      243, 246, 206, 250,
      255, 237, 223, 236,
      238, 237, 255, 236,
      226, 228, 237, 233,
      256, 257, 258, 259,
      205, 243, 256, 206,
      260, 261, 262, 263,
      262, 261, 230, 263,
      230, 231, 229, 261,
      216, 264, 265, 217,
      256, 258, 207, 206,
      222, 223, 224, 266,
      256, 206, 267, 259,
      205, 222, 251, 208,
      247, 267, 243, 268,
      256, 258, 206, 259,
      219, 269, 204, 270,
      247, 248, 269, 204,
      269, 248, 201, 204,
      269, 271, 204, 270,
      226, 227, 228, 231,
      226, 229, 231, 233,
      226, 230, 227, 231,
      272, 238, 225, 237,
      243, 267, 256, 206,
      257, 273, 258, 259,
      256, 267, 257, 259,
      247, 243, 245, 246,
      247, 243, 246, 268,
      267, 268, 271, 259,
      251, 208, 253, 254,
      269, 274, 271, 270,
      269, 271, 267, 204,
      275, 267, 271, 259,
      257, 267, 275, 259,
      274, 265, 271, 270,
      247, 249, 248, 204,
      247, 249, 204, 268,
      248, 202, 201, 204,
      220, 221, 276, 277,
      218, 220, 278, 277,
      209, 279, 210, 280,
      209, 279, 211, 210,
      241, 211, 209, 279,
      265, 281, 282, 283,
      284, 231, 230, 261,
      260, 285, 261, 263,
      267, 204, 271, 268,
      286, 287, 274, 270,
      275, 265, 264, 271,
      247, 204, 267, 268,
      243, 267, 206, 268,
      214, 288, 282, 283,
      218, 221, 220, 277,
      219, 270, 203, 289,
      290, 255, 266, 291,
      255, 266, 291, 236,
      292, 293, 240, 291,
      235, 255, 240, 236,
      255, 223, 266, 236,
      205, 222, 208, 224,
      241, 242, 211, 279,
      241, 209, 294, 280,
      288, 287, 282, 283,
      242, 279, 293, 213,
      241, 242, 279, 240,
      265, 282, 287, 283,
      241, 232, 279, 280,
      219, 204, 203, 270,
      253, 272, 295, 237,
      219, 286, 270, 289,
      274, 265, 287, 283,
      274, 287, 288, 283,
      286, 288, 274, 287,
      290, 292, 255, 291,
      241, 294, 232, 280,
      292, 240, 255, 291,
      292, 293, 242, 240,
      234, 296, 229, 297,
      296, 230, 229, 263,
      214, 282, 217, 281,
      284, 262, 260, 261,
      226, 231, 228, 233,
      234, 294, 296, 297,
      253, 255, 238, 237,
      238, 226, 237, 236,
      253, 255, 237, 223,
      253, 208, 223, 254,
      251, 253, 252, 254,
      253, 238, 272, 237,
      290, 255, 223, 266,
      241, 234, 235, 232,
      222, 290, 253, 223,
      211, 279, 242, 213,
      241, 279, 232, 240,
      214, 282, 281, 283,
      222, 290, 223, 266,
      296, 229, 297, 263,
      234, 229, 232, 297,
      292, 235, 255, 240,
      234, 229, 226, 232,
      234, 232, 294, 297,
      241, 232, 235, 240,
      265, 217, 282, 281,
      247, 245, 249, 246,
      219, 269, 201, 204,
      214, 281, 298, 283,
      211, 279, 213, 210,
      214, 216, 298, 281,
      214, 298, 288, 283,
      219, 286, 274, 270,
      220, 203, 201, 276,
      218, 219, 221, 289,
      219, 203, 221, 289,
      216, 217, 265, 281,
      218, 286, 219, 289,
      251, 243, 208, 250,
      247, 269, 267, 204,
      257, 275, 299, 273,
      298, 274, 288, 283,
      214, 215, 217, 282,
      299, 275, 265, 264,
      269, 275, 267, 271,
      243, 206, 246, 268,
      298, 299, 275, 265,
      241, 294, 234, 232,
      299, 275, 264, 273,
      216, 299, 298, 265,
      216, 299, 265, 264,
      284, 227, 230, 231,
      290, 255, 253, 223,
      275, 271, 273, 259,
      257, 275, 273, 259,
      238, 255, 235, 236,
      201, 203, 202, 276,
      230, 261, 229, 263,
      262, 230, 296, 263,
      215, 300, 217, 282,
      234, 230, 226, 229,
      205, 243, 206, 208,
      272, 225, 295, 237,
      205, 208, 207, 224,
      253, 223, 295, 254,
      219, 203, 220, 221,
      286, 287, 270, 289,
      214, 217, 216, 281,
      298, 265, 274, 283,
      247, 246, 249, 268,
      298, 275, 274, 265,
      298, 281, 265, 283,
      216, 265, 298, 281,
      275, 271, 264, 273,
      205, 251, 243, 208,
      267, 206, 268, 259,
      251, 244, 243, 250,
      253, 295, 272, 254,
      248, 249, 202, 204,
      219, 201, 220, 203,
      284, 230, 262, 261,
      234, 296, 230, 229,
      205, 256, 207, 206,
      294, 297, 232, 280,
      292, 242, 235, 240,
      225, 228, 295, 237,
      241, 279, 209, 280,
      253, 237, 295, 223,
      235, 232, 226, 233,
      253, 272, 252, 254,
      242, 293, 279, 240,
      255, 291, 240, 236,
      243, 206, 208, 250,
      274, 265, 275, 271,
      220, 203, 276, 221,
      219, 274, 269, 270,
      235, 240, 233, 236,
      269, 274, 275, 271,
      251, 252, 250, 254,
      274, 287, 265, 270 };

    // Element connectivity for the 4th block of a five-block tetrahedron-mesh
    std::vector< std::size_t > shear_5blocks_connect4 = {
      301, 302, 303, 304,
      305, 306, 307, 308,
      309, 310, 311, 312,
      311, 310, 313, 312,
      314, 315, 316, 317,
      318, 319, 320, 321,
      319, 301, 303, 304,
      322, 323, 308, 324,
      325, 326, 327, 328,
      326, 329, 330, 331,
      326, 332, 329, 333,
      334, 326, 335, 332,
      335, 333, 326, 336,
      326, 333, 337, 336,
      338, 326, 325, 337,
      325, 326, 328, 337,
      309, 311, 339, 312,
      338, 335, 326, 336,
      335, 340, 332, 333,
      341, 335, 342, 340,
      343, 344, 345, 346,
      347, 345, 348, 349,
      343, 344, 346, 350,
      351, 352, 344, 350,
      351, 322, 353, 308,
      322, 353, 308, 323,
      351, 350, 308, 354,
      343, 346, 306, 350,
      355, 337, 323, 336,
      338, 337, 355, 336,
      326, 328, 337, 333,
      356, 357, 358, 359,
      305, 343, 356, 306,
      360, 361, 362, 363,
      362, 361, 330, 363,
      330, 331, 329, 361,
      316, 364, 365, 317,
      356, 358, 307, 306,
      322, 323, 324, 366,
      356, 306, 367, 359,
      305, 322, 351, 308,
      347, 367, 343, 368,
      356, 358, 306, 359,
      319, 369, 304, 370,
      347, 348, 369, 304,
      369, 348, 301, 304,
      369, 371, 304, 370,
      326, 327, 328, 331,
      326, 329, 331, 333,
      326, 330, 327, 331,
      372, 338, 325, 337,
      343, 367, 356, 306,
      357, 373, 358, 359,
      356, 367, 357, 359,
      347, 343, 345, 346,
      347, 343, 346, 368,
      367, 368, 371, 359,
      351, 308, 353, 354,
      369, 374, 371, 370,
      369, 371, 367, 304,
      375, 367, 371, 359,
      357, 367, 375, 359,
      374, 365, 371, 370,
      347, 349, 348, 304,
      347, 349, 304, 368,
      348, 302, 301, 304,
      320, 321, 376, 377,
      318, 320, 378, 377,
      309, 379, 310, 380,
      309, 379, 311, 310,
      341, 311, 309, 379,
      365, 381, 382, 383,
      384, 331, 330, 361,
      360, 385, 361, 363,
      367, 304, 371, 368,
      386, 387, 374, 370,
      375, 365, 364, 371,
      347, 304, 367, 368,
      343, 367, 306, 368,
      314, 388, 382, 383,
      318, 321, 320, 377,
      319, 370, 303, 389,
      390, 355, 366, 391,
      355, 366, 391, 336,
      392, 393, 340, 391,
      335, 355, 340, 336,
      355, 323, 366, 336,
      305, 322, 308, 324,
      341, 342, 311, 379,
      341, 309, 394, 380,
      388, 387, 382, 383,
      342, 379, 393, 313,
      341, 342, 379, 340,
      365, 382, 387, 383,
      341, 332, 379, 380,
      319, 304, 303, 370,
      353, 372, 395, 337,
      319, 386, 370, 389,
      374, 365, 387, 383,
      374, 387, 388, 383,
      386, 388, 374, 387,
      390, 392, 355, 391,
      341, 394, 332, 380,
      392, 340, 355, 391,
      392, 393, 342, 340,
      334, 396, 329, 397,
      396, 330, 329, 363,
      314, 382, 317, 381,
      384, 362, 360, 361,
      326, 331, 328, 333,
      334, 394, 396, 397,
      353, 355, 338, 337,
      338, 326, 337, 336,
      353, 355, 337, 323,
      353, 308, 323, 354,
      351, 353, 352, 354,
      353, 338, 372, 337,
      390, 355, 323, 366,
      341, 334, 335, 332,
      322, 390, 353, 323,
      311, 379, 342, 313,
      341, 379, 332, 340,
      314, 382, 381, 383,
      322, 390, 323, 366,
      396, 329, 397, 363,
      334, 329, 332, 397,
      392, 335, 355, 340,
      334, 329, 326, 332,
      334, 332, 394, 397,
      341, 332, 335, 340,
      365, 317, 382, 381,
      347, 345, 349, 346,
      319, 369, 301, 304,
      314, 381, 398, 383,
      311, 379, 313, 310,
      314, 316, 398, 381,
      314, 398, 388, 383,
      319, 386, 374, 370,
      320, 303, 301, 376,
      318, 319, 321, 389,
      319, 303, 321, 389,
      316, 317, 365, 381,
      318, 386, 319, 389,
      351, 343, 308, 350,
      347, 369, 367, 304,
      357, 375, 399, 373,
      398, 374, 388, 383,
      314, 315, 317, 382,
      399, 375, 365, 364,
      369, 375, 367, 371,
      343, 306, 346, 368,
      398, 399, 375, 365,
      341, 394, 334, 332,
      399, 375, 364, 373,
      316, 399, 398, 365,
      316, 399, 365, 364,
      384, 327, 330, 331,
      390, 355, 353, 323,
      375, 371, 373, 359,
      357, 375, 373, 359,
      338, 355, 335, 336,
      301, 303, 302, 376,
      330, 361, 329, 363,
      362, 330, 396, 363,
      315, 400, 317, 382,
      334, 330, 326, 329,
      305, 343, 306, 308,
      372, 325, 395, 337,
      305, 308, 307, 324,
      353, 323, 395, 354,
      319, 303, 320, 321,
      386, 387, 370, 389,
      314, 317, 316, 381,
      398, 365, 374, 383,
      347, 346, 349, 368,
      398, 375, 374, 365,
      398, 381, 365, 383,
      316, 365, 398, 381,
      375, 371, 364, 373,
      305, 351, 343, 308,
      367, 306, 368, 359,
      351, 344, 343, 350,
      353, 395, 372, 354,
      348, 349, 302, 304,
      319, 301, 320, 303,
      384, 330, 362, 361,
      334, 396, 330, 329,
      305, 356, 307, 306,
      394, 397, 332, 380,
      392, 342, 335, 340,
      325, 328, 395, 337,
      341, 379, 309, 380,
      353, 337, 395, 323,
      335, 332, 326, 333,
      353, 372, 352, 354,
      342, 393, 379, 340,
      355, 391, 340, 336,
      343, 306, 308, 350,
      374, 365, 375, 371,
      320, 303, 376, 321,
      319, 374, 369, 370,
      335, 340, 333, 336,
      369, 374, 375, 371,
      351, 352, 350, 354,
      374, 387, 365, 370 };

    // Element connectivity for the 5th block of a five-block tetrahedron-mesh
    std::vector< std::size_t > shear_5blocks_connect5 = {
      401, 402, 403, 404,
      405, 406, 407, 408,
      409, 410, 411, 412,
      411, 410, 413, 412,
      414, 415, 416, 417,
      418, 419, 420, 421,
      419, 401, 403, 404,
      422, 423, 408, 424,
      425, 426, 427, 428,
      426, 429, 430, 431,
      426, 432, 429, 433,
      434, 426, 435, 432,
      435, 433, 426, 436,
      426, 433, 437, 436,
      438, 426, 425, 437,
      425, 426, 428, 437,
      409, 411, 439, 412,
      438, 435, 426, 436,
      435, 440, 432, 433,
      441, 435, 442, 440,
      443, 444, 445, 446,
      447, 445, 448, 449,
      443, 444, 446, 450,
      451, 452, 444, 450,
      451, 422, 453, 408,
      422, 453, 408, 423,
      451, 450, 408, 454,
      443, 446, 406, 450,
      455, 437, 423, 436,
      438, 437, 455, 436,
      426, 428, 437, 433,
      456, 457, 458, 459,
      405, 443, 456, 406,
      460, 461, 462, 463,
      462, 461, 430, 463,
      430, 431, 429, 461,
      416, 464, 465, 417,
      456, 458, 407, 406,
      422, 423, 424, 466,
      456, 406, 467, 459,
      405, 422, 451, 408,
      447, 467, 443, 468,
      456, 458, 406, 459,
      419, 469, 404, 470,
      447, 448, 469, 404,
      469, 448, 401, 404,
      469, 471, 404, 470,
      426, 427, 428, 431,
      426, 429, 431, 433,
      426, 430, 427, 431,
      472, 438, 425, 437,
      443, 467, 456, 406,
      457, 473, 458, 459,
      456, 467, 457, 459,
      447, 443, 445, 446,
      447, 443, 446, 468,
      467, 468, 471, 459,
      451, 408, 453, 454,
      469, 474, 471, 470,
      469, 471, 467, 404,
      475, 467, 471, 459,
      457, 467, 475, 459,
      474, 465, 471, 470,
      447, 449, 448, 404,
      447, 449, 404, 468,
      448, 402, 401, 404,
      420, 421, 476, 477,
      418, 420, 478, 477,
      409, 479, 410, 480,
      409, 479, 411, 410,
      441, 411, 409, 479,
      465, 481, 482, 483,
      484, 431, 430, 461,
      460, 485, 461, 463,
      467, 404, 471, 468,
      486, 487, 474, 470,
      475, 465, 464, 471,
      447, 404, 467, 468,
      443, 467, 406, 468,
      414, 488, 482, 483,
      418, 421, 420, 477,
      419, 470, 403, 489,
      490, 455, 466, 491,
      455, 466, 491, 436,
      492, 493, 440, 491,
      435, 455, 440, 436,
      455, 423, 466, 436,
      405, 422, 408, 424,
      441, 442, 411, 479,
      441, 409, 494, 480,
      488, 487, 482, 483,
      442, 479, 493, 413,
      441, 442, 479, 440,
      465, 482, 487, 483,
      441, 432, 479, 480,
      419, 404, 403, 470,
      453, 472, 495, 437,
      419, 486, 470, 489,
      474, 465, 487, 483,
      474, 487, 488, 483,
      486, 488, 474, 487,
      490, 492, 455, 491,
      441, 494, 432, 480,
      492, 440, 455, 491,
      492, 493, 442, 440,
      434, 496, 429, 497,
      496, 430, 429, 463,
      414, 482, 417, 481,
      484, 462, 460, 461,
      426, 431, 428, 433,
      434, 494, 496, 497,
      453, 455, 438, 437,
      438, 426, 437, 436,
      453, 455, 437, 423,
      453, 408, 423, 454,
      451, 453, 452, 454,
      453, 438, 472, 437,
      490, 455, 423, 466,
      441, 434, 435, 432,
      422, 490, 453, 423,
      411, 479, 442, 413,
      441, 479, 432, 440,
      414, 482, 481, 483,
      422, 490, 423, 466,
      496, 429, 497, 463,
      434, 429, 432, 497,
      492, 435, 455, 440,
      434, 429, 426, 432,
      434, 432, 494, 497,
      441, 432, 435, 440,
      465, 417, 482, 481,
      447, 445, 449, 446,
      419, 469, 401, 404,
      414, 481, 498, 483,
      411, 479, 413, 410,
      414, 416, 498, 481,
      414, 498, 488, 483,
      419, 486, 474, 470,
      420, 403, 401, 476,
      418, 419, 421, 489,
      419, 403, 421, 489,
      416, 417, 465, 481,
      418, 486, 419, 489,
      451, 443, 408, 450,
      447, 469, 467, 404,
      457, 475, 499, 473,
      498, 474, 488, 483,
      414, 415, 417, 482,
      499, 475, 465, 464,
      469, 475, 467, 471,
      443, 406, 446, 468,
      498, 499, 475, 465,
      441, 494, 434, 432,
      499, 475, 464, 473,
      416, 499, 498, 465,
      416, 499, 465, 464,
      484, 427, 430, 431,
      490, 455, 453, 423,
      475, 471, 473, 459,
      457, 475, 473, 459,
      438, 455, 435, 436,
      401, 403, 402, 476,
      430, 461, 429, 463,
      462, 430, 496, 463,
      415, 500, 417, 482,
      434, 430, 426, 429,
      405, 443, 406, 408,
      472, 425, 495, 437,
      405, 408, 407, 424,
      453, 423, 495, 454,
      419, 403, 420, 421,
      486, 487, 470, 489,
      414, 417, 416, 481,
      498, 465, 474, 483,
      447, 446, 449, 468,
      498, 475, 474, 465,
      498, 481, 465, 483,
      416, 465, 498, 481,
      475, 471, 464, 473,
      405, 451, 443, 408,
      467, 406, 468, 459,
      451, 444, 443, 450,
      453, 495, 472, 454,
      448, 449, 402, 404,
      419, 401, 420, 403,
      484, 430, 462, 461,
      434, 496, 430, 429,
      405, 456, 407, 406,
      494, 497, 432, 480,
      492, 442, 435, 440,
      425, 428, 495, 437,
      441, 479, 409, 480,
      453, 437, 495, 423,
      435, 432, 426, 433,
      453, 472, 452, 454,
      442, 493, 479, 440,
      455, 491, 440, 436,
      443, 406, 408, 450,
      474, 465, 475, 471,
      420, 403, 476, 421,
      419, 474, 469, 470,
      435, 440, 433, 436,
      469, 474, 475, 471,
      451, 452, 450, 454,
      474, 487, 465, 470 };
};

//! Test group shortcuts
using ExodusIIMeshReader_group =
  test_group< ExodusIIMeshReader_common, MAX_TESTS_IN_GROUP >;
using ExodusIIMeshReader_object = ExodusIIMeshReader_group::object;

//! Define test group
static ExodusIIMeshReader_group ExodusIIMeshReader( "IO/ExodusIIMeshReader" );

//! Test definitions for group

//! Read all of single-block tet-mesh
//! \author J. Bakosi
template<> template<>
void ExodusIIMeshReader_object::test< 1 >() {
  set_test_name( "read all of single-block tet-mesh" );

  // Create unstructured-mesh object to read into
  tk::UnsMesh inmesh;
  // Read in mesh from file
  std::string infile( REGRESSION_DIR"/meshconv/gmsh_output/box_24.exo" );
  tk::ExodusIIMeshReader er( infile );
  er.readMesh( inmesh );

  // Test if the mesh node coordinates are correct
  std::vector< tk::real > x, y, z;
  for (std::size_t p=0; p<box24_coord.size()/3; ++p) {
    x.push_back( box24_coord[p*3] );
    y.push_back( box24_coord[p*3+1] );
    z.push_back( box24_coord[p*3+2] );
  }
  ensure( "nodes' x coordinates incorrect", x == inmesh.x() );
  ensure( "nodes' y coordinates incorrect", y == inmesh.y() );
  ensure( "nodes' z coordinates incorrect", z == inmesh.z() );

  // Test if the number of elements is correct
  ensure_equals( "number of elements incorrect",
                 er.nelem( tk::ExoElemType::TET ), box24_inpoel.size()/4 );

  // Test if the mesh element connectivity is correct
  ensure( "element connectivity incorrect",
          inmesh.tetinpoel() == box24_inpoel );
}

//! Read all of multi-block tet-mesh
//! \author J. Bakosi
template<> template<>
void ExodusIIMeshReader_object::test< 2 >() {
  set_test_name( "read all of multiblock tet-mesh" );

  // Create unstructured-mesh object to read into
  tk::UnsMesh inmesh;
  // Read in mesh from file
  std::string infile( REGRESSION_DIR
                      "/meshconv/exo_output/shear_5blocks_coarse.exo" );
  tk::ExodusIIMeshReader er( infile );
  er.readMesh( inmesh );

  using unittest::veceq;
  tk::real prec = 1.0e-10;

  // Test if the mesh node coordinates are correct
  veceq( "nodes' x coords incorrect", shear_5blocks_coordx, inmesh.x(), prec );
  veceq( "nodes' y coords incorrect", shear_5blocks_coordy, inmesh.y(), prec );
  veceq( "nodes' z coords incorrect", shear_5blocks_coordz, inmesh.z(), prec );

  // Test if the number of elements is correct
  ensure_equals( "number of elements incorrect",
                 er.nelem( tk::ExoElemType::TET ),
                 shear_5blocks_connect1.size()/4 +
                 shear_5blocks_connect2.size()/4 +
                 shear_5blocks_connect3.size()/4 +
                 shear_5blocks_connect4.size()/4 +
                 shear_5blocks_connect5.size()/4 );

  // Test if the mesh element connectivity is correct
  std::vector< std::size_t > inpoel;
  inpoel.insert( end(inpoel),
                 begin(shear_5blocks_connect1), end(shear_5blocks_connect1) );
  inpoel.insert( end(inpoel),
                 begin(shear_5blocks_connect2), end(shear_5blocks_connect2) );
  inpoel.insert( end(inpoel),
                 begin(shear_5blocks_connect3), end(shear_5blocks_connect3) );
  inpoel.insert( end(inpoel),
                 begin(shear_5blocks_connect4), end(shear_5blocks_connect4) );
  inpoel.insert( end(inpoel),
                 begin(shear_5blocks_connect5), end(shear_5blocks_connect5) );
  tk::shiftToZero( inpoel );
  ensure( "element connectivity incorrect", inmesh.tetinpoel() == inpoel );
}

//! Read part of single-block tet-mesh graph
//! \author J. Bakosi
template<> template<>
void ExodusIIMeshReader_object::test< 3 >() {
  set_test_name( "read part of single-block tet-mesh graph" );

  // Read part of mesh from file
  std::string infile( REGRESSION_DIR"/meshconv/gmsh_output/box_24.exo" );
  tk::ExodusIIMeshReader er( infile );
  er.readElemBlockIDs();

  // Test reading a range of elements for all possible ranges
  for (std::size_t from=0; from<23; ++from)
    for (std::size_t till=from+1; till<24; ++till) {
      std::vector< std::size_t > inpoel;
      er.readElements( {{from,till}}, tk::ExoElemType::TET, inpoel );
      // Test if the partial mesh element connectivity read from file is correct
      using diff_type = typename decltype(inpoel)::difference_type;
      auto f = static_cast< diff_type >( from );
      ensure( "element connectivity incorrect",
              std::equal( inpoel.cbegin(), inpoel.cend(),
                          std::next( box24_inpoel.cbegin(), f*4 ) ) );
    }
}

//! Read part of multi-block tet-mesh graph
//! \author J. Bakosi
template<> template<>
void ExodusIIMeshReader_object::test< 4 >() {
  set_test_name( "read part of multi-block tet-mesh graph" );

  // Read part of mesh from file
  std::string infile( REGRESSION_DIR
                      "/meshconv/exo_output/shear_5blocks_coarse.exo" );
  tk::ExodusIIMeshReader er( infile );
  er.readElemBlockIDs();

  std::vector< std::size_t > conn5b;
  conn5b.insert( end(conn5b),
                 begin(shear_5blocks_connect1), end(shear_5blocks_connect1) );
  conn5b.insert( end(conn5b),
                 begin(shear_5blocks_connect2), end(shear_5blocks_connect2) );
  conn5b.insert( end(conn5b),
                 begin(shear_5blocks_connect3), end(shear_5blocks_connect3) );
  conn5b.insert( end(conn5b),
                 begin(shear_5blocks_connect4), end(shear_5blocks_connect4) );
  conn5b.insert( end(conn5b),
                 begin(shear_5blocks_connect5), end(shear_5blocks_connect5) );
  tk::shiftToZero( conn5b );

  auto nel = er.nelem( tk::ExoElemType::TET );

  // Test reading a range of elements for a number of possible ranges
  for (std::size_t from=0; from<nel-1; from+=10)
    for (std::size_t till=from+1; till<nel; till+=10) {
      std::vector< std::size_t > inpoel;
      er.readElements( {{from,till}}, tk::ExoElemType::TET, inpoel );
      // Test if the partial mesh element connectivity read from file is correct
      using diff_type = typename decltype(inpoel)::difference_type;
      auto f = static_cast< diff_type >( from );
      ensure( "element connectivity incorrect",
              std::equal( inpoel.cbegin(), inpoel.cend(),
                          std::next( conn5b.cbegin(), f*4 ) ) );
    }
}

} // tut::

#endif // test_ExodusIIMeshReader_h
