// *****************************************************************************
/*!
  \file      src/LinSys/linsysmerger.ci
  \author    J. Bakosi
  \copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.
  \brief     Charm++ module interface file for merging a linear system
  \details   Charm++ module interface file for merging a linear system. See more
     in src/LinSys/LinSysMerger.h.
*/
// *****************************************************************************

module linsysmerger {

  include "unordered_map";

  extern module transporter;

  namespace tk {

    // List all possible specializations of templated chare to instantiate
    // registration and delivery of code for the individual specializations

    // Will specialize linear system merger for Transporter & Carrier
    chare LinSysMerger< inciter::CProxy_Transporter,
                        inciter::CProxy_Carrier,
                        inciter::AuxSolverLumpMassDiff >;

    // LinSysMerger is templated so that the same code (parameterized by the
    // type given by the template arguments, HostProxy and WorkerProxy) can be
    // generated for different types of proxies. Howver, all possible
    // specializations must be listed above to ensure that Charm++ generates
    // correct code.
    template< class HostProxy, class WorkerProxy, class AuxSolver >
    group LinSysMerger {
      entry LinSysMerger( const HostProxy& host,
                          const WorkerProxy& worker,
                          const std::map< int,
                            std::vector< std::size_t > >& side,
                          std::size_t ncomp,
                          bool feedback );
      initnode void registerBCMerger();
      entry void bounds( int pe, std::size_t lower, std::size_t upper );
      entry void enable_wait4rhs();
      entry void addrow( int fromch,
                         int frompe,
                         const std::set< std::size_t >& row );
      entry void recrow();
      entry [reductiontarget] void addbc( CkReductionMsg* msg );
      entry void addsol( int fromch,
                         const std::map< std::size_t,
                                         std::vector< tk::real > >& solution );
      entry void addlhs( int fromch,
        const std::map< std::size_t,
                        std::map< std::size_t,
                                  std::vector< tk::real > > >& lhs );
      entry void addrhs( int fromch,
                         const std::map< std::size_t,
                                         std::vector< tk::real > >& rhs );
      entry void addauxrhs( int fromch,
                            const std::map< std::size_t,
                                            std::vector< tk::real > >& auxrhs );
      entry void addauxlhs( int fromch,
                            const std::map< std::size_t,
                                            std::vector< tk::real > >& auxlhs );
      entry void adddiag( int fromch,
                          const std::map< std::size_t,
                           std::vector< std::vector< tk::real > > >& solution );
      entry void rowsreceived();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      // High-level overview of the dependency and asynchronous call structure
      // ---------------------------------------------------------------------
      //
      // Directed Acyclic Graph (DAG):
      // -----------------------------
      //
      // See src/LinSys/LinSysMerger.h.
      //
      // Interpretation of the DAG in src/LinSys/LinSysMerger.h
      // ------------------------------------------------------
      // Control flow is from left to right and top to bottom.
      //
      // We start out with all worker chares contributing their porition of the
      // global row IDs that each work on. This is labelled ChRow. The worker
      // chares also contribute, in parallel, their portion of the global node
      // ID lists at which they can set boundary conditions, labelled, ChBCs.
      // Once both row IDs and BC node lists are received on LinSysMerger, we do
      // a global reduction to Transport::rowcomplete() which spawns two
      // broadcasts: (1) LinSysMerger::rowsreceived(), and (2) worker::init().
      //
      // LinSysMerger::rowsreceived() path: The member function
      // tk::LinSysMerger::rowsreceived(), labeled Ver in the task-graph,
      // triggers and performs the following tasks: (1) Verification that
      // ensures consistent global row IDs. This step only happens in DEBUG
      // mode: VerRow is simply an Assert in member function rowsreceived). (2)
      // The second step in tk::LinSysMerger::rowsreceived() initiates is
      // building Hypre data from the global row indices received, labeled
      // HypreRow.
      //
      // Worker::init() path: Once the row IDs are contributed,
      // tk::Transporter::rowcomplete(), not only spaws
      // tk::LinSysMerger::rowsreceived() but also issues a broadcast to the
      // worker chares to start initializing their system. This is started with
      // a call to the init() member function of the worker. The tasks done in
      // init() include setting initial and boundary conditions, sending
      // unknown/solution vectors for assembly to LinSysMerger, start computing
      // the minimum time step size, outputing initial field data to file, start
      // computing the left hand sides for both the primary and auxiliary linear
      // systems, and sending all this for linear system assembly. The
      // contribution goes to those Linear System Merger group branch (one per
      // CPU) the workers happen to reside on. These steps are denoted by ChSol,
      // ChLhs, and ChAuxLhs in the graph above, and the contributions/assembly
      // is performed by the member functions charesol(), charelhs(), and
      // chareauxlhs(), respectively.
      //
      // Among other tasks, worker::init(), discussed above, also start
      // computing the minimum time step sizes based on all PDEs integrated.
      // Once a worker has finished with that task, it sends it contribution of
      // the smallest dt for computing a global minimum in Transporter::dt(),
      // which then spawns a broadcast to the workers to start advancing their
      // PDEs, which consists of computing the right hand sides for both the
      // primary system and the auxiliary system, ChRhs, ChAuxRhs. These
      // right hand sides can only be comnputed if the dt is available.
      //
      // Once the collection of the right hand side vector, ChRhs, is done, we
      // set boundary conditions on the RHS vector, RhsBC. Once the collection
      // of the left hand side matrix, ChLhs, is done, we set boundary
      // conditions on the LHS matrix, LhsBC.
      //
      // Primary solution only: Once each of the tasks, ChSol, LhsBC, and RhsBC,
      // (not all at the same time but separately) are done, we continue by
      // converting these data structures to a format that Hypre expects, done
      // in hypresol(), hyprelhs(), and hyprerhs(), denoted by similars labels
      // in the graph. These functions basically flatten the C++ data
      // structures to C-style arrays and linked arrays (for the matrix). Note
      // that the left and right hand sides can only begin to be converted to
      // Hypre data format if the boundary conditions have also been applied on
      // each.
      //
      // Primary solution only: Once the tasks, HypreSol, HypreLhs, HypreRhs,
      // (not all at the same time but separately) are done and the Hypre data
      // structure for the row IDs are complete, we continue by assigning the
      // flattened data structures (more precisely, their pointers) to the Hypre
      // vectors and Hypre matrix. These are denoted FillSol, FillLhs, and
      // FillRhs in the DAG and correspond to the member functions sol(), lhs(),
      // and rhs().
      //
      // Primary solution only: Once the tasks, FillSol, FillLhs, FIllRhs, (not
      // all at the same time, but separately) are, we continue by calling the
      // Hypre "assembly" routines for the solution vector, the left hand side
      // matrix, and the right hand side vector. These are denoted by AsmSol,
      // AsmLhs, and AsmRhs in the DAG, and performed by the member functions
      // assemblesol(), assemblelhs(), and assemblerhs(), respectively.
      //
      // Primary solution only: Once the assembly of the solution (unknown)
      // vector, the left hand side matrix, and the right hand side vector are
      // all done (on a CPU), labels AsmSol, AsmLhs, AsmRhs, respectively, we
      // call the solve() member function which solves the primary linear system
      // by calling Hypre and also updates the primary solution, i.e.,
      // propagates the new solution back to the worker chares, labeled Upd.
      //
      // Auxiliary solution only: The auxiliary solution is performed once the
      // boundary conditions have been set on the primary right hand side vector
      // (RhsBC), the auxiliary rhs vector, combined with primary the rhs
      // (AuxRhs) has been ready, and the auxiliary left hand side (AuxLhs) are
      // all complete. The solution of the auxiliary system is a simple
      // back-substitution, since the system is assumed diagonal. Note also,
      // that due to the way FluxCorrector::aec() computes the antidiffusive
      // element contributions and the way it applies the limiter in
      // FluxCorrector::lim(), there is no need to set Dirichlet boundary
      // conditions on the auxiliary system. See more details in
      // FluxCorrector::aec().
      //
      // A word on multiple invokation of SDAG triggers: As the commit message
      // of b79ea29 explains, the "triggers", such as hyprerow_complete(),
      // enumerated below, at threir call site should be thought of as messages
      // being put in some message queue and consumed at when clauses wherever
      // they appear. If they appear in multiple when clauses, they consume
      // multple messages, thus they have to be triggered multiple times. See
      // also
      // https://lists.cs.illinois.edu/lists/arc/charm/2016-09/msg00002.html.
      //
      // As discussed in src/LinSys/LinSysMerger.h, the SDAG logic discussed
      // here is the same regardless whether an auxiliary linear solution is
      // performed.

      entry void wait4row() {
        when row_complete(), bc_complete() serial "row" {
          signal2host_row_complete( m_host ); } };

      entry void wait4lhsbc() {
        when lhs_complete() serial "lhsbc" { lhsbc(); } };
      entry void wait4rhsbc() {
        when rhs_complete() serial "rhsbc" { rhsbc(); } };

      entry void wait4sol() {
        when sol_complete() serial "hypresol" { hypresol(); } };
      entry void wait4lhs() {
        when lhsbc_complete() serial "hyprelhs" { hyprelhs(); } };
      entry void wait4rhs() {
        when rhsbc_complete() serial "hyprerhs" { hyprerhs(); } };

      entry void wait4hypresol() {
        when hypresol_complete(), hyprerow_complete() serial "sol" { sol(); } };
      entry void wait4hyprelhs() {
        when hyprelhs_complete(), hyprerow_complete() serial "lhs" { lhs(); } };
      entry void wait4hyprerhs() {
        when hyprerhs_complete(), hyprerow_complete() serial "rhs" { rhs(); } };

      entry void wait4fillsol() {
        when fillsol_complete() serial "asmsol" { assemblesol(); } };
      entry void wait4filllhs() {
        when filllhs_complete() serial "asmlhs" { assemblelhs(); } };
      entry void wait4fillrhs() {
        when fillrhs_complete() serial "asmrhs" { assemblerhs(); } };

      entry void wait4asm() {
        when asmsol_complete(), asmlhs_complete(), asmrhs_complete()
          serial "solve" { solve(); } };
      entry void wait4aux() {
        when rhsbc_complete(), auxlhs_complete(), auxrhs_complete()
          serial "aux" { auxsolve(); } };

      entry void wait4solve() {
        when solve_complete() serial "update" { updateSol(); } };
      entry void wait4auxsolve() {
        when auxsolve_complete() serial "updateaux" { updateAuxSol(); } };

      entry void row_complete();
      entry void bc_complete();
      entry void lhsbc_complete();
      entry void rhsbc_complete();
      entry void hyprerow_complete();
      entry void lhs_complete();
      entry void rhs_complete();
      entry void sol_complete();
      entry void auxrhs_complete();
      entry void auxlhs_complete();
      entry void hyprelhs_complete();
      entry void hyprerhs_complete();
      entry void hypresol_complete();
      entry void filllhs_complete();
      entry void fillrhs_complete();
      entry void fillsol_complete();
      entry void asmlhs_complete();
      entry void asmrhs_complete();
      entry void asmsol_complete();
      entry void solve_complete();
      entry void auxsolve_complete();
    };

  } // tk::

}
