// *****************************************************************************
/*!
  \file      src/Transfer/transferdetails.ci
  \copyright 2020 Charmworks, Inc.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for transferdetails holding part of a
             mesh
  \details   Charm++ module interface file for transferdetails holding part of a
             mesh.
*/
// *****************************************************************************

module transferdetails {

  extern module meshwriter;
  extern module transferdetails;

  //include "UnsMesh.hpp";
  include "Callback.hpp";
  //include "CommMap.hpp";
  include "collidecharm.h";

  namespace exam2m {

    class PotentialCollision;
    class SolutionData;
    class MeshData;

    array [1D] TransferDetails {
      entry TransferDetails( CkArrayID p, MeshData d, CkCallback cb );
      entry void processCollisions( CProxy_TransferDetails proxy,
                                    int nchares,
                                    int offset,
                                    int nColls,
                                    Collision colls[nColls] );
      entry void determineActualCollisions( CProxy_TransferDetails proxy,
                                            int index,
                                            int nColls,
                                            PotentialCollision colls[nColls] );
      entry void transferSolution( const std::vector< SolutionData >& soln );
    }

  } // exam2m::

}
