// *****************************************************************************
/*!
  \file      src/RNGTest/testu01.ci
  \author    J. Bakosi
  \copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.
  \brief     Charm++ module interface file for TestU01 statistical tests
  \details   Charm++ module interface file for TestU01 statistical tests.
*/
// *****************************************************************************

module testu01 {

  // Note that template chare TestU01 depends on chare TestU01Suite and in turn
  // TestU01Suite depends on TestU01 (see also the interface file
  // testu01suite.ci). This is a mutual dependency and it is made to work with
  // one of the chares (TestU01) being a template chare. Note: if this extern
  // module dependency is removed the code does not compile.
  extern module testu01suite;

  namespace rngtest {

    // List all possible specializations of templated chare to instantiate
    // registration and delivery of code for the individual specializations.
    chare TestU01<
            TestU01Props< tag::BirthdaySpacings, CProxy_TestU01Suite,
                          sres_Poisson, sres_CreatePoisson, sres_DeletePoisson,
                          long, long, int, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::Collision, CProxy_TestU01Suite,
                          sknuth_Res2, sknuth_CreateRes2, sknuth_DeleteRes2,
                          long, long, int, long, int > >;
    chare TestU01<
            TestU01Props< tag::RandomWalk1, CProxy_TestU01Suite,
                          swalk_Res, swalk_CreateRes, swalk_DeleteRes,
                          long, long, int, int, long, long > >;
    chare TestU01<
            TestU01Props< tag::Gap, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, double, double > >;
    chare TestU01<
            TestU01Props< tag::SimplePoker, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, int, int > >;
    chare TestU01<
            TestU01Props< tag::CouponCollector, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::MaxOft, CProxy_TestU01Suite,
                          sknuth_Res1, sknuth_CreateRes1, sknuth_DeleteRes1,
                          long, long, int, int, int, int, int > >;
    chare TestU01<
            TestU01Props< tag::WeightDistrib, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, long, double, double > >;
    chare TestU01<
            TestU01Props< tag::MatrixRank, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, int, int, int > >;
    chare TestU01<
            TestU01Props< tag::HammingIndep, CProxy_TestU01Suite,
                          sstring_Res, sstring_CreateRes, sstring_DeleteRes,
                          long, long, int, int, int, int > >;
    chare TestU01<
            TestU01Props< tag::SerialOver, CProxy_TestU01Suite,
                          sres_Basic, sres_CreateBasic, sres_DeleteBasic,
                          long, long, int, long, int > >;
    chare TestU01<
            TestU01Props< tag::CollisionOver, CProxy_TestU01Suite,
                          smarsa_Res, smarsa_CreateRes, smarsa_DeleteRes,
                          long, long, int, long, int > >;
    chare TestU01<
            TestU01Props< tag::ClosePairs, CProxy_TestU01Suite,
                          snpair_Res, snpair_CreateRes, snpair_DeleteRes,
                          long, long, int, int, int, int, int > >;
    chare TestU01<
            TestU01Props< tag::ClosePairsBitMatch, CProxy_TestU01Suite,
                          snpair_Res, snpair_CreateRes, snpair_DeleteRes,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::Run, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::Permutation, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::CollisionPermut, CProxy_TestU01Suite,
                          sknuth_Res2, sknuth_CreateRes2, sknuth_DeleteRes2,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::SampleProd, CProxy_TestU01Suite,
                          sres_Basic, sres_CreateBasic, sres_DeleteBasic,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::SampleMean, CProxy_TestU01Suite,
                          sres_Basic, sres_CreateBasic, sres_DeleteBasic,
                          long, long, int > >;
    chare TestU01<
            TestU01Props< tag::SampleCorr, CProxy_TestU01Suite,
                          sres_Basic, sres_CreateBasic, sres_DeleteBasic,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::AppearanceSpacings, CProxy_TestU01Suite,
                          sres_Basic, sres_CreateBasic, sres_DeleteBasic,
                          long, long, long, int, int, int > >;
    chare TestU01<
            TestU01Props< tag::SumCollector, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, double > >;
    chare TestU01<
            TestU01Props< tag::Savir2, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, long, int > >;
    chare TestU01<
            TestU01Props< tag::GCD, CProxy_TestU01Suite,
                          smarsa_Res2, smarsa_CreateRes2, smarsa_DeleteRes2,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::LinearComp, CProxy_TestU01Suite,
                          scomp_Res, scomp_CreateRes, scomp_DeleteRes,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::LempelZiv, CProxy_TestU01Suite,
                          sres_Basic, sres_CreateBasic, sres_DeleteBasic,
                          long, int, int, int > >;
    chare TestU01<
            TestU01Props< tag::Fourier3, CProxy_TestU01Suite,
                          sspectral_Res, sspectral_CreateRes, sspectral_DeleteRes,
                          long, int, int, int > >;
    chare TestU01<
            TestU01Props< tag::LongestHeadRun, CProxy_TestU01Suite,
                          sstring_Res2, sstring_CreateRes2, sstring_DeleteRes2,
                          long, long, int, int, long > >;
    chare TestU01<
            TestU01Props< tag::PeriodsInStrings, CProxy_TestU01Suite,
                          sres_Chi2, sres_CreateChi2, sres_DeleteChi2,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::HammingWeight2, CProxy_TestU01Suite,
                          sres_Basic, sres_CreateBasic, sres_DeleteBasic,
                          long, long, int, int, long > >;
    chare TestU01<
            TestU01Props< tag::HammingCorr, CProxy_TestU01Suite,
                          sstring_Res, sstring_CreateRes, sstring_DeleteRes,
                          long, long, int, int, int > >;
    chare TestU01<
            TestU01Props< tag::StringRun, CProxy_TestU01Suite,
                          sstring_Res3, sstring_CreateRes3, sstring_DeleteRes3,
                          long, long, int, int > >;
    chare TestU01<
            TestU01Props< tag::AutoCorr, CProxy_TestU01Suite,
                          sres_Basic, sres_CreateBasic, sres_DeleteBasic,
                          long, long, int, int, int > >;

    template< class TestU01Props >
    chare TestU01 {
      entry TestU01( const TestU01Props& props );
      entry void npval();
      entry void names();
      entry void run();
      entry void time();
    }

  } // rngtest::

}
