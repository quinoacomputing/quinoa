// *****************************************************************************
/*!
  \file      src/IO/meshwriter.ci
  \copyright 2012-2015 J. Bakosi,
             2016-2018 Los Alamos National Security, LLC.,
             2019-2021 Triad National Security, LLC.
             All rights reserved. See the LICENSE file for details.
  \brief     Charm++ module interface file for outputing mesh data to file
  \details   Charm++ interface file for a group used to output data associated
     to unstructured meshes to file(s). Charm++ chares (work units) send mesh
     and field data associated to mesh entities to the MeshWriter class defined
     here to write the data to file(s).
*/
// *****************************************************************************

module meshwriter {

  include "Options/FieldFile.hpp";
  include "Centering.hpp";
  include "UnsMesh.hpp";

  namespace tk {

    group [migratable] MeshWriter {

      entry MeshWriter( ctr::FieldFileType filetype,
                        Centering bnd_centering,
                        bool benchmark,
                        std::size_t nmesh );

      entry void nchare( std::size_t meshid, int n );

      entry void write(
        std::size_t meshid,
        bool meshoutput,
        bool fieldoutput,
        uint64_t itr,
        uint64_t itf,
        tk::real time,
        int chareid,
        const std::string& basefilename,
        const std::vector< std::size_t >& inpoel,
        const UnsMesh::Coords& coord,
        const std::map< int, std::vector< std::size_t > >& bface,
        const std::map< int, std::vector< std::size_t > >& bnode,
        const std::vector< std::size_t >& triinpoel,
        const std::vector< std::string >& elemfieldnames,
        const std::vector< std::string >& nodefieldnames,
        const std::vector< std::string >& elemsurfnames,
        const std::vector< std::string >& nodesurfnames,
        const std::vector< std::vector< tk::real > >& elemfields,
        const std::vector< std::vector< tk::real > >& nodefields,
        const std::vector< std::vector< tk::real > >& elemsurfs,
        const std::vector< std::vector< tk::real > >& nodesurfs,
        const std::set< int >& outsets,
        CkCallback c );
    };

  } // tk::

}
