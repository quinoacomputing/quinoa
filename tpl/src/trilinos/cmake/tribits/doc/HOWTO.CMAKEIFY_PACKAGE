--------------------------------------------
How to CMakeify an Existing Trilinos Package
--------------------------------------------

Last updated: 2012/05/04

Here, we describe how to add full CMake/CTest support to an existing TriBITS
package.  The process of providing CMake/CTest support for a Trilinos package
will be referred to as "CMakeifying" a package.  For this howto, we will draw
on examples from existing CMakeified packages like Thyra (thyra), Epetra
(epetra), and EpetraExt (epetraext).

Let PACKAGE_NAME and PACKAGE_DIR represent the package name and the
directory name for the Trilinos package that you are CMakeifying.  For
example, for AztecOO, this would be:

  PACKAGE_NAME = AztecOO
  PACKAGE_DIR = aztecoo

Note that in general for any directory where you have a Makefile.am
file you will need to create the equivalent CMakeLists.txt file.
Note, however, there is no such thing as a configure.ac file with
CMake so once you create the CMakeLists.txt files and tie them
together with ADD_SUBDIRECTORY(...) calls, you are finished!

Here are the steps for CMakeifying a TriBITS project package:


1) Add the package in <PROJECT_DIR>/PackagesList.cmake

Add the package name PACKAGE_NAME and the package directory name PACKAGE_DIR
to the list of supported Trilinos packages in the file
<PROJECT_DIR>/PackagesList.cmake in the variable
Trilinos_PACKAGES_AND_DIRS_AND_CLASSIFICATIONS.

NOTE: You have to list the packages in strictly increasing order of
dependencies.  Don't worry, if you get the order wrong, you will find this out
at configure time automatically with a nice error message.


2) Create the package's base-level packages/PACKAGE_DIR/CMakeLists.txt
file

Copy the top-level CMakeLists.txt from:

  <PROJECT_DIR>/packages/<PACKAGE_DIR>/CMakeLists.txt

to:

  <PROJECT_DIR>/packages/<PACKAGE_DIR>/CMakeLists.txt

In the new <PACKAGE_DIR>/CMakeLists.txt file, change the name of the package
in the TRIBITS_PACKAGE(...) macro to the name of the TriBITS package
PACKAGE_NAME.  You can also turn on shadowing warnings with
'ENABLE_SHADOWING_WARNINGS' and mark the package as being 'CLEANED' (which
elevates warnings to errors).  See packages/teuchos/CMakeLists.txt for an
example.

NOTE: If the name you pass into TRIBITS_PACKAGE(...) is not the same as you specified
in the Trilinos_PACKAGES_AND_DIRS_AND_CLASSIFICATIONS variable mentioned
above, then you will get an error message telling you this.

Modify this CMakeLists.txt file to pull in ADD_SUBDIRECTORY(...) calls to
include other CMakeLists.txt files for the libraries and the tests/examples
for the package.  At the beginning, just comment out these calls and then
comment them back in as you add the needed CMakeLists.txt files.

NOTE: You must include the ADD_SUBDIRETORY(...) calls in the order of
the build dependencies.  For example, you have to add the subdirectory
for the library(s) in 'src' before the subdirectories in 'test' or
'example'.

Special cases:

2.a) Overridding an optional intra-package enables

See turning off Zoltan support in ML when MPI is not enabled by looking at
packages/ml/CMakeLists.txt

2.b) Creating multi-options

There are cases where in order to enable something in a package one or more
other enables must also be set.  For example to turn on NOX/Epetra support as
it is called, you must have Epetra, AztecOO, and Ifpack.  See the example of
how to do this in packages/nox/CMakeLists.txt.


3) Create the directory <PACKAGE_DIR>/cmake

If this is a new package, then it can be created with:

  $ cd <PROJECT_DIR>/packages/PACKAGE_DIR
  $ mkdir cmake
  $ cvs add cmake


4) Create or modify the <PACKAGE_DIR>/cmake/Dependencies.cmake file

The dependencies file:

  <PROJECT_DIR>/packages/<PACKAGE_DIR>/cmake/Dependencies.cmake

Copy a Dependencies.cmake file from some other package to get started.

You have to modify <PACKAGE_DIR>/cmake/Dependencies.cmake for this package's
various dependencies.

NOTE: Don't worry if you don't find all of the package dependencies
right away.  If you leave any out, the compile/link cycle will tell
you which ones you need to add.  It is better to initially understate
the package dependencies than to overstate them because you can catch
the former mistake but not the later.  The danger in overstating
package dependencies is that it will take longer to test code before
you check in because you will have to build more libraries and test
executables than you really need to.

NOTE: If a package is included in a 'REQUIRED' list, then it does not need to
be included in another 'OPTIONAL' list.

NOTE: Once you list out these package dependencies, you will typically not
need to directly refer to these packages again.  All of the dependency
handling is performed automatically by the provided macros.  You can only
overstate the dependencies, you can never understate them.  An exception is
with optional package dependencies in deciding what tests/examples to build
and what tests to define.

NOTE: The top-level CMake support code will automatically create user cache
variables for packages and TPLs that exist in the lists
[LIB,TEST]_OPTIONAL_DEP_PACKAGES and [LIB,TEST]_OPTIONAL_DEP_TPLS.  For
[LIB,TEST]_OPTIONAL_DEP_PACKAGES, user cache variables with the name
<TRIBITS_PACKAGE>_ENABLE_<DEPPACKAGE> will be created where TRIBITS_PACKAGE is the name of
this package (i.e. ML, NOX, EpetraExt, etc.) and DEPPACKAGE is the name of the
listed dependent package.  Also, regular variables will be created with the
name HAVE_<UCPACKAGE>_<UCDEPPACKAGES> where UCPACKAGE and UCDEPPACKAGES are
the respective upper-case names of TRIBITS_PACKAGE and DEPPACKAGE.  The same applies
to the optional TPLs listed in [LIB,TEST]_OPTIONAL_DEP_TPLS.


5) Copy and modify the PACKAGE_config.h.in file

Create the skeleton for the file

  <PROJECT_DIR>/packages/<PACKAGE_DIR>/cmake/<TRIBITS_PACKAGE>_config.h.in

by copying an existing autotools generated file or create it from scratch.
You will then to need to manually modify the file
<PACKAGE_DIR>/cmake/<TRIBITS_PACKAGE>_config.h.in to replace '#undef' with
'#cmakedefine'.  Also use this opportunity to strip out the mess of extra
macro defines that the package does not need.  Compare the files:

  Trilinos/packages/epetraext/cmake/EpetraExt_config.h.in

with :

  Trilinos/packages/epetraext/src/EpetraExt_config.h.in

to see the significant reduction in the amount of junk you can clean
out.

Typically, you should clean out obsolete macros related if standard C++ header
files exist or not.  Typically, you need to keep the macros that define
conditional code.  Always clean out all of the autotool generated junk like
PACKAGE_NAME.


6) Create the package's library <PACKAGE_DIR>/src/CMakeLists.txt file

Most TriBITS packages just create a single library.  This is the case that is
described here.  More general cases are mentioned after that.

Start by copying over an existing library CMakelists file from another
package.  For example, copy the file:

  Trilinos/packages/teuchos/src/CMakeLists.txt

(or any other Trilinos package) to:

  <PROJECT_DIR>/packages/<PACKAGE_DIR>/src/CMakeLists.txt

Now, modify the file <PACKAGE_DIR>/src/CMakeLists.txt as follows:

6.a) Specify the list of HEADERS and SOURCES:

NOTE: You can easily glob the header and source files in a CMakeLists.txt
file.

NOTE: If you have headers that are not part of your "public" interface and you
do not want to install, then see zoltan/src/CMakeLists.txt for an example of
how to do that (see NOINSTALLHEADERS).

6.b) Specify the name of the library(s) being created

Set the name of the library being created in the macro call
TRIBITS_ADD_LIBRARY(...).

NOTE: The nane of this library typically will not need to be listed again in
any other CMakeLists.txt file as it will become part of the package's offical
list of libraries.  On exception is when you need to link multiple libraries
together within a package (see below) and when you have a TESTONLY library
(see below).

6.c) Multiple libraries

If the package has more than one library in the same CMakeList.txt
file, see epetra/src/CMakeLists.txt for an example.  If the pacakge
has more than one library spread out across several CMakeLists.txt
file, see thyra/src/CMakeLists.txt,
thyra/adapters/epetra/src/CMakeLists.txt, and
thyra/adapters/epetraext/src/CMakeLists.txt for an example.

6.d) Test-only libraries (TESTONLY)

If your package has test-only libraries, then look at how this is
handled in nox/test/utils/CMakeLists.txt with the library
'noxtestutils'.  These test-only libraries are designated by passing
TESTONLY into TRIBITS_ADD_LIBRARY(...).  These libraries are not added
to the list of offical package libraries.  Instead, you need
specifically list the name of the library in your tests/examples
TRIBITS_ADD_EXECUTABLE(...) function call such as in
nox/test/epetra/NOX_Operators/CMakeLists.txt


7) Add the CMakeLists.txt files for the tests and examples

Adding the CMakeLists.txt files for all of the tests and examples is
perhaps the most time consuming part of CMakeifying a Trilinos
package.  Note that with the CMake system, you can (and should) list
the executables and the tests in the same CMakeLists.txt file.  This
helps keep things together and easier to maintain.

Comparing the autotools Makefile.am files in epetraext/test with the
CMakeLists.txt files in those same directories provides a good example
of how to write the CMakeLists.txt files for tests and examples.

In general, most test/example executables and the accompanying test harness
test can be added in one shot with the macro
TRIBITS_ADD_EXECUTABLE_AND_TEST(...).  For cases where you need finer control,
you can use the separate macros TRIBITS_ADD_EXECUTABLE(...) and
TRIBITS_ADD_TEST(...).

To see lots of examples of how to use the macros TRIBITS_ADD_EXECUTABLE(...) 
TRIBITS_ADD_TEST(...), and TRIBITS_ADD_EXECUTABLE_AND_TEST(...) look at
examples in the packages teuchos, epetra, epetraext, thyra, and other
packages.  Don't be lazy, look at working examples in other packages!  Look
for usage examples, for instance, with:

  $ find . -name CMakeLists.txt -exec grep -nH 'TRIBITS_ADD_EXECUTABLE' {} \;

Above, replace TRIBITS_ADD_EXECUTABLE with
TRIBITS_ADD_EXECUTABLE_AND_TEST and TRIBITS_ADD_TEST for all of the
examples of usage.

A few points are worth mentioning:

7.a) You must add tests for every test case that is listed in
PACKAGE_DIR/test/defintion

The package thyra has some of the more varied examples of how to
specify CTest tests for a variety of use cases.  It is worth your time
to look through some of these examples.

7.b) You must define test/example executables after the libraries they
depend

You need to remember to use the ADD_SUBDIRECTORY(...) and related commands to
add tests and examples after the libraries within a pacakge.

7.c) More advanced tests can be added with TRIBITS_ADD_ADVANCED_TEST(...)

If you need to add a test that needs to run an executable more than once and
perform different checks on output files then you can use the CMake function
TRIBITS_ADD_ADVANCED_TEST(...) to add the test.  This function is documented
in the file TribitsAddAdvancedTest.cmake and examples can be found in:

  packages/teuchos/test/CTestScriptsUnitTests/CMakeLists.txt
  packages/ml/test/ValidateParams/CMakeLists.txt
  packages/moocho/thyra/example/NLPThyraEpetraModelEval4DOpt/CMakeLists.txt


8) Configure, build, and test

Once you have completed up through step 4 and have the files
PACKAGE_DIR/CMakeLists.txt (at least a skeleton) and
PACKAGE_DIR/cmake/Dependinces.cmake in place, you can start
configuring with cmake to test that things are working correctly.  It
is helpful to define -DTrilinos_VERBOSE_CONFIGURE:BOOL=ON when you
configure so that you can see what libraries, executables, and tests
are being added.  You should always try to test your changes in small
increments so that it is easy to debug problems.  If you do need to
debug, puting in print statements using the MESSAGE(...) command and
the helper function PRINT_VAR(...) is very useful.

8.a) Run the CTest tests

As you add test/example executables and CTest tests, you can run them
for your package as:

  $ ctest -W 100 -R '^PACKAGE_NAME_'

(where PACKAGE_NAME = Epetra, EpetraExt, etc.)

8.b) Verify that the CTest tests are the same as the perl-based tests

One of the final steps in completing the CMakeification of a Trilinos
package is to check to make sure that all of the same tests/examples
that are built and run with the Autotools system are also being built
and run as part of the CMake system.  To do this, you need to
configure the package you are CMakeifying along with the rest of
Trilinos the same way with the Autotools system as with the CMake
system (you will just have to figure out how to do that).

Once you have your package and dependent packages configured with
Autotools and CMake in the same way, you must run the autotools-built
tests using the perl runtests tool as:

  $ cd AUTOTOOLS_BUILD_DIR/packages/PACKAGE_DIR
  $ make runtests-serial

The detailed output from the above 'make runtests-serial' command (or
'make runtests-mpi' command with the rest of the arguments needed for
running MPI) is in the file:

  AUTOTOOLS_BUILD_DIR/packages/PACKAGE_DIR/test/runtests-results/

(note, you will have to go to the most recent date directory)

As the final verification step, you need to run the new CMake tests as:

  $ cd CMAKE_BUILD_DIR
  $ ctest -R '^PACKAGE_NAME_' -W 100

and verify that the output in:

  CMAKE_BUILD_DIR/Testing/Temporary/LastTest.log

is equivalent to the output run through the autotools-build system and
run with the perl-based test harness in:

  AUTOTOOLS_BUILD_DIR/packages/PACKAGE_DIR/test/runtests-results/

I don't think we can easily automate these types of comparisons and I think
that the package developers themselves must be the ones to ultimately verify
that the CMakeification of their package is complete by carefully looking at
the various test outputs described above.
