Adding subpackages to a package.

In the cmake/Dependencies.cmake file for the package you will need to add in the
list of subpackages you want to have for your package. This uses a format very
similar to the one for adding a package to Trilinos. You do this by setting the
variable SUBPACKAGES_DIRS_CLASSIFICATIONS_OPTREQS. This example taken from
Thyra is the best way to describe it.

SET(SUBPACKAGES_DIRS_CLASSIFICATIONS_OPTREQS
# subpackage name    directory of the    class  determines whether the
#                    subpackage                 subpackage will be turned on
#                                               when the package is enabled
  Core               core                PS     REQUIRED
  EpetraAdapters     adapters/epetra     PS     OPTIONAL
  EpetraExtAdapters  adapters/epetraext  PS     OPTIONAL
  TpetraAdapters     adapters/tpetra     PS     OPTIONAL
  )

The first column is the name of the subpackage. This name will have the
package's name prepended to it and that will be how others refer to it. Ie, the
subpackage Core in the package Thyra will be changed to ThyraCore. That will
be the name used by any package or subpackage that depends on it, or when
enabling it at configure time.

The second column is the top level directory of the subpackage, just like
packages have. This is where you will put all the code and cmake files for the
subpackage. This path should be relative the the package's path.

The third column is the classification of the subpackage. Just like packages,
subpackages can be declared to be primary stable(PS), secondary stable(SS) or
experimental(EX).

The fourth column is whether or not the subpackage is a required part of the
package. There are two settings, required and optional. The difference between
the two is whether the subpackage will be enabled if the package is enabled.
Required subpackages will automatically be enabled when the package is enabled,
explicitly disabling a required subpackage will disable the package as well.
Optional subpackages will only be enabled when the package is enabled and
TRILINOS_ENABLE_ALL_OPTIONAL_PACKAGES is enabled or when the subpackge itself is
explicitly enabled. Explicitly disabling an optional subpackage will not disable
the package.

Once the subpackages are setup the tpls and packages which are currently listed
as dependencies for the entire package may need to change. If some or all of the
dependencies are specific to a single subpackage they should be removed from the
package's cmake/Dependencies.cmake file. Later, those dependencies will be added
to the subpackage's cmake/Dependencies.cmake file.

Now there are a few changes that need to be made to the CMakeLists.txt file for
the package to support subpackages.

The call to PACKAGE(...) will need to be changed to PACKAGE_DECL(...).

Optionally you may want to define all the options that your package supports at
this point, including those that are just for subpackages. This isn't necessary
if you would rather have the options separated into their subpackages, but it is
okay to collect them all in one place. Doing so can make it easier to manage all
of the options for a package.

Add a call to "PACKAGE_PROCESS_SUBPACKAGES()" this will do the necessary set up
for all the subpackages that have been declared, including processing their
dependencies.

Finally  add a call to "PACKAGE_DEF()" which will define the package like the
call to "PACKAGE(...)" did. 

Remove any add_subdirectory calls for the directories that are now
subpackages.

The package is now setup properly to support its subpackages. There is still
some work that needs to be done in each of the subpackages though.

Each subpackage will need to have a dependency file just like a package. In each
of the subpackage directories in the package's cmake/Dependencies.cmake file
there needs to be a cmake directory and a Dependencies.cmake file in it. This
file takes the same form as the Dependencies.cmake file for packages so copying
one from another package is a good starting point. Just like packages you will
want to specify your dependencies on other packages and tpls. it is possible to
be more aggresive here with dependencies as well. If a subpackage needs another
package/tpl to function properly, but this subpackage represents optional
features in your package you can still give the subpackage a required dependency
on the packages/tpls. This will make it impossible to inadvertantly enable the
subpackage without the required dependencies, but still allow the package to
build on machines that don't have all the dependencies since a subpackage like
this should be optional.

Next the subpackage's root CMakeLists.txt file will need a few changes. The
addition of a call to "SUBPACKAGE(<subpackage name>)" is required before you can
add any subdirectories or libraries/executables. This call will do all the
necessary setup for the subpackage such as create all of the
"<subpackage name>_ENABLE_<optional dependency> variables, just like packages
have.

Finally a call to SUBPACKAGE_POSTPROCESS() is needed at the end of the
CMakeLists.txt. This step is easy to miss as the subpackages will likely still
configure without this. However, without this certain parts of the package
architecture will not work, such as the export system.

Everything else in the CMakeLists.txt file can stay the same.
