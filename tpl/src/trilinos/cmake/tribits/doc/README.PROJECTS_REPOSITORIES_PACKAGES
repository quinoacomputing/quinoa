################################################################################
#                                                                              #
#         TriBITS Projects, Repositories, and Packages                         #
#                                                                              #
################################################################################


TriBITS defines a system for building a set of interrelated software with a
web of acyclic dependencies.


A) TriBITS Units
----------------

There are some important concepts that are part of the TriBITS system that
must be clearly defined.

A.1) Project: a global, top-level CMake build
* This defines a build, consisting of one or more Repositories (see 2)
* Example: Trilinos, as far as the nightly build is concerned
* Defines PROJECT_NAME CMake variable (defined in ProjectName.cmake)
* Defines a CMake project by calling PROJECT(${PROJECT_NAME} ...)
* Defines a set of native Repositories (see below) that define
  packages and TPLs.  This set of native Repositories defines the
  official packages list and dependencies data-structure.  The list
  of native Repositories can be empty!
* Allows for extra Repositories to be added on before and after the
  set of native Repositories (given in ExtraRepositoriesList.cmake
  or by CMake variables)
* Defines a default CDash server and default project name on the server
  (the project name on the CDash server must be the same as
  ${PROJECT_NAME})
* Core files making up a Project:
    CMakeLists.txt
    CTestConfig.cmake
    ProjectName.cmake  # Defines PACAKGE_NAME
    Version.cmake # [Optional] Dev mode, Project version, VC branch
    cmake/
      NativeRepositoriesList.cmake  # [Optional] For meta-projects
      ExtraRepositoriesList.cmake   # [Optional] Lists VC URLs 
      ProjectDependenicesSetup.cmake # [Optional] Project deps overrides
      tribits/  # [Optional] Could just point to installed tribits
      ctest/
        CTestCustom.ctest.in  # [Optional] Custom ctest settings

A.2) Repository: a collection of packages and/or files
* This defines an association between one or more packages
* Example: Trilinos, as far as its packages are concerned
* Defines a CMake variable specific to the collection referred to the
  in the variable REPOSITORY_NAME.
* Defines the base source and binary directories for the Repository:
  (e.g. Trilinos_HOME_DIR and Trilinos_BUILD_DIR which may *not* be the
  same as ${PROJECT_NAME}_HOME_DIR and ${PROJECT_NAME}_BUILD_DIR).
* Contains files that contribute to the build and or tests for some parent
  Project
* [Optional] Defines a list of add-on packages and TPLs (PackagesList.cmake
  and TPLsList.cmake)
* [Optional] Defines a common set of initializations and other hooks for a
  collection of projects.
* Core files making up a Repository:
    PackagesList.cmake
    TPLsList.cmake
    Copyright.txt  # [Optional] Only needed if creating version header file
    Version.cmake  # [Optional] Info inserted into ${REPO_NAME}_version.h
    cmake/
       RepositoryDependenciesSetup.cmake # [Optional] Read before package Dependencies.cmake
       CallbackSetupExtraOptions.cmake # [Optional] Called after tribits options
       CallbackDefinePackaging.cmake # [Optioinal] Called after packages configured

A.3) Package:
* Defines a set of libraries and/or headers and/or executables and/or tests
  with cmake build targets for building these and publishes the list of include
  directories and libraries that are created (along with CMake dependencies).
* Defines dependencies on upstream TPLs and/or other packages by just 
  naming the dependencies using their package names.
* Publishes a list of header file include paths and/or libraries
* Installs an XXXConfig.cmake file that provides the list of this info
* Core files making up a package:
    CMakeLists.txt  # Only processed if the package is enabled
    cmake/
       Dependencies.cmake  # Always processed if the package is listed in the
                           # enclosing Repository

A.4) TPL:
* Defines a set of pre-built libraries and/or executables
* Publishes the include directories and/or libraries and/or executables
  provided by the TPL

NOTES:

* A Project and a Repository can be one in the same.  That is, a Project can
  provide a set of packages and initializations.  This linkage is made in
  the base-level Project CMakeLists.txt file.

  - Also, in this case, the Project's and the Repository's Version.cmake and
    Copyright.txt files are one and the same which works just fine.

  - When the Project and Repositories base directories are the same and there
    is just one list of packages, then the file NativeRepositoriesList.cmake is
    unnecessary.

* The number of and the names of the call-back files may change in the future
  repository-specific requirements change.  However, we will try to only add files
  and not change existing ones.


B) CMake Variables:
-------------------

The variables below fall into one of two types:
* "Fixed variable" are used temporarily in the processing of a TriBITS unit.
  These include variables such as PROJECT_NAME, REPOSITORY_NAME and PACKAGE_NAME
  These are distinguished by having a fixed/constant name.
  They are typically part of TriBITS reflection system, allowing subordinate units 
  to determine the encapsulating unit in which they are participating.
* "Named variable" are used to refer to properties of a named TriBITS unit.
  These include variables such as, e.g., Trilinos_SOURCE_DIR or Belos_BINARY_DIR.
  They are available after processing the unit, for use by downstream or
  subordinate units.
  They are part of the TriBITS dependency system, allowing downstream units 
  to access properties of their known upstream dependencies.

B.1) Project unit variables:

These are top-level (non-cache) CMake variables that are available once a
Project is defined:

  PROJECT_NAME: The name of the Project. 
    This exists to support, among other things, the ability for subordinate units 
    (Repositories and Packages) to determine the Project in which is participating.
  PROJECT_SOURCE_DIR: The absolute path to the base Project source directory
  PROJECT_BINARY_DIR: The absolute path to the base Project binary/build directory
  ${PROJECT_NAME}_SOURCE_DIR: Set to ${PROJECT_SOURCE_DIR}
  ${PROJECT_NAME}_BINARY_DIR: Set to ${PROJECT_BINARY_DIR}

B.2) Repository unit variables:

These are the variables that are available once each Repository is defined:

  REPOSITORY_NAME:
    The name of the current repository. 
  REPOSITORY_DIR:
    Path of the current Repository relative to the Project directory.
  ${REPOSITORY_NAME}_SOURCE_DIR:
    The absolute path to the base of a given Repository source directory.
    CMake code, for example in packages, refer to this by the raw name like
    RepoX_SOURCE_DIR.  This makes such CMake code independent of where the
    Repository is in relation to the Project.
  ${REPOSITORY_NAME}_BINARY_DIR:
    The absolute path to the base of a given Repository binary directory.
    CMake code, for example in packages, refer to this by the raw name like
    RepoX_SOURCE_DIR.  This makes such CMake code independent of where the
    Repository is in relation to the Project.
  ${REPOSITORY_NAME}_NO_IMPLICIT_PACKAGE_ENABLE:
    If set to true, then the packages in Repository ${REPOSITORY_NAME} will
    not be implicitly enabled in any of the package adjustment logic.
  ${REPOSITORY_NAME}_NO_IMPLICIT_PACKAGE_ENABLE_EXCEPT:
    List of packages in the Repository ${REPOSITORY_NAME} that will be allowed
    to be implicitly enabled.  Only checked if
    ${REPOSITORY_NAME}_NO_IMPLICIT_PACKAGE_ENABLE is true.

There are also lists of repositories:

  ${PROJECT_NAME}_NATIVE_REPOSITORIES:
     The list of Native Repositories (i.e. Repositories that are always present
     when configuring the Project).  The packages in these Native Repositories are
     what are used to create the default project dependencies files.
  ${PROJECT_NAME}_EXTRA_REPOSITORIES:
     The list of Extra Repositories that the project is being configured with.
     The packages in these repositories are *not* listed in the main project
     dependency files but are listed in the dependenicy files in other contexts
     (for example by the checkin-test.py script and the TribitCTestCoreDriver.cmake
     script).
  ${PROJECT_NAME}_ALL_REPOSITORIES:
    Concatenation of ${PROJECT_NAME}_NATIVE_REPOSITORIES and 
    ${PROJECT_NAME}_EXTRA_REPOSITORIES listing of the repostories in order that
    the project is being configured with.

B.3) Package unit variables:

These are top-level (non-cache) CMake variables that are available once a
Package is processed.

  PACKAGE_NAME:
    The name of the current package
  PACKAGE_SOURCE_DIR:
    The absolute path to the base package's base source directory
  PACKAGE_BINARY_DIR:
    The absolute path to the base package's base binary/build directory
  ${PACKAGE_NAME}_SOURCE_DIR:
    The absolute path to the base of a given package's source directory.  CMake
    code, for example in other packages, refer to this by the raw name like
    PackageX_SOURCE_DIR.  This makes such CMake code independent of where the
    package is in relation to other packages.  
    This variable is defined for all processed packages, independent of whether 
    they are enabled.
  ${PACKAGE_NAME}_BINARY_DIR:
    The absolute path to the base of a given package's binary directory.  CMake
    code, for example in other packages, refer to this by the raw name like
    PackageX_BINARY_DIR.  This makes such CMake code independent of where the
    package is in relation to other packages.  
    This variable is only defined if the package is enabled.
  PARENT_PACKAGE_SOURCE_DIR:
    The absolute path to the parent package's source directory.
    This is useful for access by subpackages.
  PARENT_PACKAGE_BINARY_DIR:
    The absolute path to the parent package's binary directory.
    This is useful for access by subpackages.
  ${PROJECT_NAME}_PARENT_REPOSITORY:
    The name of the packages parent repository.  This can be used by a package to
    access information about its parent repository.

C) CDash regression email addresses:
------------------------------------

Every TriBITS Package has a regression email address associated with it that
gets uploaded to a CDash project on a CDash server that is used to determine
what email address to use when a package has configure, build, or test
failures.  Because of the complex organizational nature of different projects
and different integration models, a single static email address for a given
package in every project build is not practical.

The TriBITS system allows for a Package's regression email to be specified in
the following order.:

1) REGRESSION_EMAIL_LIST (defined in Dependneices.cmake): Package-specific
email address overrides specified in the Dependencies.cmake file (the local
variable REGRESSION_EMAIL_LIST).  This package-specific email address will be
overridden if ${REPOSITORY_NAME}_REPOSITORY_OVERRIDE_PACKAGE_EMAIL_LIST using
the single Project or Repository master regression emails lists described
above.

2) ${REPOSITORY_NAME}_REPOSITORY_EMAIL_URL_ADDRESSS_BASE: A base email address
specified at the Repository level creating package-specific email addresses
(e.g. <lower-case-package-name>-regression@some.repo.gov, where
${PROJECT_NAME}_REPOSITORY_EMAIL_URL_ADDRESSS_BASE=some.repo.gov).  This
variable is set in the Repositories cmake/DependenciesSetup.cmake file to
provide a default for the repository but can be overridden (i.e. by the
project).

3) ${REPOSITORY_NAME}_REPOSITORY_MASTER_EMAIL_ADDRESSS: A Single email address
for all packages specified at the Repository level
(e.g. my-repo-regression@some.repo.gov).  This variable is set in the
Repositories cmake/DependenciesSetup.cmake file to provide a default for the
repository but can be overridden (i.e. by the project).

4) ${PROJECT_NAME}_PROJECT_EMAIL_URL_ADDRESSS_BASE: A base email address
specified at the Project level creating package-specific email addresses
(e.g. <lower-case-package-name>-regression@some.project.gov, where
${PROJECT_NAME}_PROJECT_EMAIL_URL_ADDRESSS_BASE=some.project.gov).  If not
already set, this variable will be set to
${REPOSITORY_NAME}_REPOSITORY_EMAIL_URL_ADDRESSS_BASE for the first repostory
processed that has this set.

5) ${PROJECT_NAME}_PROJECT_MASTER_EMAIL_ADDRESSS: A Single email address for
all packages specified at the Project level
(e.g. my-project-regression@some.project.gov).  If not already set, this
variable will be set to ${REPOSITORY_NAME}_REPOSITORY_MASTER_EMAIL_ADDRESSS
for the first repostory processed that has this set.

If any of the email lists or URL string variables listed above are set to
"OFF" or "FALSE" (or some other value that CMake interprests as false) then
the varaibles are treated as empty and not set.

If a TriBITS project does not use CDash, then no email address needed to be
assigned to packages at all (which will be the case if none of the above
variables are set).

As a general rule, repository-level settings override project-level settings
and package-level settings override both.  Also, a project can redefine a
reposiotry's regression email list settings.

All of the email dependency managment logic must be accessable by just running
the macro:

    TRIBITS_READ_PACKAGES_PROCESS_DEPENDENCIES_WRITE_XML()

The above email address configuration variables are read from the Repository
and Project files RepositoryDependenciesSetup.cmake and
ProjectDependenciesSetup.cmake respectively.  The
RepositoryDependenciesSetup.cmake are read first in the specified order
followed up reading the ProjectDependenciesSetup.cmake file.  In this way, the
project can override any of the repository settings.

Here is the precedence order for how regression email addresses are selected
for a given package:

1) Package-specific email list is selected if defined (unless an override is
in place).

2) Repository-level option is selected over a project-level option.

3) Default email form with repository or project address base is selected over
single repository or project email address.

4) If none of the above are selected, then no email address is assigned.


D) Open issues:
---------------

D.1) Should there be a concept of a "Repository" at the package level?

Currently, a Package can refer to its containing Repository and refer to its
source and binary directories.  This is so that it can refer to
repository-level resources (e.g. like the Trilinos_version.h file).  This may
be undesirable because it will make it very hard to pull a package out of one
Repository and place it in another repository for a different use.  In this
case, we might eliminate the defined varibles <REPOSITORY_NAME>_SOURCE_DIR and
<REPOSITORY_NAME>_BINARY_DIR and make Packages oblivious to the Repository
that they are in.

Note that the concept of Repositories would remain an important concept at the
Project level because the project needs to know what packages and TPLs to
define and needs to know where to find call-backs that might be specific to
the repository.
