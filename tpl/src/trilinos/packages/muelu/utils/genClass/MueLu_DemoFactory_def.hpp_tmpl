// @HEADER
//
// ***********************************************************************
//
//        MueLu: A package for multigrid based preconditioning
//                  Copyright 2013 Sandia Corporation
//
// Under the terms of Contract DE-AC04-94AL85000 with Sandia Corporation,
// the U.S. Government retains certain rights in this software.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact
//                    Jonathan Hu       (jhu@sandia.gov)
//                    Andrey Prokopenko (aprokop@sandia.gov)
//                    Ray Tuminaro      (rstumin@sandia.gov)
//
// ***********************************************************************
//
// @HEADER
#ifndef MUELU_$CLASSNAMEUPPER_DEF_HPP
#define MUELU_$CLASSNAMEUPPER_DEF_HPP

#include "MueLu_$CLASSNAME_decl.hpp"

#include "MueLu_Level.hpp"


namespace MueLu {

  $SHORTTEMPLATEDEFINITION
  $CLASSNAME$TEMPLATEPARAMETERS::$CLASSNAME()
  { }

  $SHORTTEMPLATEDEFINITION
  $CLASSNAME$TEMPLATEPARAMETERS::~$CLASSNAME() {}

  $SHORTTEMPLATEDEFINITION
  RCP<const ParameterList> $CLASSNAME$TEMPLATEPARAMETERS::GetValidParameterList(const ParameterList& paramList) const {
    RCP<ParameterList> validParamList = rcp(new ParameterList());

    //validParamList->set< Scalar >                ("demo scalar",    0.0,           "only for demonstration");
    //validParamList->set< RCP<const FactoryBase> >("A",              Teuchos::null, "Generating factory of the matrix A used during the prolongator smoothing process");

    return validParamList;
  }


  $SHORTTEMPLATEDEFINITION
  void $CLASSNAME$TEMPLATEPARAMETERS::$DECLAREINPUT const {
    // TODO: declare input for factory
    //Input(currentLevel, "A");
  }

  $SHORTTEMPLATEDEFINITION
  void $CLASSNAME$TEMPLATEPARAMETERS::$BUILD const {
    // TODO: implement factory
  }

} // namespace MueLu

#define MUELU_$CLASSNAMEUPPER_SHORT
#endif // MUELU_$CLASSNAMEUPPER_DEF_HPP
