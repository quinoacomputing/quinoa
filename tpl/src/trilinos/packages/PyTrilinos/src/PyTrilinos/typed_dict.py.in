# -*- python -*-

# @HEADER
# ************************************************************************
#
#                PyTrilinos: Python Interface to Trilinos
#                   Copyright (2010) Sandia Corporation
#
# Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# Questions? Contact Bill Spotz (wfspotz@sandia.gov)
#
# ************************************************************************
# @HEADER

#
# Define the class factory function
def typed_dict(keyType, valueType):
    # Class name
    name = 'dict_of_' + keyType.__name__ + '_to_' + valueType.__name__
    # Class docstring
    if isinstance("", keyType):
        doc = '%s([dict] [key=value, ...])\n\n'
    else:
        doc = '%s([dict])\n\n'
    doc += 'a dictionary whose keys are restricted to type "%s"\n'\
           'and values are of type "%s"' 
    doc = doc % (name, keyType.__name__, valueType.__name__)
    # These functions will be returned as class methods
    def new(cls, source=None, **kwargs):
        return dict.__new__(cls)
    def init(self, source=None, **kwargs):
        if source:
            self.update(source)
        if kwargs:
            self.update(kwargs)
    def setitem(self, key, value):
        if not isinstance(key, self.keyType):
            raise TypeError, 'Expected key of type "%s", got "%s"' \
                  % (self.keyType.__name__, type(key).__name__)
        if not isinstance(value, self.valueType):
            raise TypeError, 'Expected value of type "%s", got "%s"' \
                  % (self.valueType.__name__, type(value).__name__)
        dict.__setitem__(self, key, value)
    def update(self, other):
        for key in other:
            self.__setitem__(key, other[key])
    def fromkeys(self, seq, value=None):
        for key in seq:
            self.__setitem__(key, value)
    def setdefault(self, key, default=None):
        try:
            return self.__getitem__(key)
        except KeyError:
            self.__setitem__(key, default)
            return default
    # Class members
    members = dict(__doc__     = doc,
                   keyType     = keyType,
                   valueType   = valueType,
                   __new__     = new,
                   __init__    = init,
                   __setitem__ = setitem,
                   update      = update,
                   fromkeys    = fromkeys,
                   setdefault  = setdefault)
    # Return the manufactured class
    return type(name, (dict,), members)
