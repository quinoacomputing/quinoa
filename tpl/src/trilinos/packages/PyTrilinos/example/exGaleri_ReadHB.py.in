#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ************************************************************************
#
#                PyTrilinos: Python Interface to Trilinos
#                   Copyright (2005) Sandia Corporation
#
# Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# Questions? Contact Bill Spotz (wfspotz@sandia.gov)
#
# ************************************************************************
# @HEADER

#
# System imports
from   optparse import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra = fromPyTrilinosImport('Epetra', options.testharness)
Galeri = fromPyTrilinosImport('Galeri', options.testharness)

# Creates a communicator, which is an Epetra_MpiComm if Trilinos was
# configured with MPI support, serial otherwise.
Comm = Epetra.PyComm()

# Reads the matrix from file ``gre__115.rua'', downloaded from
# the MatrixMarket web site. Use the try/except block to
# catch the integer exception that is thrown if the matrix file
# cannot be opened
failures = 0
try:
  Map, Matrix, X, B, Xexact = Galeri.ReadHB("gre__115.rua", Comm);
except Exception, e:
  failures += 1
  print "Problems reading matrix file.  Error message is:"
  print "   ", e

# at this point you can use the objects in any PyTrilinos module,
# for example AztecOO, Amesos, IFPACK, ML, and so on. 

failures = Comm.SumAll(failures)
if failures == 0 and Comm.MyPID() == 0: print "End Result: TEST PASSED"
sys.exit(failures)
