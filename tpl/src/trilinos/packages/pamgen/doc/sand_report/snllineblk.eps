%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 6.0
%%AI8_CreatorVersion: 8.0.1
%%For: (Shannon Whitehead) (Sandia National Laboratories)
%%Title: (snllineblk.eps)
%%CreationDate: (5/5/00) (11:19 AM)
%%BoundingBox: 178 243 419 281
%%HiResBoundingBox: 178.4834 243.4766 418.7407 280.0811
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 2.0
%AI3_ColorUsage: Black&White
%%CMYKCustomColor: 0 0.23 0.38 0 (PANTONE 473 CV)
%%+ 1 0.51 0 0.305 (PANTONE 541 CV)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 30 31 582 761
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -270 804 1 1146 827 18 0 1 3 40 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:30 31
%%AI3_PaperRect:-30 761 582 -31
%%AI3_Margin:30 -31 -30 31
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.2 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 50 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 40 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIDataProc null def
	/XIVersion 6 def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
end
currentdict /_colorimage known not {
	/colorimage where {
		/colorimage get /_colorimage exch def
	}{
		/_colorimage null def
	} ifelse
} if
/_image systemdict /image get def
/_currenttransfer systemdict /currenttransfer get def
/FourEqual {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual { 
				/plateindex 0 def
			}{
				0 1 0 0 FourEqual { 
					/plateindex 1 def
				}{
					0 0 1 0 FourEqual {
						/plateindex 2 def
					}{
						0 0 0 1 FourEqual { 
							/plateindex 3 def
						}{
							0 0 0 0 FourEqual {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/clrspaceissepn {
	type /arraytype eq 
} def
/clrspacegetname {
	dup clrspaceissepn {dup length 2 sub get}{pop ()} ifelse
} def
/clrspacegetalt {
	aload pop pop pop colormake
} def
/clrspacegetcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/clrspacemarksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				/findcmykcustomcolor where {
					pop
					dup length 2 sub get
					0.1 0.1 0.1 0.1 5 -1 roll
					findcmykcustomcolor 1 setcustomcolor
					systemdict /currentgray get exec
					1 ne
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/colormake {
	dup clrspacegetcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/colorexpand {
	dup clrspacegetname exch
	dup clrspaceissepn {
		clrspacegetalt
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				clrspacegetalt colortint colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/WalkRGBString {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/CMYKToGrayImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/SeparateCMYKImageProc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne {
			sourcearray plateindex get exec
		}{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub {
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/ColorImageCompositeEmulator {
	pop true eq {
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne {
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq {/RGBToGrayImageProc}{/CMYKToGrayImageProc} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/colorimage {
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index
 end
	
	dup 8 eq exch 1 eq or not {
		/_colorimage load null ne {
			_colorimage
		}{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}{
		dup 3 eq TestPlateIndex dup -1 eq exch 5 eq or or {
			/_colorimage load null eq {
				ColorImageCompositeEmulator
			}{
				dup 1 eq {
					pop pop image
				}{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq {
						grestore
					} if
				} ifelse
			} ifelse
		}{
			dup 1 eq {
				pop pop
				image
			}{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0 {			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace clrspacegetcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] makeimagedict _image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] makeimagedict _image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} stringapply
			} concatprocs _image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} stringapply
			} concatprocs false _pticomps
			/_colorimage load null eq {7 {pop} repeat}{_colorimage} ifelse
		} ifelse
	} ifelse
} def
/graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray proctintimage
} def
/cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK proctintimage
} def
/rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB proctintimage
} def
/tintimage {
	TestPlateIndex -1 eq {
		colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop graytintimage
		}{
			dup /DeviceRGB eq {
				pop rgbtintimage
			}{
				pop cmyktintimage
			} ifelse
		} ifelse
	}{
		dup clrspacemarksplate {
			plateindex 5 lt {
				colortocmyk plateindex get 1 exch sub
				exch {1 0}{0 1} ifelse () graytintimage
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () graytintimage
			} ifelse
		}{
			pop pop pop
			{pop 1} 0 1 () /DeviceGray proctintimage
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace tintimage
} def
/XIImage {
	0 setgray
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIChannelCount 1 eq {image}{false XIChannelCount colorimage} ifelse
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIType 1 eq {
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEncoding 0 ne XIVersion 6 le and {
			currentfile 128 string readline pop pop
		} if
		XICompression 0 eq {
			/XIBuffer1 XIRowBytes string def
			XIEncoding 0 eq {
				{currentfile XIBuffer1 readhexstring pop}
			}{
				{currentfile XIBuffer1 readstring pop}
			} ifelse
		}{
			/XIBuffer1 256 string def
			/XIBuffer2 XIRowBytes string def
			{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
			/ASCIIHexDecode filter /DCTDecode filter
			/XIFile exch def
			{XIFile XIBuffer2 readstring pop}
		} ifelse
		/XIDataProc exch def
		
		XIVersion 6 le {
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIType 1 eq {
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		XIEnable {
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Yellow Stripe)
(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [
%AI3_Tile
(0 O 0 R 0 0.4 1 0 k
 0 0.4 1 0 K
) @
(
%AI6_BeginPatternLayer
800 Ar
0 J 0 j 3.6 w 4 M []0 d
%AI3_Note:
0 D
0 XR
8.1999 8.1999 m
80.6999 8.1999 L
S
8.1999 22.6 m
80.6999 22.6 L
S
8.1999 37.0001 m
80.6999 37.0001 L
S
8.1999 51.3999 m
80.6999 51.3999 L
S
8.1999 65.8 m
80.6999 65.8 L
S
8.1999 15.3999 m
80.6999 15.3999 L
S
8.1999 29.8 m
80.6999 29.8 L
S
8.1999 44.1999 m
80.6999 44.1999 L
S
8.1999 58.6 m
80.6999 58.6 L
S
8.1999 73.0001 m
80.6999 73.0001 L
S
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
3 Bn
%AI5_BeginGradient: (Black & White)
(Black & White) 0 2 Bd
[
0
0
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
1 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Red & Yellow)
(Red & Yellow) 0 2 Bd
[
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EF
EFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BF
BFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AF
AFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F
9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999
>
0
1 %_Br
[
0 1 0.6 0 1 50 100 %_Bs
0 0 1 0 1 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Yellow & Blue Radial)
(Yellow & Blue Radial) 1 2 Bd
[
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738
393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D
5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F808182
83848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7
A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCB
CCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0
F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF
>
<
ABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191
908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A797978777776
7575747373727171706F6F6E6D6D6C6B6B6A6969686767666564646362626160605F5E5E5D5C5C5B
5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140
403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A292828272626
25242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B
0A090908070706050504030302010100
>
0
1 %_Br
[
0 0.08 0.67 0 1 50 14 %_Bs
1 1 0 0 1 50 100 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
Pc
1 g
Pc
0 g
Pc
0 0 0 0 k
Pc
0.75 g
Pc
0.5 g
Pc
0.25 g
Pc
0 g
Pc
Bb
2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0.25 0 0 0 k
Pc
0.5 0 0 0 k
Pc
0.75 0 0 0 k
Pc
1 0 0 0 k
Pc
0.25 0.25 0 0 k
Pc
0.5 0.5 0 0 k
Pc
0.75 0.75 0 0 k
Pc
1 1 0 0 k
Pc
Bb
2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0.25 0 0 k
Pc
0 0.5 0 0 k
Pc
0 0.75 0 0 k
Pc
0 1 0 0 k
Pc
0 0.25 0.25 0 k
Pc
0 0.5 0.5 0 k
Pc
0 0.75 0.75 0 k
Pc
0 1 1 0 k
Pc
Bb
0 0 0 0 Bh
2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg
0 BB
Pc
0 0 0.25 0 k
Pc
0 0 0.5 0 k
Pc
0 0 0.75 0 k
Pc
0 0 1 0 k
Pc
0.25 0 0.25 0 k
Pc
0.5 0 0.5 0 k
Pc
0.75 0 0.75 0 k
Pc
1 0 1 0 k
Pc
(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
Pc
0.25 0.125 0 0 k
Pc
0.5 0.25 0 0 k
Pc
0.75 0.375 0 0 k
Pc
1 0.5 0 0 k
Pc
0.125 0.25 0 0 k
Pc
0.25 0.5 0 0 k
Pc
0.375 0.75 0 0 k
Pc
0.5 1 0 0 k
Pc
0 0 0 0 k
Pc
0 0.25 0.125 0 k
Pc
0 0.5 0.25 0 k
Pc
0 0.75 0.375 0 k
Pc
0 1 0.5 0 k
Pc
0 0.125 0.25 0 k
Pc
0 0.25 0.5 0 k
Pc
0 0.375 0.75 0 k
Pc
0 0.5 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0 0.25 0 k
Pc
0.25 0 0.5 0 k
Pc
0.375 0 0.75 0 k
Pc
0.5 0 1 0 k
Pc
0.25 0 0.125 0 k
Pc
0.5 0 0.25 0 k
Pc
0.75 0 0.375 0 k
Pc
1 0 0.5 0 k
Pc
0 0 0 0 k
Pc
0.25 0.125 0.125 0 k
Pc
0.5 0.25 0.25 0 k
Pc
0.75 0.375 0.375 0 k
Pc
1 0.5 0.5 0 k
Pc
0.25 0.25 0.125 0 k
Pc
0.5 0.5 0.25 0 k
Pc
0.75 0.75 0.375 0 k
Pc
1 1 0.5 0 k
Pc
0 0 0 0 k
Pc
0.125 0.25 0.125 0 k
Pc
0.25 0.5 0.25 0 k
Pc
0.375 0.75 0.375 0 k
Pc
0.5 1 0.5 0 k
Pc
0.125 0.25 0.25 0 k
Pc
0.25 0.5 0.5 0 k
Pc
0.375 0.75 0.75 0 k
Pc
0.5 1 1 0 k
Pc
0 0 0 0 k
Pc
0.125 0.125 0.25 0 k
Pc
0.25 0.25 0.5 0 k
Pc
0.375 0.375 0.75 0 k
Pc
0.5 0.5 1 0 k
Pc
0.25 0.125 0.25 0 k
Pc
0.5 0.25 0.5 0 k
Pc
0.75 0.375 0.75 0 k
Pc
1 0.5 1 0 k
Pc
0 0.23 0.38 0 (PANTONE 473 CV) 0 x
Pc
1 0.51 0 0.305 (PANTONE 541 CV) 0 x
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Layer 1) Ln
0 A
u
u
u
0 O
0 g
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
392.1587 259.1909 m
392.1616 258.791 392.1631 258.4092 392.1631 258.0791 c
392.1636 257.3091 392.1558 256.8057 392.1494 256.0293 c
392.1411 254.9805 391.8071 254.2759 390.6636 254.2563 c
389.5205 254.2363 389.1348 254.9541 389.1431 256.0034 c
389.1553 257.5264 389.168 258.9014 389.1636 260.6362 c
389.1602 262.3579 389.9941 262.5522 390.5205 262.561 c
391.4072 262.5767 392.1289 262.4219 392.146 260.7002 c
392.1509 260.2144 392.1558 259.689 392.1587 259.1909 C
394.4048 259.2397 L
394.3916 260.1152 394.3525 260.9395 394.2832 261.3379 c
393.9214 263.4272 392.3955 264.1426 390.52 264.1177 c
388.6445 264.0928 387.3438 263.3398 387.0376 261.2417 c
386.8818 260.1714 386.8687 256.562 387.1045 255.2422 c
387.3525 253.855 388.4365 252.6577 390.6719 252.6875 c
392.9072 252.7173 394.1133 253.832 394.272 255.4272 c
394.3486 256.1963 394.3999 257.1206 394.4087 258.23 c
394.4111 258.5596 394.4102 258.9033 394.4048 259.2397 C
392.1587 259.1909 L
f
U
U
u
u
365.3804 259.1909 m
365.3828 258.791 365.3843 258.4092 365.3848 258.0791 c
365.3848 257.3091 365.3774 256.8057 365.3711 256.0293 c
365.3628 254.9805 365.0288 254.2759 363.8853 254.2563 c
362.7422 254.2363 362.3564 254.9541 362.3647 256.0034 c
362.377 257.5264 362.3896 258.9014 362.3853 260.6362 c
362.3813 262.3579 363.2158 262.5522 363.7422 262.561 c
364.6289 262.5767 365.3506 262.4219 365.3677 260.7002 c
365.3726 260.2144 365.377 259.689 365.3804 259.1909 C
367.6265 259.2397 L
367.6133 260.1152 367.5737 260.9395 367.5049 261.3379 c
367.1431 263.4272 365.6172 264.1426 363.7417 264.1177 c
361.8657 264.0928 360.5654 263.3398 360.2593 261.2417 c
360.103 260.1714 360.0898 256.562 360.3262 255.2422 c
360.5742 253.855 361.6582 252.6577 363.8936 252.6875 c
366.1289 252.7173 367.335 253.832 367.4932 255.4272 c
367.5698 256.1963 367.6211 257.1206 367.6299 258.23 c
367.6328 258.5596 367.6318 258.9033 367.6265 259.2397 C
365.3804 259.1909 L
f
U
U
u
u
u
u
380.6807 257.7373 m
380.668 258.792 380.6577 259.8726 380.6577 260.7695 c
380.6577 262.8638 379.5527 264.1997 377.1758 264.1997 c
374.645 264.1997 373.54 262.9795 373.6558 260.7954 C
375.8652 260.7954 l
375.917 261.7847 375.7754 262.6836 377.0986 262.6836 c
378.4224 262.6836 378.3706 261.7847 378.4351 260.8081 c
378.4902 259.9746 378.4351 259.8315 y
376.5718 259.7676 375.4546 259.3818 v
374.3364 258.9966 373.4243 258.2129 373.4243 256.2212 c
373.4243 254.5 373.772 252.8311 376.0068 252.688 c
377.2144 252.6108 378.0366 253.3691 378.3838 253.7803 c
378.4995 253.7803 378.6152 252.8809 V
380.7607 252.8809 l
380.6724 254.9648 380.6768 257.1255 V
378.4644 257.0962 L
378.458 256.8721 378.4448 256.6455 378.4224 256.4395 c
378.3325 255.6177 378.0752 254.4609 376.752 254.4609 c
375.4287 254.4609 375.5186 255.8613 375.6729 256.9282 c
375.8271 257.9941 376.9063 258.2129 378.4482 258.29 c
378.4624 258.063 378.4678 257.7373 V
F
U
380.6807 257.7373 m
380.6787 257.5342 380.6772 257.3296 380.6768 257.1255 C
378.4644 257.0962 L
378.4712 257.3198 378.4712 257.5415 378.4678 257.7373 c
F
U
U
U
u
u
u
u
350.3286 257.7373 m
350.3154 258.792 350.3057 259.8726 350.3057 260.7695 c
350.3057 262.8638 349.2007 264.1997 346.8237 264.1997 c
344.293 264.1997 343.188 262.9795 343.3037 260.7954 C
345.5132 260.7954 l
345.5645 261.7847 345.4233 262.6836 346.7466 262.6836 c
348.0703 262.6836 348.0186 261.7847 348.083 260.8081 c
348.1377 259.9746 348.083 259.8315 y
346.2197 259.7676 345.1021 259.3818 v
343.9844 258.9966 343.0723 258.2129 343.0723 256.2212 c
343.0723 254.5 343.4199 252.8311 345.6543 252.688 c
346.8623 252.6108 347.6846 253.3691 348.0313 253.7803 c
348.147 253.7803 348.2627 252.8809 V
350.4082 252.8809 l
350.3203 254.9648 350.3247 257.1255 V
348.1123 257.0962 L
348.1055 256.8721 348.0923 256.6455 348.0703 256.4395 c
347.98 255.6177 347.7231 254.4609 346.3999 254.4609 c
345.0762 254.4609 345.1665 255.8613 345.3203 256.9282 c
345.4746 257.9941 346.5542 258.2129 348.0957 258.29 c
348.1099 258.063 348.1157 257.7373 V
F
U
350.3286 257.7373 m
350.3267 257.5342 350.3252 257.3296 350.3247 257.1255 C
348.1123 257.0962 L
348.1191 257.3198 348.1191 257.5415 348.1157 257.7373 c
F
U
U
U
u
u
u
u
326.3809 257.7373 m
326.3677 258.792 326.3574 259.8726 326.3574 260.7695 c
326.3574 262.8638 325.2529 264.1997 322.876 264.1997 c
320.3447 264.1997 319.2397 262.9795 319.3555 260.7954 C
321.5654 260.7954 l
321.6167 261.7847 321.4756 262.6836 322.7988 262.6836 c
324.1221 262.6836 324.0708 261.7847 324.1353 260.8081 c
324.1899 259.9746 324.1353 259.8315 y
322.272 259.7676 321.1543 259.3818 v
320.0366 258.9966 319.124 258.2129 319.124 256.2212 c
319.124 254.5 319.4722 252.8311 321.7065 252.688 c
322.9146 252.6108 323.7368 253.3691 324.0835 253.7803 c
324.1992 253.7803 324.3149 252.8809 V
326.4604 252.8809 l
326.3721 254.9648 326.377 257.1255 V
324.1646 257.0962 L
324.1577 256.8721 324.1445 256.6455 324.1221 256.4395 c
324.0322 255.6177 323.7754 254.4609 322.4521 254.4609 c
321.1284 254.4609 321.2188 255.8613 321.3726 256.9282 c
321.5269 257.9941 322.6064 258.2129 324.1479 258.29 c
324.1621 258.063 324.168 257.7373 V
F
U
326.3809 257.7373 m
326.3784 257.5342 326.3774 257.3296 326.377 257.1255 C
324.1646 257.0962 L
324.1709 257.3198 324.1714 257.5415 324.168 257.7373 c
F
U
U
U
u
u
u
u
292.6523 257.7373 m
292.6396 258.792 292.6294 259.8726 292.6294 260.7695 c
292.6294 262.8638 291.5249 264.1997 289.1479 264.1997 c
286.6167 264.1997 285.5117 262.9795 285.6274 260.7954 C
287.8369 260.7954 l
287.8887 261.7847 287.7471 262.6836 289.0708 262.6836 c
290.394 262.6836 290.3423 261.7847 290.4067 260.8081 c
290.4619 259.9746 290.4067 259.8315 y
288.5439 259.7676 287.4263 259.3818 v
286.3086 258.9966 285.396 258.2129 285.396 256.2212 c
285.396 254.5 285.7437 252.8311 287.9785 252.688 c
289.186 252.6108 290.0088 253.3691 290.3555 253.7803 c
290.4712 253.7803 290.5869 252.8809 V
292.7324 252.8809 l
292.644 254.9648 292.6489 257.1255 V
290.436 257.0962 L
290.4297 256.8721 290.4165 256.6455 290.394 256.4395 c
290.3042 255.6177 290.0469 254.4609 288.7236 254.4609 c
287.4004 254.4609 287.4902 255.8613 287.6445 256.9282 c
287.7988 257.9941 288.8779 258.2129 290.4199 258.29 c
290.4341 258.063 290.4395 257.7373 V
F
U
292.6523 257.7373 m
292.6504 257.5342 292.6489 257.3296 292.6489 257.1255 C
290.436 257.0962 L
290.4429 257.3198 290.4429 257.5415 290.4395 257.7373 c
F
U
U
U
u
u
u
u
268.1484 257.7373 m
268.1353 258.792 268.125 259.8726 268.125 260.7695 c
268.125 262.8638 267.0205 264.1997 264.6436 264.1997 c
262.1123 264.1997 261.0073 262.9795 261.123 260.7954 C
263.3325 260.7954 l
263.3843 261.7847 263.2427 262.6836 264.5664 262.6836 c
265.8896 262.6836 265.8379 261.7847 265.9023 260.8081 c
265.9575 259.9746 265.9023 259.8315 y
264.0396 259.7676 262.9219 259.3818 v
261.8042 258.9966 260.8916 258.2129 260.8916 256.2212 c
260.8916 254.5 261.2393 252.8311 263.4741 252.688 c
264.6816 252.6108 265.5044 253.3691 265.8511 253.7803 c
265.9668 253.7803 266.0825 252.8809 V
268.228 252.8809 l
268.1396 254.9648 268.1445 257.1255 V
265.9316 257.0962 L
265.9253 256.8721 265.9121 256.6455 265.8896 256.4395 c
265.7998 255.6177 265.5425 254.4609 264.2192 254.4609 c
262.896 254.4609 262.9858 255.8613 263.1401 256.9282 c
263.2944 257.9941 264.3735 258.2129 265.9155 258.29 c
265.9297 258.063 265.9351 257.7373 V
F
U
268.1484 257.7373 m
268.146 257.5342 268.1445 257.3296 268.1445 257.1255 C
265.9316 257.0962 L
265.9385 257.3198 265.9385 257.5415 265.9351 257.7373 c
F
U
U
U
u
u
307.6543 259.1909 m
307.6567 258.791 307.6582 258.4092 307.6582 258.0791 c
307.6587 257.3091 307.6509 256.8057 307.645 256.0293 c
307.6362 254.9805 307.3022 254.2759 306.1592 254.2563 c
305.0156 254.2363 304.6299 254.9541 304.6382 256.0034 c
304.6509 257.5264 304.6631 258.9014 304.6592 260.6362 c
304.6553 262.3579 305.4893 262.5522 306.0161 262.561 c
306.9023 262.5767 307.624 262.4219 307.6411 260.7002 c
307.6465 260.2144 307.6509 259.689 307.6543 259.1909 C
309.9004 259.2397 L
309.8872 260.1152 309.8477 260.9395 309.7783 261.3379 c
309.4165 263.4272 307.8911 264.1426 306.0156 264.1177 c
304.1396 264.0928 302.8389 263.3398 302.5327 261.2417 c
302.377 260.1714 302.3638 256.562 302.5996 255.2422 c
302.8477 253.855 303.9316 252.6577 306.167 252.6875 c
308.4023 252.7173 309.6084 253.832 309.7671 255.4272 c
309.8438 256.1963 309.895 257.1206 309.9038 258.23 c
309.9063 258.5596 309.9053 258.9033 309.9004 259.2397 C
307.6543 259.1909 L
f
U
U
402.7383 264.0288 m
400.5024 264.0288 l
400.5024 252.8774 l
402.749 252.8774 l
402.7383 264.0288 l
f
259.9766 264.0288 m
257.7407 264.0288 l
257.7407 252.8774 l
259.9873 252.8774 l
259.9766 264.0288 l
f
u
u
u
u
239.207 257.7373 m
239.1943 258.792 239.1841 259.8726 239.1841 260.7695 c
239.1841 262.8638 238.0791 264.1997 235.7021 264.1997 c
233.1714 264.1997 232.0664 262.9795 232.1821 260.7954 C
234.3916 260.7954 l
234.4434 261.7847 234.3018 262.6836 235.6255 262.6836 c
236.9487 262.6836 236.897 261.7847 236.9614 260.8081 c
237.0161 259.9746 236.9614 259.8315 y
235.0986 259.7676 233.981 259.3818 v
232.8633 258.9966 231.9507 258.2129 231.9507 256.2212 c
231.9507 254.5 232.2983 252.8311 234.5332 252.688 c
235.7407 252.6108 236.5635 253.3691 236.9102 253.7803 c
237.0259 253.7803 237.1416 252.8809 V
239.2866 252.8809 l
239.1987 254.9648 239.2031 257.1255 V
236.9907 257.0962 L
236.9844 256.8721 236.9712 256.6455 236.9487 256.4395 c
236.8589 255.6177 236.6016 254.4609 235.2783 254.4609 c
233.9551 254.4609 234.0449 255.8613 234.1992 256.9282 c
234.3535 257.9941 235.4326 258.2129 236.9741 258.29 c
236.9888 258.063 236.9941 257.7373 V
F
U
239.207 257.7373 m
239.2051 257.5342 239.2036 257.3296 239.2031 257.1255 C
236.9907 257.0962 L
236.9976 257.3198 236.9976 257.5415 236.9941 257.7373 c
F
U
U
U
242.5732 264.0317 m
240.3247 264.0317 l
240.479 263.1196 240.479 261.3726 v
240.479 259.625 240.479 252.8799 y
242.7529 252.8799 L
242.7529 260.396 242.7529 261.1665 v
242.7529 261.9375 243.0488 262.7085 244.0894 262.7085 c
245.1299 262.7085 245.4639 261.873 245.4639 261.2183 c
245.4639 260.563 245.4639 252.8799 y
247.7446 252.8799 L
247.7446 259.9077 247.7446 260.9868 v
247.7446 263.3252 246.6592 264.2373 244.9116 264.2373 c
243.5112 264.2373 243.126 263.6978 242.6504 263.3252 c
242.6118 263.3511 242.5732 264.0317 v
f
u
254.0674 258.7856 m
254.0674 259.5234 254.0674 260.1426 254.0674 261.1494 c
254.0674 262.7686 252.6797 262.7168 252.5771 262.7168 c
251.2793 262.7168 251.1123 261.8174 251.1123 258.7085 c
251.1123 256.3184 250.9775 254.3462 252.5708 254.3462 c
254.1768 254.3462 254.0674 255.9331 254.0674 257.1924 c
254.0674 257.7817 254.0674 258.3706 254.0674 258.7856 C
256.3208 258.7598 L
256.3198 258.0903 256.3179 257.4473 256.3159 257.1152 c
256.3027 254.9307 256.4316 252.8774 y
254.2603 252.8774 L
254.2085 253.582 254.0928 253.8647 Y
253.605 253.415 253.0908 252.8369 251.9731 252.8369 c
249.0952 252.8369 249.0313 255.3164 248.9668 256.2544 c
248.9023 257.1924 248.8765 260.4854 248.9922 261.5864 c
249.0693 262.3188 249.6606 264.2402 251.8574 264.2588 c
253.3994 264.2715 253.7334 263.5518 254.1123 263.4624 c
254.1123 268.146 l
256.3286 268.146 l
256.3286 266.9155 256.3271 261.6851 256.3208 258.7598 C
254.0674 258.7856 L
f
U
278.6055 268.1602 m
274.9053 268.1602 l
274.9053 252.8755 l
277.1924 252.8755 l
277.1924 265.104 l
280.5073 252.8755 l
284.2588 252.8755 l
284.2588 268.1602 l
281.9717 268.1602 l
281.9717 256.1357 l
278.6055 268.1602 L
f
296.54 262.4351 m
298.1714 262.4351 L
298.1714 264.0298 L
296.54 264.0298 L
296.54 265.6973 296.54 266.9189 Y
294.3813 266.0195 l
294.3813 265.2197 294.3813 264.0298 V
292.981 264.0298 L
292.981 262.4351 L
294.3813 262.4351 L
294.3813 259.5015 294.3813 255.7515 294.3813 255.2148 c
294.3813 254.3149 294.3813 252.8755 296.8223 252.8755 c
297.1953 252.8755 298.2358 252.8755 y
298.2358 254.3921 l
297.5161 254.3921 297.2593 254.3921 v
296.8994 254.3921 296.54 254.521 296.54 255.6128 c
296.54 256.2109 296.54 259.542 296.54 262.4351 C
f
301.2476 264.0288 m
299.0122 264.0288 l
299.0122 252.8774 l
301.2583 252.8774 l
301.2476 264.0288 l
f
301.2593 268.1636 m
299.0122 268.1636 l
299.0122 265.9087 l
301.2593 265.9087 l
301.2593 268.1636 l
f
313.0493 264.0317 m
310.8013 264.0317 l
310.9556 263.1196 310.9556 261.3726 v
310.9556 259.625 310.9556 252.8677 y
313.2295 252.8677 L
313.2295 260.396 313.2295 261.1665 v
313.2295 261.9375 313.5249 262.7085 314.5654 262.7085 c
315.6064 262.7085 315.9404 261.873 315.9404 261.2183 c
315.9404 260.563 315.9404 252.8677 y
318.2207 252.8677 L
318.2207 259.9077 318.2207 260.9868 v
318.2207 263.3252 317.1353 264.2373 315.3877 264.2373 c
313.9873 264.2373 313.6021 263.6978 313.127 263.3252 c
313.0884 263.3511 313.0493 264.0317 v
f
330.21 252.8779 m
330.21 268.1563 L
327.8462 268.1563 L
327.8462 252.8779 L
330.21 252.8779 L
f
336.9893 252.8716 m
342.4854 252.8716 L
342.4854 254.749 L
339.4175 254.749 L
339.4175 268.1621 L
336.9893 268.1621 L
336.9893 252.8716 L
f
u
356.8613 257.0283 m
356.8545 257.5054 356.8374 258.0229 356.8374 258.564 c
356.8374 261.6729 356.7344 262.6108 355.437 262.6108 c
355.334 262.6108 353.9082 262.624 353.9082 261.0435 C
353.9082 256.7012 L
353.9082 256.123 353.7925 254.2407 355.4561 254.2407 c
356.7832 254.2407 356.8838 255.3979 356.8613 257.0283 C
359.0483 257.0771 L
359.0396 256.6675 359.0225 256.3271 358.9956 256.1099 c
358.8706 255.0801 358.7388 252.731 356.0024 252.731 c
354.8843 252.731 354.3193 253.3091 353.8311 253.7588 C
353.7153 253.4761 353.6641 252.8687 V
351.4668 252.8687 l
351.6597 253.7842 351.6597 255.5962 V
351.647 268.1616 L
353.8633 268.1616 l
353.8633 263.292 l
354.2422 263.3818 354.5762 264.127 356.1177 264.1143 c
358.3149 264.0957 358.8545 262.2129 358.9316 261.4805 c
359.021 260.6309 359.0796 258.4609 359.0483 257.0771 C
356.8613 257.0283 L
f
U
373.2896 264.1177 m
371.3848 264.1948 371.1533 262.6143 370.8613 262.6016 c
370.7939 263.5654 370.707 264.0317 v
368.5869 264.0317 l
368.7412 263.1924 368.7412 261.4453 v
368.7412 259.6978 368.7412 252.8677 y
371.0151 252.8677 L
371.0151 259.4541 371.0151 260.2246 v
371.0151 261.0854 371.3335 262.1777 373.0322 262.2417 C
373.2896 264.1177 L
f
384.6948 262.4351 m
386.3262 262.4351 L
386.3262 264.0298 L
384.6948 264.0298 L
384.6948 265.6973 384.6948 266.9189 Y
382.5361 266.0195 l
382.5361 265.2197 382.5361 264.0298 V
381.1357 264.0298 L
381.1357 262.4351 L
382.5361 262.4351 L
382.5361 259.5015 382.5361 255.7515 382.5361 255.2148 c
382.5361 254.3149 382.5361 252.8755 384.9771 252.8755 c
385.3496 252.8755 386.3906 252.8755 y
386.3906 254.3921 l
385.6709 254.3921 385.4141 254.3921 v
385.0542 254.3921 384.6948 254.521 384.6948 255.6128 c
384.6948 256.2109 384.6948 259.542 384.6948 262.4351 C
f
399.7983 264.1182 m
398.1245 264.0527 397.9009 262.6138 397.6221 262.6016 c
397.5547 263.5654 397.4678 264.0317 v
395.3481 264.0317 l
395.5024 263.1924 395.5024 261.4453 v
395.5024 259.6978 395.5024 252.8677 y
397.7764 252.8677 L
397.7764 259.4541 397.7764 260.2246 v
397.7764 261.0854 398.0942 262.1777 399.7935 262.2417 C
399.7983 264.1182 L
f
402.7324 268.1577 m
400.498 268.1577 l
400.498 265.9023 l
402.7324 265.9023 l
402.7324 268.1577 l
f
u
407.2148 259.3755 m
405.9297 259.3755 L
405.9253 259.7822 405.9258 260.2134 405.9399 260.6729 c
405.9946 262.438 406.7524 262.562 407.3662 262.562 c
408.3071 262.562 408.8179 262.1895 408.8179 260.4678 c
408.8179 260.2798 408.8208 259.6245 408.7896 259.3755 C
407.2148 259.3755 L
407.2144 257.8403 L
411.0732 257.8457 L
411.0981 259.0347 411.0771 260.7373 410.9893 261.29 c
410.6553 263.3843 409.2417 264.1196 407.3662 264.1196 c
405.4902 264.1196 404.1797 263.3843 403.8457 261.29 c
403.6753 260.2217 403.7202 256.6694 403.9102 255.354 c
404.1108 253.9595 405.2881 252.688 407.3662 252.688 c
409.6016 252.688 410.7598 253.811 410.9248 255.4053 c
410.9668 255.8086 410.9795 255.9106 410.9961 256.3296 C
408.751 256.3179 L
408.7383 255.5479 408.7695 256.1875 408.7539 255.9131 c
408.6924 254.8657 408.5098 254.2554 407.3662 254.2554 c
406.2227 254.2554 406.0718 255.0894 406.0425 256.1572 c
406.0269 256.7417 406 257.2896 405.9766 257.8384 C
407.2144 257.8403 L
407.2148 259.3755 L
f
U
211.2568 258.0488 m
211.2979 259.894 211.2788 261.2896 211.2788 261.7544 c
211.2788 262.6768 211.3384 267.2515 210.8892 271.7358 c
210.6343 274.2793 209.7456 275.5757 206.7529 275.8647 c
202.2593 276.2988 197.7124 276.248 196.7803 276.248 c
195.9004 276.248 191.2998 276.3115 186.8071 275.8647 c
183.7637 275.5625 182.9141 274.1533 182.6709 271.7358 c
182.2183 267.2407 182.2813 262.6426 182.2813 261.7544 c
182.2813 260.8384 182.2012 256.2529 182.6709 251.7725 c
182.9409 249.1968 183.9351 247.9248 186.8071 247.6436 c
191.3003 247.2036 195.8667 247.2607 196.7803 247.2607 c
197.7124 247.2607 202.2603 247.1963 206.7529 247.6436 c
209.6772 247.9346 210.6279 249.2378 210.8892 251.7725 c
211.1187 253.9951 211.2163 256.2383 211.2568 258.0488 C
215.0732 258.0493 L
215.0347 256 214.9199 253.2671 214.6064 250.1675 c
214.291 247.0439 211.8652 244.3174 208.6499 243.9736 c
203.3965 243.4126 197.7466 243.4766 196.7803 243.4766 c
195.8667 243.4766 190.1577 243.396 184.9102 243.9736 c
181.5874 244.3398 179.2598 247.1782 178.9536 250.1675 c
178.3467 256.0908 178.4834 260.7998 178.4834 261.7544 c
178.4834 262.6768 178.3721 267.6929 178.9536 273.3408 c
179.2524 276.2441 181.6157 279.1377 184.9102 279.5347 c
190.1553 280.166 195.9004 280.0811 196.7803 280.0811 c
197.7124 280.0811 203.3188 280.1489 208.6499 279.5347 c
212.02 279.146 214.3267 276.1221 214.6064 273.3408 c
215.1763 267.6816 215.0767 262.6768 215.0767 261.7544 c
215.0767 261.3071 215.1094 259.9829 215.0732 258.0493 C
211.2568 258.0488 L
f
200.0591 273.665 m
200.2915 268.6143 l
207.7437 268.6143 L
207.8638 268.6143 208 268.5977 208.291 268.6655 C
208.6328 260.7998 208.3594 258.3374 208.2222 253.2871 C
204.8037 253.082 L
204.9409 255.2661 204.9746 257.2339 204.9746 258.4282 C
203.7271 258.394 L
203.6587 258.394 203.6162 258.4023 203.5308 258.3599 C
203.3682 263.1372 L
200.4624 263.1372 l
200.9067 249.5332 L
197.6099 249.3965 195.6611 249.3965 192.6533 249.5332 C
193.1235 263.1372 l
190.1919 263.1372 L
190.0293 258.3599 L
189.9443 258.4023 189.9014 258.394 189.833 258.394 C
188.585 258.4282 L
188.585 257.2339 188.6191 255.2661 188.7559 253.082 C
185.3374 253.2871 L
185.2007 258.3374 184.9272 260.7998 185.269 268.6655 C
185.5596 268.5977 185.6963 268.6143 185.8164 268.6143 C
193.3115 268.6143 l
193.4053 271.4126 l
190.5337 271.2998 L
190.6021 271.5049 190.6362 271.6069 190.6362 271.7095 C
190.7559 273.6377 L
190.7559 273.7739 190.7388 273.8936 190.6704 274.064 C
194.0005 274.2026 196.3374 274.2808 200.1396 274.1426 C
200.0967 273.8784 200.0591 273.7505 200.0591 273.665 C
f
u
418.606 260.6797 m
418.606 261.9922 418.6924 264.1382 415.3247 264.1382 c
412.4419 264.1382 411.8975 262.2749 411.8975 261.2881 c
411.8975 260.6128 411.8813 259.9873 413.0254 258.9365 c
413.6572 258.3564 415.0171 257.4297 415.6323 256.9917 c
415.8257 256.854 416.5859 256.312 416.5859 255.355 c
416.5859 254.2427 415.5581 254.2388 415.3418 254.2388 c
414.5029 254.2388 413.9985 254.5654 413.9282 255.4058 c
413.9004 255.7354 413.874 256.0054 413.874 256.3223 c
411.7148 256.3223 l
411.5317 254.8657 412.1123 253.9741 v
412.751 252.9927 414.1689 252.688 415.4185 252.688 c
416.2842 252.688 417.3198 252.8628 417.9844 253.5273 c
418.5015 254.0444 418.7407 254.6118 418.7407 255.7202 c
418.7407 256.6465 418.6152 257.3916 417.2744 258.4404 c
416.791 258.8184 415.7627 259.5117 415.2148 259.8716 c
414.5605 260.3008 414.1069 260.7241 414.1069 261.46 c
414.1069 262.2739 414.4761 262.5708 415.29 262.5708 c
416.104 262.5708 416.3911 262.0605 416.3911 261.1777 c
416.3911 261.0566 416.4087 260.6758 y
418.606 260.6797 l
f
U
u
231.1948 264.0239 m
231.1694 265.4063 231.1563 268.646 226.8755 268.646 c
222.5942 268.646 222.5298 265.4194 222.5298 264.6997 c
222.5298 263.6968 222.4141 262.0254 225.1782 260.4443 c
226.1626 259.8809 227.1074 259.3525 227.3896 259.1968 c
227.647 259.0557 229.0908 258.502 229.0352 256.6514 c
228.9707 254.5044 227.271 254.4561 227.0093 254.4561 c
226.0542 254.4561 224.9399 254.6699 224.7515 256.3687 c
224.7212 256.6392 224.6641 256.9648 224.6641 257.7573 c
222.1445 257.7573 l
222.0479 255.0659 223.25 253.8896 v
224.3271 252.8354 225.5381 252.6147 226.8237 252.6147 c
228.1094 252.6147 229.5493 252.8804 230.3701 253.7896 c
231.1626 254.668 231.4521 255.5313 231.4521 256.8315 c
231.4521 258.207 231.1304 259.7754 228.8164 261.1382 c
228.0771 261.5737 227.2866 261.9736 226.4639 262.4238 c
225.4438 262.9819 224.8955 263.7095 224.8955 264.8022 c
224.8955 266.0107 225.6157 266.8335 226.8237 266.8335 c
228.0322 266.8335 228.7266 266.1909 228.7266 264.8794 c
228.7266 264.6997 228.7524 264.0366 y
231.1948 264.0239 l
f
U
259.9912 268.1636 m
257.7441 268.1636 l
257.7441 265.9087 l
259.9912 265.9087 l
259.9912 268.1636 l
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
