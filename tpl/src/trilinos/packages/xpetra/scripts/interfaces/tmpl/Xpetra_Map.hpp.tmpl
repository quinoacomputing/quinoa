$TMPL_HEADERS

$TMPL_INCLUDES

namespace Xpetra {

  enum UnderlyingLib {
    UseEpetra,
    UseTpetra,
    NotSpecified
  };

  $TMPL_TEMPLATE_PARAM
  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

  public:

$TMPL_DESTRUCTOR

$TMPL_PUBLIC_FUNCTIONS

    //! @name Xpetra specific
    //@{

    //! Get the library used by this object (Tpetra or Epetra?)
    virtual UnderlyingLib lib() const = 0;

    // TODO: find a better solution for this hack
    // The problem is that EpetraMap, TpetraMap and StridedMap all inherit Map. To have proper toEpetra() we
    // need to understand the type of underlying matrix. But in src/Map we have no knowledge of StridedMaps, so
    // we cannot check for it by casting. This function allows us to avoid the restriction, as StridedMap redefines
    // it to return the base map.
    virtual RCP<const Map> getMap() const { return rcpFromRef(*this); }


    //@}

  }; // $TMPL_CLASS class

} // Xpetra namespace

$TMPL_FOOTERS
