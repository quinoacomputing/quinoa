$TMPL_HEADERS

#include "Xpetra_TpetraConfigDefs.hpp"

#include "Xpetra_Export.hpp"
#include "Xpetra_Exceptions.hpp"

#include "Xpetra_TpetraMap.hpp"
#include "Tpetra_Export.hpp"

// Note: 'export' is a reserved keyword in C++. Do not use 'export' as a variable name.

namespace Xpetra {

  // TODO: move that elsewhere
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const Tpetra::Export<LocalOrdinal,GlobalOrdinal,Node> & toTpetra(const Export<LocalOrdinal,GlobalOrdinal,Node> &);
  template <class LocalOrdinal, class GlobalOrdinal, class Node>-]
  RCP<const Export<LocalOrdinal,GlobalOrdinal,Node> > toXpetra(const RCP<const Tpetra::Export<LocalOrdinal,GlobalOrdinal,Node> >& exp);


  $TMPL_TEMPLATE_PARAM
  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

  public:

      //! The specialization of Map used by this class.
      typedef Map<LocalOrdinal,GlobalOrdinal,Node> map_type;

$TMPL_PUBLIC_FUNCTIONS

    //! @name Xpetra specific
    //@{

    //! TpetraExport constructor to wrap a Tpetra::Export object
    TpetraExport(const RCP<const Tpetra::Export< LocalOrdinal, GlobalOrdinal, Node > > &exp) : export_(exp) {  }

    RCP< const Tpetra::Export< LocalOrdinal, GlobalOrdinal, Node > > getTpetra_Export() const { return export_; }

    //@}

  private:

    RCP<const Tpetra::Export< LocalOrdinal, GlobalOrdinal, Node > > export_;

  }; // $TMPL_CLASS class

  // TODO: move that elsewhere
  template <class LocalOrdinal, class GlobalOrdinal, class Node>
  const Tpetra::Export<LocalOrdinal,GlobalOrdinal,Node> & toTpetra(const Export<LocalOrdinal,GlobalOrdinal,Node> &exp) {
    // TODO: throw exception
    const TpetraExport<LocalOrdinal,GlobalOrdinal,Node> & tpetraExport = dynamic_cast<const TpetraExport<LocalOrdinal,GlobalOrdinal,Node> &>(exp);
    return *tpetraExport.getTpetra_Export();
  }

  template<class LocalOrdinal, class GlobalOrdinal, class Node>
  RCP<const Export<LocalOrdinal,GlobalOrdinal,Node> > toXpetra(const RCP<const Tpetra::Export<LocalOrdinal,GlobalOrdinal,Node> >& exp) {
    if (!exp.is_null())
      return rcp(new TpetraExport<LocalOrdinal,GlobalOrdinal,Node>(exp));

    return Teuchos::null;
  }

} // Xpetra namespace

$TMPL_FOOTERS
