$TMPL_HEADERS

#include "Xpetra_EpetraConfigDefs.hpp"

#include "Xpetra_Export.hpp"

#include "Xpetra_EpetraMap.hpp"//TMP

#include "Epetra_Export.h"

// Note: 'export' is a reserved keyword in C++. Do not use 'export' as a variable name.

namespace Xpetra {

  // TODO: move that elsewhere
  const Epetra_Export & toEpetra(const Export<int, int> &);
  RCP<const Export<int, int> > toXpetra(const Epetra_Export *exp);

  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

    typedef int LocalOrdinal;
    typedef int GlobalOrdinal;
    typedef Export<int, int>::node_type Node;
    //! The specialization of Map used by this class.
    typedef Map<LocalOrdinal,GlobalOrdinal,Node> map_type;

  public:

$TMPL_PUBLIC_FUNCTIONS

    //! @name Xpetra specific
    //@{

    //! EpetraExport constructor to wrap a Epetra_Export object
    EpetraExport(const RCP<const Epetra_Export> &exp) : export_(exp) {  }

    //! Get the underlying Epetra export
    RCP< const Epetra_Export> getEpetra_Export() const { return export_; }

    //@}

  private:

    RCP<const Epetra_Export> export_;

  }; // EpetraExport class

} // Xpetra namespace

$TMPL_FOOTERS
