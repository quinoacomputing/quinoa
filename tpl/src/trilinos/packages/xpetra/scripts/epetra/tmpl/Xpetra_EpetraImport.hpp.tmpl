$TMPL_HEADERS

#include "Xpetra_EpetraConfigDefs.hpp"

#include "Xpetra_Import.hpp"

#include "Xpetra_EpetraMap.hpp"//TMP

#include "Epetra_Import.h"

namespace Xpetra {

  // TODO: move that elsewhere
  //   const Epetra_Import & toEpetra(const Import<int, int> &);

  RCP< const Import<int, int > > toXpetra(const Epetra_Import *import);
  //

  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

    typedef int LocalOrdinal;
    typedef int GlobalOrdinal;
    typedef Import<int, int>::node_type Node;
    //! The specialization of Map used by this class.
    typedef Map<LocalOrdinal,GlobalOrdinal,Node> map_type;

  public:

$TMPL_PUBLIC_FUNCTIONS

    //! List of entries in the target Map to receive from other processes.
    ArrayView< const LocalOrdinal > getRemotePIDs() const;

    //! @name Xpetra specific
    //@{

    //! EpetraImport constructor to wrap a Epetra_Import object
    EpetraImport(const RCP<const Epetra_Import> &import) : import_(import) { }

    //! Get the underlying Epetra import
    RCP< const Epetra_Import> getEpetra_Import() const { return import_; }

    //@}

  private:

    RCP<const Epetra_Import> import_;

  }; // EpetraImport class

} // Xpetra namespace

$TMPL_FOOTERS
