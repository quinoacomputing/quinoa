#!/bin/sh
#
# This hook is based on the example hook that comes with git (as of
# version 1.6.x) in contrib/hooks/post-receive-email
#
# CONFIGURATION
# -------------
#
# This script uses configuration data stored in the standard git-config file
#
# hooks.mailinglist
#   This is the list that all pushes will go to; leave it blank to not send
#   emails for every ref update.
# hooks.envelopesender
#   If set then the -f option is passed to sendmail to allow the envelope
#   sender address to be set
# hooks.emailprefix
#   All emails have their subjects prefixed with this prefix, or ""
#   if emailprefix is unset.  Set this to aid filtering
# hooks.emailfooter
#   Additional lines to be included in the foot of the email
#   Multiple entries can be stored in the git config file for multiple lines
#
# A brief description of the project should be placed in $GIT_DIR/description.
# This description file is also used by GitWeb
#
# INSTALLATION
# ------------
# Change the $GIT_DIR/hooks/post-receive script to call this script.
# Note, that $GIT_DIR/hooks/post-receive is called from the $GIT_DIR
# directory so paths are relative to $GIT_DIR.  Also, make sure the
# post-receive script is executable.
#
# NOTES
# -----
# All emails include the headers "X-Git-Refname", "X-Git-Oldrev",
# "X-Git-Newrev", "X-Git-Reftype" and "X-Git-Repository" to enable fine
# tuned filtering and give information for debugging.
#
# DIFFERENCES FROM THE ORIGINAL SCRIPT
# ------------------------------------
# If you care... The original script jumped through extra hoops to make sure
# the log info for commit messages was only ever sent once.  For example, if
# a push added existing commits to a different branch, it would not list thos
# commit messages in the email.  Here, we always list the commit messages for
# all the commits that change a branch.
#
# Additionally, much of the script has been re-structured to be more clear
# about what exactly happens in all the different cases that are handled,
# possibly at the expense of introducing redundant code.
#
# Unused config options (annoucements list) were removed.  And the output
# is much less geeky (far fewer sha1s)

# ---------------------------- Functions
#
# Top level email generation function.  This decides what type of update
# this is and calls the appropriate body-generation routine after outputting
# the common header
#
# Note this function doesn't actually generate any email output, that is
# taken care of by the functions it calls:
#  - generate_email_header
#  - generate_create_XXXX_email
#  - generate_update_XXXX_email
#  - generate_delete_XXXX_email
#  - generate_email_footer
#
parse_rev_info()
{
    # --- Arguments
    oldrev=$(git rev-parse $1)
    newrev=$(git rev-parse $2)
    refname="$3"

    # --- Interpret
    # 0000->1234 (create)
    # 1234->2345 (update)
    # 2345->0000 (delete)
    if expr "$oldrev" : '0*$' >/dev/null
    then
        change_type="create"
    else
        if expr "$newrev" : '0*$' >/dev/null
        then
            change_type="delete"
        else
            change_type="update"
        fi
    fi

    # --- Get the revision types
    newrev_type=$(git cat-file -t $newrev 2> /dev/null)
    oldrev_type=$(git cat-file -t "$oldrev" 2> /dev/null)
    case "$change_type" in
    create|update)
        rev="$newrev"
        rev_type="$newrev_type"
        ;;
    delete)
        rev="$oldrev"
        rev_type="$oldrev_type"
        ;;
    esac

    # The revision type tells us what type the commit is, combined with
    # the location of the ref we can decide between
    #  - working branch
    #  - tracking branch
    #  - unannoted tag
    #  - annotated tag
    case "$refname","$rev_type" in
        refs/tags/*,commit)
            # un-annotated tag
            refname_type="tag"
            short_refname=${refname##refs/tags/}
            ;;
        refs/tags/*,tag)
            # annotated tag
            refname_type="annotated tag"
            short_refname=${refname##refs/tags/}
            ;;
        refs/heads/*,commit)
            # branch
            refname_type="branch"
            short_refname=${refname##refs/heads/}
            ;;
        refs/remotes/*,commit)
            # tracking branch
            refname_type="tracking branch"
            short_refname=${refname##refs/remotes/}
            echo >&2 "*** Push-update of tracking branch, $refname"
            echo >&2 "***  - no email generated."
            return 1
            ;;
        *)
            # Anything else (is there anything else?)
            echo >&2 "*** Unknown type of update to $refname ($rev_type)"
            echo >&2 "***  - no email generated"
            return 1
            ;;
    esac
}
generate_email()
{

	# Call the correct body generation function
	fn_name=general
	case "$refname_type" in
	"tracking branch"|branch)
		fn_name=branch
		;;
	"annotated tag")
		fn_name=atag
		;;
	esac
	generate_${change_type}_${fn_name}_email
}

generate_email_footer()
{
	SPACE=" "
	cat <<-EOF

	----${SPACE}
	$projectdesc
	Git repository: $repo_location
	EOF
    git config --get-all hooks.emailfooter
}

# --------------- Branches

#
# Called for the creation of a branch
#
generate_create_branch_email()
{
	# Generate header
	cat <<-EOF
	To: $recipients
	From: $email_from
	Subject: ${emailprefix}$USER created a new branch: $short_refname
	X-Git-Repository: $repo_location
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	$USER created the branch "$short_refname"

	EOF

	# Always show the latest commit that defines the current tip
	# of this branch and then show any additional commits that are new
	echo "The commit for the tip of this branch plus any other new commits:"
	echo $hrule
	echo ""
	git rev-list --pretty -n 1 $newrev

	# jump through extra hoops to not see commits that were already
	# in the repository
	other_branches=$(git for-each-ref --format='%(refname)' refs/heads/ |
	    grep -F -v $refname)
	git rev-parse --not $other_branches |
	    git rev-list --pretty --stdin $newrev~1

	generate_email_footer
}

#
# Called for the change of a pre-existing branch

generate_update_branch_email()
{
	# Consider this:
	#   1 --- 2 --- O --- X --- 3 --- 4 --- N
	#
	# O is $oldrev for $refname
	# N is $newrev for $refname
	# X is a revision pointed to by some other ref, for which we may
	#   assume that an email has already been generated.
	# In this case we want to issue an email containing only revisions
	# 3, 4, and N.  Given (almost) by
	#
	#  git rev-list N ^O --not --all
	#
	# The reason for the "almost", is that the "--not --all" will take
	# precedence over the "N", and effectively will translate to
	#
	#  git rev-list N ^O ^X ^N
	#
	# So, we need to build up the list more carefully.  git rev-parse
	# will generate a list of revs that may be fed into git rev-list.
	# We can get it to make the "--not --all" part and then filter out
	# the "^N" with:
	#
	#  git rev-parse --not --all | grep -v N
	#
	# Then, using the --stdin switch to git rev-list we have effectively
	# manufactured
	#
	#  git rev-list N ^O ^X
	#
	# This leaves a problem when someone else updates the repository
	# while this script is running.  Their new value of the ref we're
	# working on would be included in the "--not --all" output; and as
	# our $newrev would be an ancestor of that commit, it would exclude
	# all of our commits.  What we really want is to exclude the current
	# value of $refname from the --not list, rather than N itself.  So:
	#
	#  git rev-parse --not --all | grep -v $(git rev-parse $refname)
	#
	# Get's us to something pretty safe (apart from the small time
	# between refname being read, and git rev-parse running - for that,
	# I give up)
	#
	#
	# Next problem, consider this:
	#   * --- B --- * --- O ($oldrev)
	#          \
	#           * --- X --- * --- N ($newrev)
	#
	# That is to say, there is no guarantee that oldrev is a strict
	# subset of newrev (it would have required a --force, but that's
	# allowed).  So, we can't simply say rev-list $oldrev..$newrev.
	# Instead we find the common base of the two revs and list from
	# there.
	#
	# As above, we need to take into account the presence of X; if
	# another branch is already in the repository and points at some of
	# the revisions that we are about to output - we don't want them.
	# The solution is as before: git rev-parse output filtered.
	#
	# Finally, tags: 1 --- 2 --- O --- T --- 3 --- 4 --- N
	#
	# Tags pushed into the repository generate nice shortlog emails that
	# summarise the commits between them and the previous tag.  However,
	# those emails don't include the full commit messages that we output
	# for a branch update.  Therefore we still want to output revisions
	# that have been output on a tag email.
	#
	# Luckily, git rev-parse includes just the tool.  Instead of using
	# "--all" we use "--branches"; this has the added benefit that
	# "remotes/" will be ignored as well.

	test -z "${MAIL_TO}" && test -f hooks/dirs_to_emails && test -x hooks/get_recipients.py \
              && recipients=$(hooks/get_recipients.py $oldrev $newrev $refname)

        # Update the push log file
        test -x hooks/update_push_log.py && ./hooks/update_push_log.py $oldrev $newrev 

	# Generate header
	cat <<-EOF
	To: $recipients
	From: $email_from
	Subject: ${emailprefix}$USER pushed to $short_refname
	X-Git-Repository: $repo_location
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	EOF

	# List all of the revisions that were removed by this update, in a
	# fast forward update, this list will be empty, because rev-list O
	# ^N is empty.  For a non fast forward, O ^N is the list of removed
	# revisions
	fast_forward=1
	rev=""
	for rev in $(git rev-list $newrev..$oldrev)
	do
		if test -n "$fast_forward"; then
			fast_forward=""
			echo "WARNING: THIS IS A NON-FAST-FORWARD UPDATE"
		fi
		revtype=$(git cat-file -t "$rev")
		echo "  discards  $rev ($revtype)"
	done

	if test -z "$fast_forward"; then
		#  1. Existing revisions were removed.  In this case newrev
		#     is a subset of oldrev - this is the reverse of a
		#     fast-forward, a rewind
		#  2. New revisions were added on top of an old revision,
		#     this is a rewind and addition.

		# (1) certainly happened, (2) possibly.  When (2) hasn't
		# happened, we set a flag to indicate that no log printout
		# is required.

		# Find the common ancestor of the old and new revisions and
		# compare it with newrev
		baserev=$(git merge-base $oldrev $newrev)
		rewind_only=""
		if [ "$baserev" = "$newrev" ]; then
			echo ""
			echo "This update discarded existing revisions and left the branch pointing at"
			echo "a previous point in the repository history."
			echo ""
			echo " * -- * -- N ($newrev)"
			echo "            \\"
			echo "             O -- O -- O ($oldrev)"
			echo ""
			echo "The removed revisions are not necessarilly gone - if another reference"
			echo "still refers to them they will stay in the repository."
			echo ""
			rewind_only=1
		else
			echo ""
			echo "This update added new revisions after undoing existing revisions.  That is"
			echo "to say, the old revision is not a strict subset of the new revision.  This"
			echo "situation occurs when you --force push a change and generate a repository"
			echo "containing something like this:"
			echo ""
			echo " * -- * -- B -- O -- O -- O ($oldrev)"
			echo "            \\"
			echo "             N -- N -- N ($newrev)"
			echo ""
			echo "When this happens we assume that you've already had alert emails for all"
			echo "of the O revisions, and so we here report only the revisions in the N"
			echo "branch from the common base, B."
			echo ""
		fi
	fi

	if test -z "$rewind_only"; then
		echo "$USER pushed the following commits to the \"$short_refname\" branch:"
		echo ""
		git rev-list --pretty $oldrev..$newrev
	else
		echo "No new revisions were added by this update."
	fi

	# The diffstat is shown from the old revision to the new revision.
	# This is to show the truth of what happened in this change.
	# There's no point showing the stat from the base to the new
	# revision because the base is effectively a random revision at this
	# point - the user will be interested in what this revision changed
	# - including the undoing of previous revisions in the case of
	# non-fast forward updates.
	echo $hrule
	echo ""
    cmd="git diff-tree --stat --summary $oldrev..$newrev"
    lines_of_output=$($cmd | wc -l)
    if test $lines_of_output -lt 50 ; then
       echo "Summary of changes:"
       $cmd
    else
        cmd="git diff-tree --dirstat $oldrev..$newrev"
        lines_of_output=$($cmd | wc -l)
        if test $lines_of_output -lt 50 ; then
           echo "Limited summary of changes (large patch):"
           $cmd
        else
            echo "Really large patch -- summary omitted."
        fi
	fi

	generate_email_footer
}

#
# Called for the deletion of a branch
#
generate_delete_branch_email()
{
	# Generate header
	cat <<-EOF
	To: $recipients
	From: $email_from
	Subject: ${emailprefix}$USER deleted branch: $short_refname
	X-Git-Repository: $repo_location
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	$USER deleted the branch "$short_refname"

	EOF

	echo "The last commit that was on that branch:"
	echo $hrule
	git rev-list -n 1 --pretty $oldrev

	generate_email_footer
}

# --------------- Annotated tags

#
# Called for the creation of an annotated tag
#
generate_create_atag_email()
{
	# Generate header
	cat <<-EOF
	To: $recipients
	From: $email_from
	Subject: ${emailprefix}$USER created a new tag: $short_refname
	X-Git-Repository: $repo_location
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	$USER created the tag "$short_refname"
	EOF

	generate_atag_email

	generate_email_footer
}

#
# Called for the update of an annotated tag (this is probably a rare event
# and may not even be allowed)
#
generate_update_atag_email()
{
	# Generate header
	cat <<-EOF
	To: $recipients
	From: $email_from
	Subject: ${emailprefix}$USER updated the tag $short_refname
	X-Git-Repository: $repo_location
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	$USER updated the tag "$short_refname"
	EOF
	echo "      from  $oldrev (which is now obsolete)"
	echo "        to  $newrev ($newrev_type)"

	generate_atag_email

	generate_email_footer
}

#
# Called when an annotated tag is created or changed
#
generate_atag_email()
{
	# Use git for-each-ref to pull out the individual fields from the
	# tag
	eval $(git for-each-ref --shell --format='
	tagobject=%(*objectname)
	tagtype=%(*objecttype)
	tagger=%(taggername)
	tagged=%(taggerdate)' $refname
	)

	echo "   tagging  $tagobject ($tagtype)"
	if test "$tagtype" = commit; then
		# If the tagged object is a commit, then we assume this is a
		# release, and so we calculate which tag this tag is
		# replacing
		prevtag=$(git describe --abbrev=0 $newrev^ 2>/dev/null)
		if [ -n "$prevtag" ]; then
			echo "  replaces  $prevtag"
		fi
	else
		echo "    length  $(git cat-file -s $tagobject) bytes"
	fi
	echo " tagged by  $tagger"
	echo "        on  $tagged"

	echo ""

	# Show the content of the tag message; this might contain a change
	# log or release notes so is worth displaying.
	echo "Tag message:"
	echo $hrule
	git cat-file tag $newrev | sed -e '1,/^$/d'
	echo $hrule

	if test "$tagtype" = commit; then
		echo ""
		echo "Commit this tag points to:"
		echo $hrule
		git rev-list -n 1 --pretty $newrev
	fi
}

#
# Called for the deletion of an annotated tag
#
generate_delete_atag_email()
{
	# Generate header
	cat <<-EOF
	To: $recipients
	From: $email_from
	Subject: ${emailprefix}$USER deleted the tag $short_refname
	X-Git-Repository: $repo_location
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	$USER deleted the tag "$short_refname"

	EOF

	echo "The commit for this tag was:"
	echo $hrule
	git rev-list -n1 --pretty $oldrev
	echo $hrule

	generate_email_footer
}

# --------------- General references

#
# Called when any other type of reference is created (most likely a
# non-annotated tag)
#
generate_create_general_email()
{
	# Generate header
	cat <<-EOF
	To: $recipients
	From: $email_from
	Subject: ${emailprefix}$USER created $refname_type: $short_refname
	X-Git-Repository: $repo_location
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	$USER created the $refname_type "$short_refname"
	EOF

	echo "        at  $newrev ($newrev_type)"

	generate_general_email

	generate_email_footer
}

#
# Called when any other type of reference is updated (most likely a
# non-annotated tag)
#
generate_update_general_email()
{
	# Generate header
	cat <<-EOF
	To: $recipients
	From: $email_from
	Subject: ${emailprefix}$USER updated $refname_type: $short_refname
	X-Git-Repository: $repo_location
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	$USER updated the $refname_type "$short_refname"
	EOF

	echo "      from  $oldrev"
	echo "        to  $newrev ($newrev_type)"

	generate_general_email

	generate_email_footer
}

#
# Called for creation or update of any other type of reference
#
generate_general_email()
{
	# Unannotated tags are more about marking a point than releasing a
	# version; therefore we don't do the shortlog summary that we do for
	# annotated tags above - we simply show that the point has been
	# marked, and print the log message for the marked point for
	# reference purposes
	#
	# Note this section also catches any other reference type (although
	# there aren't any) and deals with them in the same way.

	echo ""
	if [ "$newrev_type" = "commit" ]; then
		echo $hrule
		git show --no-color --root -s --pretty=medium $newrev
		echo $hrule
	else
		# What can we do here?  The tag marks an object that is not
		# a commit, so there is no log for us to display.  It's
		# probably not wise to output git cat-file as it could be a
		# binary blob.  We'll just say how big it is
		echo "$newrev is a $newrev_type, and is $(git cat-file -s $newrev) bytes long."
	fi
}

#
# Called for the deletion of any other type of reference
#
generate_delete_general_email()
{
	# Generate header
	cat <<-EOF
	To: $recipients
	From: $email_from
	Subject: ${emailprefix}$USER deleted $refname_type: $short_refname
	X-Git-Repository: $repo_location
	X-Git-Refname: $refname
	X-Git-Reftype: $refname_type
	X-Git-Oldrev: $oldrev
	X-Git-Newrev: $newrev

	$USER deleted the $refname_type "$short_refname"
	EOF

	echo "       was  $oldrev"
	echo ""
	echo $hrule
	git show -s --pretty=oneline $oldrev
	echo $hrule

	generate_email_footer
}

send_mail()
{
    if [ -n "${NO_SEND_FLAG}" ]; then cat - ; return; fi

	test -n "$envelopesender" && es="-f \"$envelopesender\""

        # In noop mode cat stdin to stdout, then echo the sendmamil command.
        # This will display the message and the command, w/o actually sending anything.
        # Note that this will only work when this function is used as a filter.
	test -n "${NOOP_FLAG}" && cat -
        ${NOOP_FLAG:+echo ' | '}/usr/sbin/sendmail -t ${es}
}

# ---------------------------- main()

USAGE="\
$(basename $0) [options ...] [-|{<oldrev> <newrev> <refname>}]\n\
\n\
   Options:\n\
   --help              : Print usage.\n\
   --verbose           : Sets the -x option.\n\
   --quiet             : Does anything that might be chatty quietly.\n\
   --noop              : Do everything, but echo the sendmail command.\n\
   --user=USER         : User name to use in subject other than current USER.\n\
   --no-send           : When invoked via the hook, write to stdout instead of sending the email.\n\
   --envelopesender=a  : Email address to use as the envelopesender.\n\
   --mail-to=a[,...]   : Comma separated list of email address to use instest of that read from config.\n\
"

# Process command line options.
while [ $# -gt 0 ]
do
    case $1 in
        -u|--user|--user=*)
            opt=${1}
            opt_name=${opt%%=*}
            shift
            if [ $opt = $opt_name ]
            then
                opt_arg=${1:?${opt}: Missing option argument}
                shift
            else
                opt_arg=${opt#${opt_name}=}
            fi
            USER=${opt_arg}
            ;;

        --mail-to|--mail-to=*|--mailto|--mailto=*|--to|--to=*|recipients|recipients=*)
            opt=${1}
            opt_name=${opt%%=*}
            shift
            if [ $opt = $opt_name ]
            then
                opt_arg=${1:?${opt}: Missing option argument}
                shift
            else
                opt_arg=${opt#${opt_name}=}
            fi
            MAIL_TO="${MAIL_TO}${MAIL_TO:+,}${opt_arg}"
            ;;

        --from|--from=*|--envelopesender|--envelopesender=*)
            opt=${1}
            opt_name=${opt%%=*}
            shift
            if [ $opt = $opt_name ]
            then
                opt_arg=${1:?${opt}: Missing option argument}
                shift
            else
                opt_arg=${opt#${opt_name}=}
            fi
            FROM="${opt_arg}"
            ;;

        --no-send)
            NO_SEND_FLAG=${1}
            shift
            ;;

        --noop|--no-op)
            NOOP_FLAG=${1}
            shift
            ;;

        --quiet)
            QUIET_FLAG=${1}
            set -
            shift
            ;;
        -v|--verbose)
            VERBOSE_FLAG=${1}
            set -xv
            shift
            ;;
        -h|--help)
            echo -e USAGE: "$USAGE"
            exit 0
            ;;

        # A single '-' is the traditional options indicatin that the script should
        # read its input from stdin. If we find one, discard all remaining command line
        # parameters and options.
        -)  shift $#
            break
            ;;

        # This is an explicit directive to stop processing options.
        --) shift
            break
            ;;

        # Report unknown options.
        -*) echo -e USAGE: "$USAGE"
            echo "${toolName}: ${1} : Unknown option"
            exit 1
            ;;

        # Anything else is a parameter. Stop processing the command line now.
        *)  break
            ;;
    esac
done

# This script can handle three parameters, or none, but nothing else
if [ $# -eq 3 ]
then
    oldrev_arg="${1:?oldrev parameter null or not set}"
    newrev_arg="${2:?newrev parameter null or not set}"
    refname_arg="${3:?refname parameter null or not set}"
elif [ $# -ne 0 ]
then
    echo -e USAGE: "$USAGE"
    echo "${toolName}: $# : Incorrect number of parameters"
    exit 1
fi

# --- Config
# Set GIT_DIR either from the working directory, or from the environment
# variable.
GIT_DIR=$(git rev-parse --git-dir 2>/dev/null)
if [ -z "$GIT_DIR" ]
then
    echo >&2 "fatal: post-receive: GIT_DIR not set"
    exit 1
fi

if $(git rev-parse --is-bare-repository); then
    repo_root=$(pwd)
else
    repo_root=$(dirname $(pwd))
fi
repo_location=$(uname -n):$repo_root
email_from="$USER"

projectdesc=$(sed -ne '1p' "$GIT_DIR/description")
# Check if the description is unchanged from it's default, and shorten it to
# a more manageable length if it is
if expr "$projectdesc" : "Unnamed repository.*$" >/dev/null
then
    projectdesc="UNNAMED PROJECT"
fi

envelopesender=$(git config hooks.envelopesender)
emailprefix=$(git config hooks.emailprefix || echo '')
recipients=$(git config hooks.mailinglist)

hrule="-------------------------------------------------------------------------------"

# Now apply command line options:
test -n "${MAIL_TO}" && recipients=${MAIL_TO}
test -n "${FROM}" && envelopesender=${FROM}
test -n "${USER}" && export USER

# Check if we've got anyone to send to
if [ -z "$recipients" ]
then
    echo >&2 "*** hooks.mailinglist is not set so no email will be sent"
    echo >&2 "*** for $refname_arg update $oldrev_arg->$newrev_arg"
    exit  1
fi

# --- Main loop
# Allow dual mode: run from the command line just like the update hook, or
# if no parameters are given then run as a hook script
if [ -n "$oldrev_arg" -a -n "$newrev_arg" -a -n "$refname_arg" ]; then
    # Output to the terminal in command line mode - if someone wanted to
    # resend an email; they could redirect the output to sendmail
    # themselves
    parse_rev_info $oldrev_arg $newrev_arg $refname_arg || exit $?
    generate_email | send_mail
else
    while read oldrev_arg newrev_arg refname_arg
    do
        parse_rev_info $oldrev_arg $newrev_arg $refname_arg || exit $?
        generate_email | send_mail
    done
fi
