These fixtures are used in the use cases, unit tests, and performance tests.
They represent some simple flexible ways to generate meshes and distribute them
in parallel.

GridFixture
  Two dimensional
  4x4 faces (shards Quadrilaterals)
  25 nodes
  Two parts:  quad_part and dead_part
  No fields are defined 
  Parallel distribution is fixed:
    processor p_i gets face ids:
      p_i*16/p_N .. (p_i+1)*16/p_N
    where p_N = number of processors


QuadFixture
  Two dimensional
  NX by NY elements (shards Quadrilaterals)
  One part:  quad_part
  Two fields:  Coordinates and GatherCoordinates
  Default parallel distrubtion:
    processor p_i gets element ids:
      1+NX*NY*p_i/p_N .. 1+NX*NY*(p_i+1)/p_N
    where p_N = number of processors
    Arbitrary parallel distribution is supported
      by specifying which processor creates which elements in a vector.


HexFixture
  Three dimensional
  NX by NY by NZ elements (shards Hexahedrons)
  One part:  hex_part
  Two fields:  Coordinates and GatherCoordinates
  Default parallel distrubtion:
    processor p_i gets element ids:
      1+NX*NY*NZ*p_i/p_N .. 1+NX*NY*NZ*(p_i+1)/p_N
    where p_N = number of processors
    Arbitrary parallel distribution is supported
      by specifying which processor creates which elements in a vector.

SelectorFixture
  Non-dimensional
  5 nodes
  Four parts:  PartA, PartB, PartC, PartD
  Serial only



