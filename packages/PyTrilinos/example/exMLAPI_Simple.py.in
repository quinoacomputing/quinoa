#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ***********************************************************************
#
#          PyTrilinos: Python Interfaces to Trilinos Packages
#                 Copyright (2014) Sandia Corporation
#
# Under the terms of Contract DE-AC04-94AL85000 with Sandia
# Corporation, the U.S. Government retains certain rights in this
# software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Questions? Contact William F. Spotz (wfspotz@sandia.gov)
#
# ***********************************************************************
# @HEADER

#
# System imports
from   optparse import *
import sys

#
# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-t", "--testharness", action="store_true",
                  dest="testharness", default=False,
                  help="test local build modules; prevent loading system-installed modules")
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

#
# Under normal usage, simply use 'from PyTrilinos import Epetra'.  For testing,
# we want to be able to control whether we import from the build directory or
# from a system-installed version of PyTrilinos.
from testutil import fromPyTrilinosImport
Epetra  = fromPyTrilinosImport('Epetra' , options.testharness)
Galeri  = fromPyTrilinosImport('Galeri' , options.testharness)
AztecOO = fromPyTrilinosImport('AztecOO', options.testharness)
ML      = fromPyTrilinosImport('ML'     , options.testharness)

def main(comm):

  # builds the linear system matrix and sets up starting solution and
  # right-hand side
  nx = 100
  ny = 100 * comm.NumProc()

  List = {
    "nx": nx,               # number of nodes in the X-direction
    "ny": ny,               # number of nodes in the Y-directioN
    "mx": 1,                # number of processors in the X-direction
    "my": comm.NumProc()    # number of processors in the Y-direction
  }

  Map = Galeri.CreateMap("Cartesian2D", comm, List)
  Matrix = Galeri.CreateCrsMatrix("Laplace2D", Map, List)

  LHS = Epetra.Vector(Map); LHS.Random()
  RHS = Epetra.Vector(Map); RHS.PutScalar(0.0)

  # sets up the parameters for ML using a python dictionary
  MLList = {
    "max levels"        : 3, 
    "output"            : 10,
    "smoother: type"    : "symmetric Gauss-Seidel",
    "aggregation: type" : "Uncoupled",
    "ML validate parameter list" : False
    }

  # creates the preconditioner and computes it
  Prec = ML.MultiLevelPreconditioner(Matrix, False)
  Prec.SetParameterList(MLList)
  Prec.ComputePreconditioner()

  # sets up the solver, specifies Prec as preconditioner, and
  # solves using CG.
  Solver = AztecOO.AztecOO(Matrix, LHS, RHS)
  Solver.SetPrecOperator(Prec)
  Solver.SetAztecOption(AztecOO.AZ_solver, AztecOO.AZ_cg);
  Solver.SetAztecOption(AztecOO.AZ_output, 16);
  err = Solver.Iterate(1550, 1e-5)

  return err

if __name__ == "__main__":
  comm = Epetra.PyComm()
  err = main(comm)
  errs = comm.SumAll(err)
  if errs == 0 and comm.MyPID() == 0: print "End Result: TEST PASSED"
  sys.exit(errs)
