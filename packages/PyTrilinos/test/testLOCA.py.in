#! ${PYTHON_EXECUTABLE}
# -*- python -*-

# @HEADER
# ************************************************************************
#
#                PyTrilinos.LOCA: Python Interface to LOCA
#                   Copyright (2005) Sandia Corporation
#
# Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
# license for use of this work by or on behalf of the U.S. Government.
#
# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of the
# License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# Questions? Contact Bill Spotz (wfspotz@sandia.gov)
#
# ************************************************************************
# @HEADER

#
# System imports
import sys

#try:
import setpath
import LOCA
print dir(LOCA)
#except ImportError:
#    from PyTrilinos import LOCA
#    print >>sys.stderr, "Using system-installed LOCA"

import unittest

################################################################################

class ParameterVectorTestCase(unittest.TestCase):
    "TestCase for LOCA.ParameterVector"

    def setUp(self):
        self.pv = LOCA.ParameterVector()
        self.pv.addParameter("Zero"     )
        self.pv.addParameter("One", 1.0 )
        self.pv.addParameter("Pi" , 3.14)

    def testAddParameterNoValue(self):
        "Test LOCA.ParameterVector addParameter method with no value"
        self.assertEquals(self.pv.getValue("Zero"), 0.0)

    def testAddParameterWithValue(self):
        "Test LOCA.ParameterVector addParameter method with given value"
        self.assertEquals(self.pv.getValue("One"), 1.0)

    def testInit(self):
        "Test LOCA.ParameterVector init method"
        result = self.pv.init(2.0)
        self.assert_(result)
        self.assertEquals(self.pv.getValue("Zero"), 2.0)
        self.assertEquals(self.pv.getValue("One" ), 2.0)
        self.assertEquals(self.pv.getValue("Pi"  ), 2.0)

    def testScale(self):
        "Test LOCA.ParameterVector scale method"
        result = self.pv.scale(2.0)
        self.assert_(result)
        self.assertEquals(self.pv.getValue("Zero"), 0.0 )
        self.assertEquals(self.pv.getValue("One" ), 2.0 )
        self.assertEquals(self.pv.getValue("Pi"  ), 6.28)

    def testOperatorEquals(self):
        "Test LOCA.ParameterVector operator= method"
        newPV = self.pv
        self.assertEquals(newPV.getValue("Zero"), 0.0 )
        self.assertEquals(newPV.getValue("One" ), 1.0 )
        self.assertEquals(newPV.getValue("Pi"  ), 3.14)

    def testSetGetInt(self):
        "Test LOCA.ParameterVector setValue & getValue methods with integer key"
        self.pv.setValue(2,2.0)
        self.assertEquals(self.pv.getValue(2), 2.0)

    def testSetGetString(self):
        "Test LOCA.ParameterVector setValue & getValue methods with string key"
        self.pv.setValue("Pi",2.0)
        self.assertEquals(self.pv.getValue("Pi"), 2.0)

    def testGetIndex(self):
        "Test LOCA.ParameterVector getIndex method"
        index = self.pv.getIndex("One")
        self.assertEquals(index, 1)

    def testIsParameter(self):
        "Test LOCA.ParameterVector isParameter method"
        self.assert_(self.pv.isParameter("Zero"))
        self.assert_(self.pv.isParameter("One" ))
        self.assert_(self.pv.isParameter("Pi"  ))
        self.assert_(not self.pv.isParameter("Two"))

    def testGetLabel(self):
        "Test LOCA.ParameterVector getLabel method"
        self.assertEquals(self.pv.getLabel(0), "Zero")
        self.assertEquals(self.pv.getLabel(1), "One" )
        self.assertEquals(self.pv.getLabel(2), "Pi"  )

    def testLength(self):
        "Test LOCA.ParameterVector length method"
        self.assertEquals(self.pv.length(), 3)

################################################################################

if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(ParameterVectorTestCase ))

    # Create a communicator
    #comm = Epetra.PyComm()

    # Run the test suite
    #if comm.MyPID() == 0:
    print >>sys.stderr, \
          "\n****************************\nTesting LOCA.ParameterVector\n****************************\n"
    verbosity = options.verbosity #* int(comm.MyPID() == 0)
    result = unittest.TextTestRunner(verbosity=verbosity).run(suite)

    # Exit with a code that indicates the total number of errors and failures
    sys.exit(len(result.errors) + len(result.failures))
