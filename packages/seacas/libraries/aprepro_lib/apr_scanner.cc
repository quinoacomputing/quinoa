#line 2 "apr_scanner.cc"

#line 4 "apr_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SEAMSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SEAMSalloc (yy_size_t  );
void *SEAMSrealloc (void *,yy_size_t  );
void SEAMSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[614] =
    {   0,
        0,    0,   37,   37,    0,    0,   27,   27,    0,    0,
        3,    3,    0,    0,    0,    0,    0,    0,    0,    0,
       88,   85,   85,   86,   83,   84,   84,   84,   85,   80,
       37,   57,   72,   85,   54,   85,   85,   58,   59,   50,
       48,   60,   49,   36,   53,   35,   62,   61,   64,   39,
       65,   63,   38,   38,   38,   73,   74,   55,   80,   85,
       77,   51,   85,   85,   83,   84,   84,   84,   85,   80,
       30,   30,   31,   27,   30,   27,   27,   27,   27,   30,
       30,   85,   85,   83,   84,   84,   84,   85,   80,    4,
        4,    5,    3,    4,    3,    3,    3,    3,    4,    4,

       85,   85,   85,   83,   85,   85,   84,   84,   84,   85,
       80,   85,   85,   16,   83,   84,   84,   84,   85,   80,
       85,   85,   19,   83,   84,   84,   84,   85,   80,    0,
        0,   84,   84,   84,   78,   79,    0,    0,    0,    0,
        0,    0,    0,   37,    0,   69,    0,   75,   70,    0,
       76,   56,   42,   46,   40,   47,   41,   36,    0,   52,
       43,   36,   35,    0,   66,   68,   67,   38,   38,   38,
       44,    0,   71,    0,    0,    0,    0,   84,   84,   84,
       78,   79,    0,    0,    0,    0,   27,   27,   27,   27,
       27,   28,   29,    0,    0,    0,    0,    0,   84,   84,

       84,   78,   79,    0,    0,    0,    3,    3,    3,    3,
        3,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   84,   84,   84,   78,   79,    0,    0,
        0,   16,    0,    0,   84,   84,   84,   78,   79,    0,
        0,    0,    0,   19,    0,    0,   84,   84,   84,   78,
       79,    0,    0,    0,    0,   84,   84,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   45,    0,   36,
        0,   35,   38,   38,    0,    0,   34,    0,   84,   84,
        0,    0,    0,   27,   27,    0,    0,    0,   84,   84,
        0,    0,    0,    3,    3,    0,    0,    0,    0,   11,

        0,    0,    0,    0,    0,    0,    0,   84,   84,    0,
        0,    0,    0,    0,   84,   84,    0,    0,    0,    0,
        0,    0,   84,   84,    0,    0,    0,    0,   81,   82,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       38,   38,    0,   34,   81,   82,    0,    0,    0,   27,
       27,    0,    0,    0,   24,    0,   81,   82,    0,    0,
        0,    3,    3,    0,    0,   13,    0,    0,   11,    0,
        0,   12,    0,   81,   82,    0,    0,    0,    0,   81,
       82,    0,    0,    0,    0,    0,   81,   82,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    6,    0,    0,    0,    0,    0,   10,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   25,    0,   22,
        0,    0,    0,    0,    0,    0,    0,    0,   20,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   16,    0,    0,    0,   15,    0,    0,   19,    0,

        0,    0,   18,    0,    0,    0,    0,   26,   23,    0,
        8,    0,    0,    0,    0,   34,    0,    0,   21,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   16,    0,    0,    0,    0,   19,
        0,    0,    0,   32,    0,    0,    0,   25,    0,   34,
        0,    0,    0,   24,    0,    0,    0,    0,    0,    0,
       13,    0,    0,    0,    0,    0,   14,    0,    0,    0,
       17,   33,    0,    7,    0,    0,    7,   26,    0,    7,
        0,    0,   24,    0,    0,    0,    7,    0,    0,   13,
        0,    0,    7,    0,    7,    9,    0,    9,    9,    0,

        0,    9,    0,    9,    9,    0,    0,    0,    0,    1,
        0,    2,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       29,   32,   33,   29,   29,   34,   35,   36,   37,   29,
       38,   39,   29,   40,   41,   42,   29,   43,   29,   29,
       44,   45,   46,   47,   29,    1,   29,   29,   48,   49,

       50,   51,   29,   29,   52,   29,   29,   53,   29,   54,
       55,   56,   38,   29,   57,   58,   59,   29,   29,   43,
       29,   29,   60,   61,   62,   63,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[64] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    2,
        1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[652] =
    {   0,
        0,    0,   63,    0,  126,    0,  189,    0,  252,    0,
      315,    0,  377,  378,  438,    0,  501,    0,  564,    0,
     2079, 2080,  626, 2080, 2080,    0, 2035,  342,  324,  659,
      630, 2080, 2054,  382, 2080, 2067, 2065, 2080, 2080,  374,
      375, 2080,  376,  372,  372,  377, 2080, 2080, 2051, 2050,
     2049, 2080,    0, 2028,  352, 2080, 2080, 2047,  370, 2008,
     2080, 2080, 2056,  631, 2055,  712, 2023,  362,  617,  619,
     2080,  634, 2080,  637, 2080,  638,  404,  633,  640,  344,
      379, 2053,  643, 2052,  775, 2020,  364,  640,  634, 2080,
      646, 2080,  655, 2080,  837,  406,  662,  836,  353,  386,

      839, 2050,  840, 2049,  834,  838,  900, 2017,  373,  836,
      658, 2056,  962, 2080, 2055, 1022, 2014,  376, 1083,  964,
     2053, 1086, 2080, 2052, 1146, 2011,  613, 1207,  965,  843,
      833,    0,  609,  623, 2080, 2080, 2001,  821,  379, 1997,
     2014, 2020,  365, 1210, 2019, 2080,  659, 2080, 2080, 2038,
     2080, 2024, 2080, 2080, 2080, 2080, 2080,  832,  664, 2080,
     2080,  840,  841,  864, 2080, 2080, 2080,    0,  652,  821,
     2080,  943, 2080, 2034, 1209, 1213,  864,    0,  936,  937,
     2033, 2032, 1075,  966, 1214,  949, 1218, 1217,  647, 1087,
     1088, 2080, 2080, 1992, 2030, 1082, 1222,  960,    0,  940,

      941, 2029, 2028, 1081, 1083, 1225, 1226, 1221,  654, 1227,
     1228, 2009, 2026, 1221, 1233,  972, 1237, 1092,  991, 1226,
     1234, 1246,  992,    0,  948, 1063, 2025, 2024, 1238, 1244,
     2032, 2080, 1240, 1272,    0, 1064, 1065, 2031, 2030, 1259,
     1248, 1236, 2029, 2080, 1305, 1298,    0, 1066, 1067, 2028,
     2027, 1291, 1249, 1302, 2001,  951, 1065, 1974, 1995, 1969,
     1976,  614, 1976, 1968, 1992, 1982, 1992, 2080, 2000, 1999,
     1998, 1997, 1066, 1072, 1983, 1312,  422, 1098, 1073, 1074,
      860,  964,  661, 1291, 1306,  926,  974, 1113, 1196, 1201,
     1303, 1260, 1089, 1314, 1317, 1975, 1317, 1311, 1324, 2080,

     1330, 1335, 1331, 1340, 1350, 1348, 1349, 1300, 1323, 1354,
     1357, 1329, 1367, 1368, 1333, 1336,  980, 1327, 1374, 1376,
     1379, 1380, 1340, 1345,  984, 1384, 1386, 1385,    0,    0,
     1965, 1975, 1961, 1958, 1959, 1959, 1954, 1950, 1977, 1977,
        0,    0, 1966, 1999,    0,    0,  659, 1378, 1384, 1389,
     1393, 1951, 1951, 1396, 2080, 1398,    0,    0, 1090, 1388,
     1390, 1400, 1407, 1972, 1403, 2080, 1413, 1414, 2080, 1427,
     1434, 2080, 1440,    0,    0, 1407, 1400, 1393, 1415,    0,
        0, 1421, 1426, 1429, 1444, 1445,    0,    0, 1446, 1448,
     1451, 1450, 1945, 1445, 1935, 1945, 1944, 1944, 1934, 1981,

     1959, 1964, 1978, 1450, 1443, 1445, 1937, 1937, 1456, 1454,
     1455, 1457, 1960, 1467, 1468, 1474, 1461, 1462, 1472, 1475,
      876, 1484, 1485, 1487, 1488, 1492, 1490, 1489, 1494, 1507,
     1508, 1926, 1947, 2080, 1980, 1920, 1970, 1929, 1930, 2080,
     1941, 1937, 1500, 1510, 1502, 1965, 1924, 1504, 1515, 1503,
     1934, 1513, 1517, 1509, 1529, 1970, 1527, 1528, 1969, 1530,
     1968, 1531, 1532, 1967, 1920, 1508, 1965, 2080, 1964, 2080,
     1955, 1915, 1902, 1930, 1524, 1540, 1566, 1544, 2080, 1951,
     1541, 1545, 1551, 1571, 1928, 1549, 1572, 1576, 1584, 1570,
     1792, 2080, 1539, 1784, 1779, 2080, 1573, 1771, 2080, 1556,

     1766, 1746, 2080, 1697, 1715, 1733, 1741, 2080, 2080, 1731,
     2080, 1706, 1550, 1728, 1595, 1588, 1590, 1612, 2080, 1577,
     1727, 1607, 1608, 1614, 1703, 1591, 1725, 1615, 1618, 1620,
      862, 1622, 1732, 1731, 2080,  982, 1628, 1730, 1729, 2080,
     1720, 1718, 1667, 2080, 1717, 1715, 1631, 1723, 1642, 1636,
     1712, 1580, 1638, 2080, 1644, 1646, 1712, 1710, 1593, 1648,
     2080, 1649, 1650, 1656, 1626, 1718, 2080, 1660, 1633, 1717,
     2080, 2080, 1657, 2080, 1681, 1663, 1661, 1714, 1625, 1666,
     1667, 1668, 2080, 1674, 1678, 1654, 1678, 1680, 1682, 2080,
     1686, 1681, 1711, 1688, 1710, 2080, 1671, 1693, 1696, 1697,

     1671, 1698, 1700, 1694, 1265, 1245, 1224, 1071,  877, 2080,
      716, 2080, 2080, 1746, 1752, 1758, 1760, 1766, 1771, 1773,
     1779, 1784, 1786, 1792, 1798, 1804, 1810, 1816, 1822, 1828,
     1834, 1840, 1846, 1852, 1858, 1864, 1870, 1876, 1882, 1888,
     1894, 1900, 1906, 1912, 1918, 1924, 1930, 1936, 1942, 1948,
     1954
    } ;

static yyconst flex_int16_t yy_def[652] =
    {   0,
      613,    1,  613,    3,  613,    5,  613,    7,  613,    9,
      613,   11,    1,    1,  613,   15,  613,   17,  613,   19,
      613,  613,  613,  613,  613,  614,  614,  614,  613,  613,
      613,  613,  613,  615,  613,  613,  616,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  617,  617,  617,  613,  613,  613,  613,  613,
      613,  613,  618,  618,  618,  613,   66,   66,  618,  618,
      613,  613,  613,  619,  613,  619,  620,  620,  620,  613,
      613,  621,  621,  621,  613,   85,   85,  621,  621,  613,
      613,  613,  622,  613,  622,  623,  623,  623,  613,  613,

      613,  624,  624,  624,  624,  624,  613,  107,  107,  624,
      624,  625,  625,  613,  625,  613,  116,  116,  625,  625,
      626,  626,  613,  626,  613,  125,  125,  626,  626,  613,
      613,  614,  614,  614,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  615,  613,  613,  616,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  617,  617,  617,
      613,  613,  613,  618,  618,  618,  618,   66,   66,   66,
      618,  618,  618,  618,  613,  613,  619,  619,  620,  620,
      620,  613,  613,  613,  621,  621,  621,  621,   85,   85,

       85,  621,  621,  621,  621,  613,  622,  622,  623,  623,
      623,  613,  624,  624,  624,  624,  627,  624,  624,  624,
      624,  624,  624,  107,  107,  107,  624,  624,  624,  624,
      625,  613,  625,  625,  116,  116,  116,  625,  625,  625,
      625,  625,  626,  613,  626,  626,  125,  125,  125,  626,
      626,  626,  626,  626,  613,  614,  614,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  617,  617,  613,  618,  618,  618,   66,   66,
      618,  618,  618,  620,  620,  613,  628,  621,   85,   85,
      621,  621,  621,  623,  623,  613,  629,  624,  627,  613,

      627,  630,  624,  624,  631,  624,  624,  107,  107,  624,
      624,  624,  625,  625,  116,  116,  625,  625,  625,  625,
      626,  626,  125,  125,  626,  626,  626,  626,  614,  614,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      617,  617,  613,  613,   66,   66,  618,  618,  618,  620,
      620,  613,  613,  628,  613,  628,   85,   85,  621,  621,
      621,  623,  623,  613,  629,  613,  629,  630,  613,  630,
      631,  613,  631,  107,  107,  624,  624,  624,  625,  116,
      116,  625,  625,  625,  625,  626,  125,  125,  626,  626,
      626,  626,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  618,  618,  618,  613,  613,  628,  621,
      621,  621,  613,  629,  630,  631,  624,  624,  624,  625,
      625,  625,  625,  625,  625,  626,  626,  626,  626,  626,
      626,  613,  613,  613,  632,  613,  613,  613,  613,  613,
      613,  613,  618,  633,  618,  613,  613,  621,  634,  621,
      613,  624,  635,  624,  625,  636,  625,  625,  637,  626,
      638,  626,  626,  639,  613,  613,  632,  613,  640,  613,
      613,  613,  613,  613,  618,  633,  633,  641,  613,  613,
      621,  634,  634,  642,  613,  624,  635,  635,  643,  625,
      636,  613,  625,  644,  637,  613,  626,  638,  613,  626,

      645,  639,  613,  613,  613,  613,  640,  613,  613,  613,
      613,  613,  618,  618,  633,  633,  641,  641,  613,  621,
      621,  646,  642,  642,  613,  624,  624,  647,  643,  643,
      625,  625,  648,  644,  613,  626,  626,  649,  645,  613,
      613,  613,  613,  613,  613,  618,  618,  613,  641,  641,
      621,  621,  646,  613,  646,  650,  613,  624,  624,  647,
      613,  647,  651,  625,  625,  648,  613,  626,  626,  649,
      613,  613,  613,  613,  613,  618,  618,  613,  621,  628,
      646,  650,  613,  650,  613,  624,  629,  647,  651,  613,
      651,  625,  625,  626,  626,  613,  613,  618,  628,  650,

      613,  629,  651,  625,  626,  613,  613,  613,  613,  613,
      613,  613,    0,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613
    } ;

static yyconst flex_int16_t yy_nxt[2144] =
    {   0,
       22,   23,   24,   23,   22,   22,   25,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   26,   26,   26,   26,   27,
       26,   26,   26,   26,   26,   26,   26,   28,   26,   26,
       26,   26,   26,   22,   29,   22,   22,   26,   26,   27,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   30,
       22,   22,   22,   22,   31,   32,   31,   33,   34,   25,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   53,
       53,   53,   54,   53,   53,   53,   53,   53,   53,   53,

       55,   53,   53,   53,   53,   53,   56,   29,   57,   58,
       53,   53,   54,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   59,   60,   61,   62,   63,   64,   24,   64,
       63,   63,   65,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   66,   66,   66,   66,   67,   66,   66,   66,   66,
       66,   66,   66,   68,   66,   66,   66,   66,   66,   63,
       69,   63,   63,   66,   66,   67,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   70,   63,   63,   63,   71,
       72,   73,   74,   71,   71,   75,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   76,   71,   71,
       71,   71,   71,   71,   77,   77,   77,   77,   78,   77,
       77,   77,   77,   77,   77,   77,   79,   77,   77,   77,
       77,   77,   71,   80,   71,   71,   77,   77,   78,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   81,   71,
       71,   71,   82,   83,   24,   83,   82,   82,   84,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   85,   85,   85,
       85,   86,   85,   85,   85,   85,   85,   85,   85,   87,
       85,   85,   85,   85,   85,   82,   88,   82,   82,   85,

       85,   86,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   89,   82,   82,   82,   90,   91,   92,   93,   90,
       90,   94,   90,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,   95,   90,   90,   90,   90,   90,   90,
       96,   96,   96,   96,   97,   96,   96,   96,   96,   96,
       96,   96,   98,   96,   96,   96,   96,   96,   90,   99,
       90,   90,   96,   96,   97,   96,   96,   96,   96,   96,
       96,   96,   96,   96,  100,   90,   90,   90,  101,  101,
      101,  101,  134,  135,  148,  136,  152,  148,  154,  160,
      158,  156,  170,  162,  161,  163,  153,  155,  157,  172,

      134,  159,  180,  192,  201,  193,  164,  188,  172,  208,
      170,  194,  135,  226,  136,  172,  237,  260,  261,  143,
      180,  159,  201,  132,  344,  132,  164,  212,  143,  262,
      194,  226,  263,  175,  237,  143,   59,   59,  102,  103,
       24,  103,  102,  102,  104,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  105,  102,  106,  102,  102,  102,
      102,  102,  102,  107,  107,  107,  107,  108,  107,  107,
      107,  107,  107,  107,  107,  109,  107,  107,  107,  107,
      107,  102,  110,  102,  102,  107,  107,  108,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  111,  102,  102,

      102,  112,  113,  114,  113,  112,  112,  115,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  116,  116,  116,  116,
      117,  116,  116,  116,  116,  116,  116,  116,  118,  116,
      116,  116,  116,  116,  112,  119,  112,  112,  116,  116,
      117,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      120,  112,  112,  112,  121,  122,  123,  122,  121,  121,
      124,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  125,
      125,  125,  125,  126,  125,  125,  125,  125,  125,  125,

      125,  127,  125,  125,  125,  125,  125,  121,  128,  121,
      121,  125,  125,  126,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  129,  121,  121,  121,  130,  175,  130,
      175,  144,  176,  144,  176,  185,  188,  185,  185,  613,
      187,  256,  175,  188,  197,  196,  197,  206,  183,  206,
      188,  196,  132,  249,  196,  257,  206,  208,  207,  132,
      256,  148,  335,  204,  148,  208,  132,  336,  184,  214,
      175,  249,  175,  132,  257,  190,  181,  269,  182,  269,
      191,  132,  270,  205,  273,  131,  137,  229,  138,  145,
      177,  139,  140,  186,  141,  404,  186,  613,  191,  202,

      142,  203,  198,  273,  210,  145,  137,  230,  143,  349,
      139,  140,  174,  174,  145,  174,  174,  174,  174,  174,
      174,  174,  174,  175,  174,  174,  174,  174,  174,  174,
      178,  178,  174,  174,  174,  174,  174,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  174,  174,  174,  174,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  174,  174,  174,  174,  195,  195,  612,  195,  195,
      195,  195,  195,  195,  195,  195,  196,  195,  195,  195,
      195,  195,  195,  199,  199,  195,  195,  195,  195,  195,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  195,  195,
      195,  195,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  195,  195,  195,  195,  613,  208,
      206,  215,  206,  215,  130,  217,  130,  214,  259,  220,
      158,  214,  218,  274,  221,  132,  222,  162,  158,  163,
      137,  159,  255,  219,  232,  139,  140,  223,  141,  159,
      164,  175,  274,  260,  261,  175,  211,  271,  232,  271,
      137,  159,  272,  219,  139,  140,  455,  223,  611,  159,
      164,  347,  564,  278,  211,  227,  613,  228,  145,  216,

      213,  213,  131,  213,  213,  213,  213,  213,  213,  213,
      213,  214,  213,  213,  213,  213,  213,  213,  224,  224,
      213,  213,  213,  213,  213,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  213,  213,  213,  213,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  213,
      213,  213,  213,  233,  232,  233,  232,  244,  279,  280,
      275,  196,  289,  290,  352,  175,  355,  175,  267,  353,
      308,  194,  232,  214,  244,  356,  244,  279,  280,  288,
      329,  289,  290,  240,  252,  260,  261,  241,  253,  308,

      194,  298,  214,  214,  303,  306,  303,  306,  329,  304,
      307,  382,  568,  242,  254,  389,  241,  253,  282,  283,
      348,  234,  231,  231,  232,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      235,  235,  231,  231,  231,  231,  231,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  231,  231,  231,  231,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  231,  231,  231,  231,  232,  175,  245,  244,  245,
      188,  188,  196,  196,  196,  309,  315,  316,  323,  324,

      196,  196,  281,  217,  330,  341,  132,  132,  291,  175,
      218,  342,  345,  346,  309,  315,  316,  323,  324,  284,
      285,  219,  330,  341,  196,  281,  410,  282,  283,  342,
      345,  346,  610,  292,  293,  292,  293,  361,  284,  285,
      291,  219,  238,  287,  239,  246,  243,  243,  244,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  247,  247,  243,  243,  243,  243,
      243,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  243,
      243,  243,  243,  247,  247,  247,  247,  247,  247,  247,

      247,  247,  247,  247,  247,  243,  243,  243,  243,  244,
      276,  144,  276,  144,  176,  185,  176,  185,  613,  185,
      175,  187,  613,  197,  175,  197,  206,  206,  206,  207,
      208,  208,  214,  196,  215,  357,  215,  214,  232,  300,
      358,  233,  232,  233,  214,  217,  132,  132,  301,  214,
      232,  244,  218,  357,  609,  214,  608,  220,  358,  294,
      295,  232,  221,  219,  222,  310,  250,  244,  251,  145,
      277,  196,  177,  186,  232,  223,  613,  186,  294,  295,
      613,  198,  297,  219,  145,  145,  317,  305,  318,  319,
      311,  312,  216,  244,  188,  223,  311,  312,  302,  234,

      244,  313,  320,  328,  244,  241,  245,  244,  245,  188,
      132,  318,  319,  276,  196,  276,  360,  208,  325,  366,
      208,  314,  214,  175,  241,  132,  300,  321,  367,  232,
      350,  253,  300,  132,  359,  301,  132,  369,  310,  374,
      214,  301,  214,  326,  327,  351,  370,  322,  350,  304,
      253,  217,  372,  362,  326,  327,  363,  374,  304,  214,
      220,  373,  375,  351,  246,  214,  307,  307,  214,  232,
      232,  362,  380,  277,  363,  381,  232,  378,  232,  387,
      375,  244,  244,  383,  388,  376,  244,  244,  244,  175,
      380,  302,  188,  381,  317,  175,  188,  387,  355,  196,

      355,  196,  388,  208,  214,  366,  325,  356,  132,  356,
      208,  214,  132,  377,  367,  366,  369,  232,  214,  132,
      379,  379,  384,  232,  367,  370,  132,  405,  232,  369,
      385,  232,  386,  386,  391,  406,  372,  411,  370,  392,
      390,  412,  372,  417,  419,  373,  232,  244,  244,  418,
      244,  373,  244,  244,  175,  433,  175,  421,  355,  409,
      443,  175,  423,  420,  448,  196,  196,  356,  196,  366,
      369,  452,  214,  214,  414,  422,  372,  232,  367,  370,
      424,  423,  427,  214,  429,  373,  232,  232,  415,  232,
      232,  244,  244,  426,  244,  445,  244,  428,  459,  425,

      460,  416,  430,  429,  444,  431,  434,  450,  423,  244,
      244,  175,  468,  175,  196,  196,  449,  468,  464,  468,
      214,  477,  454,  453,  214,  429,  483,  423,  488,  232,
      232,  232,  244,  244,  244,  175,  475,  458,  505,  457,
      481,  232,  468,  506,  429,  456,  508,  468,  462,  486,
      461,  477,  196,  468,  513,  518,  483,  463,  244,  514,
      214,  175,  483,  478,  484,  490,  497,  515,  468,  515,
      489,  520,  232,  508,  468,  244,  521,  477,  468,  526,
      546,  493,  524,  488,  527,  500,  508,  488,  196,  494,
      548,  196,  508,  501,  533,  530,  515,  468,  515,  477,

      531,  518,  214,  536,  214,  532,  477,  551,  537,  554,
      508,  538,  522,  549,  508,  549,  508,  561,  555,  524,
      508,  558,  508,  518,  232,  524,  562,  516,  232,  530,
      244,  530,  276,  565,  276,  244,  196,  528,  578,  569,
      554,  580,  175,  549,  508,  549,  554,  518,  583,  555,
      561,  561,  590,  518,  587,  555,  516,  584,  232,  562,
      562,  591,  244,  344,  276,  214,  276,  592,  355,  554,
      583,  594,  175,  550,  175,  556,  583,  356,  555,  584,
      366,  563,  561,  232,  590,  584,  599,  593,  590,  367,
      244,  562,  577,  591,  595,  344,  232,  591,  355,  583,

      366,  607,  590,  550,  175,  581,  606,  356,  584,  367,
      588,  591,  244,  232,  601,  602,  344,  597,  596,  571,
      567,  586,  585,  579,  598,  344,  576,  575,  574,  573,
      572,  540,  571,  535,  567,  600,  559,  557,  552,  547,
      545,  544,  604,  508,  543,  542,  541,  603,  503,  605,
      132,  132,  147,  147,  147,  147,  147,  147,  150,  150,
      150,  150,  150,  150,  168,  168,  174,  174,  540,  174,
      174,  174,  188,  499,  188,  188,  189,  189,  189,  195,
      195,  496,  195,  195,  195,  208,  535,  208,  208,  209,
      209,  209,  213,  213,  492,  213,  213,  213,  231,  231,

      231,  231,  231,  231,  243,  243,  243,  243,  243,  243,
      299,  299,  299,  299,  299,  299,  354,  354,  354,  354,
      354,  354,  365,  365,  365,  365,  365,  365,  368,  368,
      368,  368,  368,  368,  371,  371,  371,  371,  371,  371,
      467,  467,  467,  467,  467,  467,  476,  476,  476,  476,
      476,  476,  482,  482,  482,  482,  482,  482,  487,  487,
      487,  487,  487,  487,  491,  491,  491,  491,  491,  491,
      495,  495,  495,  495,  495,  495,  498,  498,  498,  498,
      498,  498,  502,  502,  502,  502,  502,  502,  507,  507,
      507,  507,  507,  507,  517,  517,  517,  517,  517,  517,

      523,  523,  523,  523,  523,  523,  529,  529,  529,  529,
      529,  529,  534,  534,  534,  534,  534,  534,  539,  539,
      539,  539,  539,  539,  553,  553,  553,  553,  553,  553,
      560,  560,  560,  560,  560,  560,  566,  566,  566,  566,
      566,  566,  570,  570,  570,  570,  570,  570,  582,  582,
      582,  582,  582,  582,  589,  589,  589,  589,  589,  589,
      525,  519,  512,  511,  510,  509,  508,  468,  504,  503,
      499,  496,  492,  485,  480,  479,  474,  473,  472,  471,
      470,  469,  468,  466,  465,  451,  447,  446,  433,  442,
      441,  440,  439,  438,  437,  436,  435,  432,  413,  408,

      407,  344,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  364,  343,  272,  272,  270,  270,  275,
      340,  339,  338,  337,  334,  333,  332,  331,  259,  244,
      244,  244,  232,  232,  232,  214,  214,  214,  296,  196,
      196,  196,  286,  175,  175,  175,  268,  151,  267,  266,
      265,  264,  258,  248,  244,  244,  236,  232,  232,  225,
      214,  214,  200,  196,  196,  179,  175,  175,  173,  171,
      169,  167,  166,  165,  151,  149,  146,  133,  613,   21,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613
    } ;

static yyconst flex_int16_t yy_chk[2144] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   13,   14,
       13,   14,   28,   29,   34,   29,   40,   34,   41,   45,
       44,   43,   55,   46,   45,   46,   40,   41,   43,   59,

       28,   44,   68,   80,   87,   80,   46,   77,   81,   96,
       55,   81,   99,  109,   99,  100,  118,  143,  143,   59,
       68,   44,   87,   77,  277,   96,   46,  100,   81,  139,
       81,  109,  139,  277,  118,  100,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   23,   69,   23,
       70,   31,   64,   31,   64,   72,   78,   72,   74,   76,
       74,  133,   64,   79,   83,   89,   83,   91,   70,   91,
      189,   88,   78,  127,   83,  134,   93,  209,   93,   79,
      133,  147,  262,   89,  147,   97,  189,  262,   70,  111,
      347,  127,  283,  209,  134,   78,   69,  159,   69,  159,
       79,   97,  159,   89,  169,   23,   30,  111,   30,   31,
       64,   30,   30,   72,   30,  347,   74,   76,   79,   88,

       30,   88,   83,  169,   97,   91,   30,  111,   30,  283,
       30,   30,   66,   66,   93,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   85,   85,  611,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,

       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   95,   98,
      101,  103,  101,  103,  130,  105,  130,  110,  138,  106,
      158,  103,  105,  170,  106,   98,  106,  163,  162,  163,
      131,  158,  131,  105,  531,  131,  131,  106,  131,  162,
      163,  281,  170,  138,  138,  177,   98,  164,  421,  164,
      131,  158,  164,  105,  131,  131,  421,  106,  609,  162,
      163,  281,  531,  177,   98,  110,   95,  110,  101,  103,

      107,  107,  130,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  113,  113,  113,  120,  129,  179,  180,
      172,  198,  200,  201,  286,  282,  287,  184,  186,  286,
      225,  186,  317,  216,  536,  287,  325,  179,  180,  198,
      256,  200,  201,  120,  129,  172,  172,  120,  129,  225,

      186,  216,  219,  223,  219,  223,  219,  223,  256,  219,
      223,  317,  536,  120,  129,  325,  120,  129,  184,  184,
      282,  113,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  119,  183,  122,  122,  122,
      190,  191,  204,  196,  205,  226,  236,  237,  248,  249,

      293,  359,  183,  218,  257,  273,  190,  191,  204,  278,
      218,  274,  279,  280,  226,  236,  237,  248,  249,  190,
      191,  218,  257,  273,  288,  278,  359,  183,  183,  274,
      279,  280,  608,  204,  204,  205,  205,  293,  190,  191,
      288,  218,  119,  196,  119,  122,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  128,
      175,  144,  175,  144,  176,  185,  176,  185,  188,  187,
      175,  187,  208,  197,  176,  197,  206,  207,  206,  207,
      210,  211,  214,  197,  215,  289,  215,  220,  242,  217,
      290,  233,  233,  233,  215,  221,  210,  211,  217,  229,
      241,  253,  221,  289,  607,  230,  606,  222,  290,  210,
      211,  240,  222,  221,  222,  229,  128,  605,  128,  144,
      175,  292,  176,  185,  234,  222,  188,  187,  210,  211,
      208,  197,  214,  221,  206,  207,  240,  220,  242,  242,
      229,  229,  215,  252,  284,  222,  230,  230,  217,  233,

      246,  234,  241,  253,  254,  234,  245,  245,  245,  285,
      284,  240,  240,  276,  291,  276,  292,  294,  252,  297,
      295,  234,  298,  276,  234,  285,  299,  246,  297,  318,
      284,  246,  301,  294,  291,  299,  295,  302,  298,  308,
      312,  301,  303,  252,  252,  285,  302,  246,  284,  303,
      246,  304,  305,  294,  254,  254,  295,  308,  304,  306,
      307,  305,  309,  285,  245,  310,  306,  307,  311,  313,
      314,  294,  315,  276,  295,  316,  319,  312,  320,  323,
      309,  321,  322,  318,  324,  310,  326,  328,  327,  348,
      315,  301,  350,  316,  313,  349,  351,  323,  354,  360,

      356,  361,  324,  362,  378,  365,  321,  354,  350,  356,
      363,  377,  351,  311,  365,  367,  368,  379,  376,  362,
      313,  314,  319,  382,  367,  368,  363,  348,  383,  370,
      320,  384,  321,  322,  327,  349,  371,  360,  370,  328,
      326,  361,  373,  376,  378,  371,  385,  386,  389,  377,
      390,  373,  392,  391,  405,  394,  406,  382,  409,  356,
      404,  404,  384,  379,  410,  410,  411,  409,  412,  414,
      415,  417,  417,  418,  367,  383,  416,  420,  414,  415,
      384,  384,  389,  419,  391,  416,  422,  423,  370,  424,
      425,  428,  427,  386,  426,  406,  429,  390,  425,  385,

      427,  373,  391,  391,  405,  392,  394,  412,  420,  430,
      431,  443,  444,  445,  450,  448,  411,  449,  431,  453,
      454,  444,  419,  418,  452,  426,  449,  420,  453,  457,
      458,  455,  460,  462,  463,  475,  443,  424,  466,  423,
      448,  493,  476,  466,  426,  422,  478,  482,  429,  452,
      428,  476,  481,  483,  475,  478,  482,  430,  500,  475,
      486,  513,  483,  445,  450,  455,  460,  477,  477,  477,
      454,  481,  490,  484,  487,  497,  481,  477,  488,  486,
      513,  457,  484,  487,  486,  462,  489,  488,  520,  458,
      516,  552,  517,  463,  493,  489,  515,  515,  515,  516,

      490,  517,  526,  497,  559,  490,  515,  520,  497,  522,
      523,  500,  483,  518,  518,  518,  524,  528,  522,  523,
      529,  526,  530,  518,  532,  524,  528,  477,  565,  529,
      537,  530,  547,  532,  547,  569,  579,  488,  550,  537,
      553,  552,  547,  549,  549,  549,  555,  550,  556,  553,
      560,  562,  563,  549,  559,  555,  515,  556,  564,  560,
      562,  563,  568,  577,  576,  586,  576,  564,  580,  581,
      582,  568,  577,  518,  576,  524,  584,  580,  581,  582,
      587,  530,  588,  592,  589,  584,  579,  565,  591,  587,
      594,  588,  547,  589,  569,  598,  604,  591,  599,  600,

      602,  601,  603,  549,  598,  555,  597,  599,  600,  602,
      562,  603,  595,  593,  585,  586,  578,  575,  573,  570,
      566,  558,  557,  551,  576,  548,  546,  545,  543,  542,
      541,  539,  538,  534,  533,  584,  527,  525,  521,  514,
      512,  510,  592,  507,  506,  505,  504,  591,  502,  594,
      614,  614,  615,  615,  615,  615,  615,  615,  616,  616,
      616,  616,  616,  616,  617,  617,  618,  618,  501,  618,
      618,  618,  619,  498,  619,  619,  620,  620,  620,  621,
      621,  495,  621,  621,  621,  622,  494,  622,  622,  623,
      623,  623,  624,  624,  491,  624,  624,  624,  625,  625,

      625,  625,  625,  625,  626,  626,  626,  626,  626,  626,
      627,  627,  627,  627,  627,  627,  628,  628,  628,  628,
      628,  628,  629,  629,  629,  629,  629,  629,  630,  630,
      630,  630,  630,  630,  631,  631,  631,  631,  631,  631,
      632,  632,  632,  632,  632,  632,  633,  633,  633,  633,
      633,  633,  634,  634,  634,  634,  634,  634,  635,  635,
      635,  635,  635,  635,  636,  636,  636,  636,  636,  636,
      637,  637,  637,  637,  637,  637,  638,  638,  638,  638,
      638,  638,  639,  639,  639,  639,  639,  639,  640,  640,
      640,  640,  640,  640,  641,  641,  641,  641,  641,  641,

      642,  642,  642,  642,  642,  642,  643,  643,  643,  643,
      643,  643,  644,  644,  644,  644,  644,  644,  645,  645,
      645,  645,  645,  645,  646,  646,  646,  646,  646,  646,
      647,  647,  647,  647,  647,  647,  648,  648,  648,  648,
      648,  648,  649,  649,  649,  649,  649,  649,  650,  650,
      650,  650,  650,  650,  651,  651,  651,  651,  651,  651,
      485,  480,  474,  473,  472,  471,  469,  467,  465,  464,
      461,  459,  456,  451,  447,  446,  442,  441,  439,  438,
      437,  436,  435,  433,  432,  413,  408,  407,  403,  402,
      401,  400,  399,  398,  397,  396,  395,  393,  364,  353,

      352,  344,  343,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  331,  296,  275,  272,  271,  270,  269,  267,
      266,  265,  264,  263,  261,  260,  259,  258,  255,  251,
      250,  243,  239,  238,  231,  228,  227,  213,  212,  203,
      202,  195,  194,  182,  181,  174,  152,  150,  145,  142,
      141,  140,  137,  126,  124,  121,  117,  115,  112,  108,
      104,  102,   86,   84,   82,   67,   65,   63,   60,   58,
       54,   51,   50,   49,   37,   36,   33,   27,   21,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613
    } ;

static yyconst flex_int16_t yy_rule_linenum[87] =
    {   0,
       76,   77,   78,   79,   80,   82,   83,   84,   85,   87,
       94,   95,  119,  144,  157,  161,  166,  170,  173,  175,
      182,  189,  196,  204,  233,  244,  258,  259,  260,  261,
      262,  264,  266,  268,  325,  326,  329,  331,  338,  339,
      340,  341,  342,  343,  344,  345,  346,  347,  348,  349,
      350,  351,  352,  353,  354,  355,  356,  357,  358,  359,
      360,  361,  362,  363,  364,  365,  366,  367,  368,  369,
      370,  371,  372,  373,  374,  379,  384,  386,  388,  390,
      392,  393,  403,  406,  407,  409
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "aprepro.ll"
/* -*- Mode: c++ -*- */
#line 3 "aprepro.ll"

#include <fstream>
#include <iostream>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <fcntl.h> 

#include "apr_scanner.h"
#include "aprepro.h"
#include "apr_util.h"

#define YY_NO_UNISTD_H 1

/* import the parser's token type into a local typedef */
typedef SEAMS::Parser::token token;
typedef SEAMS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

#define show(x)   printf("<%s>", x);
 namespace SEAMS {
   extern int echo;
   extern char *get_temp_filename(void);
   extern char *pathopen(const char *file);
   extern void  conv_string(const char *string);
   void yyerror(const char *s);
 }
 
int ifdef;
int file_must_exist = 0; /* Global used by include/conditional include */

/* Global variables used by the looping mechanism */
int loop_lvl = 0;
std::fstream *tmp_file;
char  *temp_f;

#define MAX_IF_NESTING 64

int if_state[MAX_IF_NESTING];
int if_lvl = 0;

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SEAMSFlexLexer" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* enables the use of start condition stacks */

#line 1230 "apr_scanner.cc"

#define INITIAL 0
#define PARSING 1
#define GET_FILENAME 2
#define IF_SKIP 3
#define GET_VAR 4
#define VERBATIM 5
#define IF_WHILE_SKIP 6
#define GET_LOOP_VAR 7
#define LOOP 8
#define LOOP_SKIP 9

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */

/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 75 "aprepro.ll"

#line 1398 "apr_scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 614 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2080 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 87 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 87 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 88 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "aprepro.ll"
{ BEGIN(VERBATIM);  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "aprepro.ll"
{ BEGIN(INITIAL);   }
	YY_BREAK
case 3:
#line 79 "aprepro.ll"
case 4:
YY_RULE_SETUP
#line 79 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 80 "aprepro.ll"
{ if (echo) ECHO; aprepro.ap_file_list.top().lineno++;   }
	YY_BREAK
case 6:
#line 83 "aprepro.ll"
case 7:
YY_RULE_SETUP
#line 83 "aprepro.ll"
{ echo = true;	}
	YY_BREAK
case 8:
#line 85 "aprepro.ll"
case 9:
YY_RULE_SETUP
#line 85 "aprepro.ll"
{ echo = false;	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 87 "aprepro.ll"
{ BEGIN(GET_LOOP_VAR);
			      if (aprepro.ap_options.debugging) 
				std::cerr << "DEBUG LOOP - Found loop begin test " << yytext << " in file "
					  << aprepro.ap_file_list.top().name << "\n";

                           }
	YY_BREAK
case 11:
/* rule 11 can match eol */
#line 95 "aprepro.ll"
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 95 "aprepro.ll"
{/* Loop control defined by integer */
                              char *pt = strchr(yytext, ')');
			      *pt = '\0';
			      sscanf (yytext, "%lf", &yylval->val);

			      if (yylval->val <= 0) {
				BEGIN(LOOP_SKIP);
			      }
			      else {/* Value defined and != 0. */
				temp_f = get_temp_filename();
				SEAMS::file_rec new_file(temp_f, 0, true, (int)yylval->val);
				aprepro.ap_file_list.push(new_file);

				if (aprepro.ap_options.debugging) 
				  std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
					    << " in file " << aprepro.ap_file_list.top().name
					    << " at line " << aprepro.ap_file_list.top().lineno << "\n";

				tmp_file = new std::fstream(temp_f, std::ios::out);
				loop_lvl++;
				BEGIN(LOOP);
			      }
			      aprepro.ap_file_list.top().lineno++;
                            }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 119 "aprepro.ll"
{ /* Loop control defined by variable */
                              symrec *s;
			      char *pt = strchr(yytext, ')');
			      *pt = '\0';
			      s = aprepro.getsym(yytext);

			      if (s == 0 || (s->type != token::SVAR && s->value.var == 0.)) {
				BEGIN(LOOP_SKIP);
			      }
			      else { /* Value defined and != 0. */
				temp_f = get_temp_filename();
				SEAMS::file_rec new_file(temp_f, 0, true, (int)s->value.var);
				aprepro.ap_file_list.push(new_file);
				
				if (aprepro.ap_options.debugging) 
				  std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
					    << " in file " << aprepro.ap_file_list.top().name
					    << " at line " << aprepro.ap_file_list.top().lineno << "\n";

				tmp_file = new std::fstream(temp_f, std::ios::out);
				loop_lvl++;
				BEGIN(LOOP);
			      }
			      aprepro.ap_file_list.top().lineno++;
                             }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 144 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++;
				   if (--loop_lvl == 0) {
				     BEGIN(INITIAL);
				     tmp_file->close();
				     delete tmp_file;
				     
				     yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
				     yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
				   }
				   else {
				     (*tmp_file) << yytext;
				   }
				 }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 157 "aprepro.ll"
{ loop_lvl++; /* Nested Loop */
	                         (*tmp_file) << yytext;
			         aprepro.ap_file_list.top().lineno++;
			        }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 161 "aprepro.ll"
{ (*tmp_file) << yytext;
 			          aprepro.ap_file_list.top().lineno++;
			        }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 166 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++;
					if (--loop_lvl == 0)
					  BEGIN(INITIAL);
				      }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 170 "aprepro.ll"
{ loop_lvl++; /* Nested Loop */
					aprepro.ap_file_list.top().lineno++;
				      }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 173 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 175 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'ifdef'  at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   if_state[if_lvl] = IF_WHILE_SKIP; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 182 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'ifndef' at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   if_state[if_lvl] = IF_WHILE_SKIP; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 189 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'ifdef'  at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   ifdef = 1; BEGIN(GET_VAR); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 196 "aprepro.ll"
{ if_lvl++; 
    if (aprepro.ap_options.debugging)
	fprintf (stderr, "DEBUG IF: 'ifndef' at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			   if (if_lvl >= MAX_IF_NESTING)
			     yyerror("Too many nested if statements");
			   ifdef = 0; BEGIN(GET_VAR); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 204 "aprepro.ll"
{ symrec *s;
			      char *pt = strchr(yytext, ')');
			      *pt = '\0';
			      s = aprepro.getsym(yytext);
			      if (s == 0 || (s->type != token::SVAR && s->value.var == 0.))
				{
				  if (ifdef == 1) {
				    BEGIN(IF_SKIP);
				    if_state[if_lvl] = IF_SKIP;
				  }
				  else {
				    BEGIN(INITIAL);
				    if_state[if_lvl] = INITIAL;
				  }
				}
			      else /* Value defined and != 0. */
				{
				  if (ifdef == 1) {
				    BEGIN(INITIAL);
				    if_state[if_lvl] = INITIAL;
				  }
				  else {
				    BEGIN(IF_SKIP);
				    if_state[if_lvl] = IF_SKIP;
				  }
				}
			      aprepro.ap_file_list.top().lineno++;
			    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 233 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++; 
    if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG IF: 'else'   at level = %d at line %d\n",
		 if_lvl, aprepro.ap_file_list.top().lineno);
			    if (if_state[if_lvl] == IF_SKIP) 
			      BEGIN(INITIAL);
			    if (if_state[if_lvl] == INITIAL)
			      BEGIN(IF_SKIP);
			    /* If neither is true, this is a nested 
			       if that should be skipped */
			  }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 244 "aprepro.ll"
{ if (if_state[if_lvl] == IF_SKIP ||
			       if_state[if_lvl] == INITIAL)
			     BEGIN(INITIAL);
			   /* If neither is true, this is a nested 
			      if that should be skipped */
    if (aprepro.ap_options.debugging) 
	printf ("DEBUG IF: 'endif'  at level = %d at line %d\n",
		if_lvl, aprepro.ap_file_list.top().lineno);
			   if (--if_lvl < 0) {
			     if_lvl = 0;
			     yyerror("Improperly Nested ifdef/ifndef statements");
			   }
			   aprepro.ap_file_list.top().lineno++;  
			   /* Ignore endif if not skipping */ }
	YY_BREAK
case 27:
#line 259 "aprepro.ll"
case 28:
#line 260 "aprepro.ll"
case 29:
#line 261 "aprepro.ll"
case 30:
YY_RULE_SETUP
#line 261 "aprepro.ll"
{ ; }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 262 "aprepro.ll"
{ aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 264 "aprepro.ll"
{ BEGIN(GET_FILENAME); 
                             file_must_exist = true; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 266 "aprepro.ll"
{ BEGIN(GET_FILENAME);
                             file_must_exist = !true; }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 268 "aprepro.ll"
{ BEGIN(INITIAL); 
			     {
			       symrec *s;
			       int quoted = false;
			       std::fstream *yytmp;
			       char *pt = strchr(yytext, ')');
			       *pt = '\0';
			       /* Check to see if surrounded by double quote */ 
			       if ((pt = strchr(yytext, '"')) != NULL) {
				 yytext++;
				 quoted = true;
			       }
			       if ((pt = strrchr(yytext, '"')) != NULL) {
				 *pt = '\0';
				 quoted = true;
			       }

			       if (quoted == false) {
				 /* See if this is an aprepro variable referring to a name */
				 s = aprepro.getsym(yytext);
				 if (s == 0 || s->type != token::SVAR) {
				   pt = yytext;
				 } else {
				   pt = (char*)s->value.svar;
				 }
			       } else {
				 pt = yytext;
			       }
			       
			       if (file_must_exist)
				 yytmp = aprepro.open_file(pt, "r");
			       else
				 yytmp = aprepro.check_open_file(pt, "r");
			       if (yytmp != NULL) {
				 yyin = yytmp;
				 if (aprepro.ap_options.info_msg == true) {
				   std::cerr << "Aprepro: INFO: Included File: '"
					     << pt << "' (" << aprepro.ap_file_list.top().name
					     << ", line " << aprepro.ap_file_list.top().lineno
					     << ")\n";
				 }
				 SEAMS::file_rec new_file(pt, 0, false, 0);
				 aprepro.ap_file_list.push(new_file);

				 yyFlexLexer::yypush_buffer_state (
				    yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
			       } else {
				 if (aprepro.ap_options.warning_msg == true) {
				   std::cerr << "Aprepro: WARN: Can't open '"
					     << yytext << "'\n";
				 }
			       }
			       aprepro.ap_file_list.top().lineno++;
			     }
			   }
	YY_BREAK
case 35:
#line 326 "aprepro.ll"
case 36:
YY_RULE_SETUP
#line 326 "aprepro.ll"
{ sscanf (yytext, "%lf", &yylval->val);
                             return(token::NUM); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 329 "aprepro.ll"
; /* Empty Rule */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 331 "aprepro.ll"
{ symrec *s;
			     s = aprepro.getsym(yytext);
			     if (s == 0)
			       s = aprepro.putsym (yytext, SEAMS::Aprepro::UNDEFINED_VARIABLE, 0);
			     yylval->tptr = s;
			     return((token::yytokentype)s->type);
			   }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 338 "aprepro.ll"
return(token::EQUAL);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 339 "aprepro.ll"
return(token::EQ_PLUS);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 340 "aprepro.ll"
return(token::EQ_MINUS);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 341 "aprepro.ll"
return(token::EQ_TIME);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 342 "aprepro.ll"
return(token::EQ_DIV);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 343 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 344 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 345 "aprepro.ll"
return(token::INC);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 346 "aprepro.ll"
return(token::DEC);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 347 "aprepro.ll"
return(token::PLU);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 348 "aprepro.ll"
return(token::SUB);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 349 "aprepro.ll"
return(token::TIM);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 350 "aprepro.ll"
return(token::TIM);		/* ~ is same as multiply */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 351 "aprepro.ll"
return(token::CONCAT);	/* String concatenation */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 352 "aprepro.ll"
return(token::DIV);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 353 "aprepro.ll"
return(token::MOD);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 354 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 355 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 356 "aprepro.ll"
aprepro.ap_file_list.top().lineno++;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 357 "aprepro.ll"
return(token::LPAR);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 358 "aprepro.ll"
return(token::RPAR);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 359 "aprepro.ll"
return(token::COMMA);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 360 "aprepro.ll"
return(token::SEMI);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 361 "aprepro.ll"
return(token::COLON);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 362 "aprepro.ll"
return(token::QUEST);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 363 "aprepro.ll"
return(token::LT);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 364 "aprepro.ll"
return(token::GT);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 365 "aprepro.ll"
return(token::LE);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 366 "aprepro.ll"
return(token::GE);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 367 "aprepro.ll"
return(token::EQ);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 368 "aprepro.ll"
return(token::NE);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 369 "aprepro.ll"
return(token::LAND);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 370 "aprepro.ll"
return(token::LOR);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 371 "aprepro.ll"
return(token::NOT);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 372 "aprepro.ll"
return(token::LBRACK);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 373 "aprepro.ll"
return(token::RBRACK);
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 374 "aprepro.ll"
{ char *pt = strrchr(yytext, '"');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 379 "aprepro.ll"
{ char *pt = strrchr(yytext, '\'');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 384 "aprepro.ll"
{ BEGIN(INITIAL); return(token::RBRACE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 386 "aprepro.ll"
{ if (echo) LexerOutput("{", 1); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 388 "aprepro.ll"
{ if (echo) LexerOutput("}", 1); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 390 "aprepro.ll"
{ BEGIN(PARSING); return(token::LBRACE);  }
	YY_BREAK
case 81:
#line 393 "aprepro.ll"
case 82:
YY_RULE_SETUP
#line 393 "aprepro.ll"
{ if (aprepro.ap_options.end_on_exit)
			       {
				 if (echo) ECHO;
				 return((token::yytokentype)-1);  
			       }
                              else 
                               if (echo) ECHO;
			   }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 403 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 84:
#line 407 "aprepro.ll"
case 85:
YY_RULE_SETUP
#line 407 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 409 "aprepro.ll"
{ if (echo) ECHO; aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 411 "aprepro.ll"
ECHO;
	YY_BREAK
#line 2159 "apr_scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSING):
case YY_STATE_EOF(GET_FILENAME):
case YY_STATE_EOF(IF_SKIP):
case YY_STATE_EOF(GET_VAR):
case YY_STATE_EOF(VERBATIM):
case YY_STATE_EOF(IF_WHILE_SKIP):
case YY_STATE_EOF(GET_LOOP_VAR):
case YY_STATE_EOF(LOOP):
case YY_STATE_EOF(LOOP_SKIP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SEAMSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SEAMSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SEAMSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SEAMSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 614 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 614 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 613);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SEAMSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SEAMSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SEAMSfree((void *) b->yy_ch_buf  );

	SEAMSfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SEAMSalloc(new_size  );

		else
			(yy_start_stack) = (int *) SEAMSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SEAMSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SEAMSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SEAMSfree (void * ptr )
{
	free( (char *) ptr );	/* see SEAMSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 411 "aprepro.ll"



/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

namespace SEAMS {

  Scanner::Scanner(Aprepro& aprepro_yyarg,
		   std::istream* in,
		   std::ostream* out)
    : SEAMSFlexLexer(in, out), aprepro(aprepro_yyarg)
  {
    aprepro.outputStream.push(out);
  }

  Scanner::~Scanner()
  { }

  void Scanner::LexerOutput(const char* buf, int size )
  {
    aprepro.outputStream.top()->write( buf, size );
    if (aprepro.ap_options.interactive && aprepro.outputStream.size() == 1) {
      // In interactive mode, output to stdout in addition to the
      // output stream, unless user has redirected output...
      std::cout << buf;
    }
  }

  int Scanner::yywrap()
  {
    if (aprepro.ap_file_list.size() <= 1) {		/* End of main file, not in nested include */
      return (1);
    }
    else {
      /* We are in an included or looping file */
      if (aprepro.ap_file_list.top().tmp_file) {
	if (aprepro.ap_options.debugging)
	  std::cerr << "DEBUG LOOP: Loop count = " << aprepro.ap_file_list.top().loop_count << "\n";
	if (--aprepro.ap_file_list.top().loop_count <= 0)  {
	  if (strcmp("_string_", aprepro.ap_file_list.top().name.c_str()) != 0) {
	    if (!aprepro.ap_options.debugging)
	      remove(aprepro.ap_file_list.top().name.c_str());	/* Delete file if temporary */
	  }
	  delete yyin;
	  aprepro.ap_file_list.pop(); 
	  yyFlexLexer::yypop_buffer_state();
	}
	else {
	  // Do not pop ap_file_list; we are rereading that file...
	  delete yyin;
	  yyFlexLexer::yypop_buffer_state();
	  yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
	  yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
	  aprepro.ap_file_list.top().lineno = 0;
	}
      }
      else {
	delete yyin;
	yyFlexLexer::yypop_buffer_state();
	aprepro.ap_file_list.pop();
	/* Turn echoing back on at end of included files. */
	echo = true;
      }
      return (0);
    }
  }

  /* Print error message to standard error and return.  Note: internally
   *   'lineno' starts at zero.  To avoid confusion, we add 1 to value
   *   when it is output.
   */

  void Scanner::yyerror (const char *s)
  {
    std::cerr << "Aprepro: ERROR:  " << s << " ("
	      << aprepro.ap_file_list.top().name<< ", line "
	      << aprepro.ap_file_list.top().lineno + 1 << ")\n";
  }

  char *Scanner::execute (char string[])
  {
    /* Push the contents of 'string' onto the stack to be reread.
     * 'string' will be surrounded by {} so it must be a valid expression.
     */

    /*
     * NOTE: The closing } has not yet been scanned in the call to execute();
     *       therefore, we read it ourselves using input(), then we push:
     *       '}{' + our string + '}' 
     */
    int i;
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      ;				/* eat up values */

    /* Allocate space for string + '}' + '{' + end_of_string */
    std::string new_string;
    new_string += "}{";
    new_string += string;
    new_string += "}";

    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
  
    std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    return (NULL);
  }

  /* Push the contents of 'string' onto the stack to be reread.
   * 'string' will not be surrounded by {}.
   */

  char *Scanner::rescan (char *string)
  {
    int i;
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input(), then we push our
     *       string and then put the closing } back on the stack last
     *       (to be read first),
     */
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      ;				/* eat up values */
    {
      aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
      std::string new_string("}");
      new_string += string;

      std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    }
    return (NULL);
  }
}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
int SEAMSFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SEAMSFlexLexer::yywrap()
{
    return 1;
}




