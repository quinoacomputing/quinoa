/*!
\page Epetra_Lesson05 Epetra Lesson 05: Redistribution
\brief Parallel data redistribution of Epetra objects

\section Epetra_Lesson05_Topics Lesson topics

The Epetra_Lesson02_Vector example introduces and describes the <a
href="http://trilinos.sandia.gov/packages/docs/dev/packages/epetra/doc/html/classEpetra__Map.html">
Epetra_Map</a> class, which is Epetra's representation of a data
distribution.  This example builds on that by showing how to use Maps
and the <a
href="http://trilinos.sandia.gov/packages/docs/dev/packages/epetra/doc/html/classEpetra__Export.html">
Epetra_Export</a> class to redistribute data.  In this case, we build
a sparse matrix on one MPI process, and redistribute it to a sparse
matrix stored in block row fashion, with an equal number of rows per
process.

\section Epetra_Lesson05_Redist Epetra data redistribution: Import and Export

The Epetra_Map class describes a data distribution over one or more
distributed-memory parallel processes.  It "maps" global indices
(unique labels for the elements of a data structure) to parallel
processes.  This ability to describe a data distribution calls for a
<i>redistribution</i> capability, that is, to reorganize or remap data
from one distribution to another.  Epetra provides this capability
through the <a
href="http://trilinos.sandia.gov/packages/docs/dev/packages/epetra/doc/html/classEpetra__Import.html">
Epetra_Import </a> and <a
href="http://trilinos.sandia.gov/packages/docs/dev/packages/epetra/doc/html/classEpetra__Export.html">
Epetra_Export </a> classes.

Import redistributes from a uniquely owned (one-to-one) Map to a
possibly not uniquely owned Map.  Export redistributes from a possibly
not uniquely owned to a uniquely owned Map.  We distinguish between
these cases both for historical reasons and for performance reasons.

Import and Export objects encapsulate and <i>remember</i> a
communication pattern for reuse.  Computing the computation pattern
requires nontrivial work, but keeping around the Import or Export
object lets you reuse that work.  This is very important for
operations that are performed frequently, such as the Import and
Export operations in Epetra's sparse matrix-vector multiply.

In both cases, Import and Export let the user specify how to combine
incoming new data with existing data that has the same global index.
For example, one may replace old data with new data or sum them
together.

\section Epetra_Lesson05_Example Code example

This example shows how to migrate the data in Epetra objects (sparse
matrices and vectors) between two different parallel distributions.

\include ./lesson05_redistribution.cpp

*/
