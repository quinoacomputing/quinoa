$TMPL_HEADERS

$TMPL_INCLUDES

namespace Xpetra {

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  // forward declaration of Vector, needed to prevent circular inclusions
  template<class S, class LO, class GO, class N> class Vector;
#endif

  $TMPL_TEMPLATE_PARAM
  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

  public:

$TMPL_DESTRUCTOR

$TMPL_PUBLIC_FUNCTIONS

    //! @name Xpetra specific
    //@{

    //! Set seed for Random function.
    virtual void setSeed(unsigned int seed)= 0;


    virtual void randomize(bool bUseXpetraImplementation = false)= 0;

    //! Set multi-vector values to random numbers. XPetra implementation
    virtual void Xpetra_randomize()
    {
        typedef Teuchos::ScalarTraits<Scalar> SCT;

        const size_t numVectors = getNumVectors();
        for (size_t i = 0; i < numVectors; i++)
        {
            Teuchos::ArrayRCP< Scalar > datai = getDataNonConst(i);

            const size_t myLength = getLocalLength();
            for(size_t j=0; j<myLength; j++)
            {
                datai[j] = SCT::random();
            }
        }
    }


    //@}

  }; // $TMPL_CLASS class

} // Xpetra namespace

$TMPL_FOOTERS
