$TMPL_HEADERS

#include "Xpetra_EpetraConfigDefs.hpp"

#include "Xpetra_Map.hpp"

#include <Epetra_Map.h>
#include <Epetra_BlockMap.h>

#include "Xpetra_Utils.hpp"
#include "Xpetra_EpetraUtils.hpp"

#include "Xpetra_ConfigDefs.hpp"

namespace Xpetra {

  // TODO: move that elsewhere
  const Epetra_Map & toEpetra(const Map<int,int> &);
  const Epetra_Map & toEpetra(const RCP< const Map<int, int> > &);
  //const RCP< const Map<int, int> > toXpetra(const RCP< const Epetra_Map > &);
  const RCP< const Map<int, int> > toXpetra(const Epetra_BlockMap &);
  //

  class $TMPL_CLASS
  $TMPL_INHERITANCE
  {

    typedef int LocalOrdinal;
    typedef int GlobalOrdinal;
    typedef Map<int, int>::node_type Node;

  public:

$TMPL_PUBLIC_FUNCTIONS

    //! Return the global index for a given local index.  Note that this returns -1 if not found on this processor.  (This is different than Epetra's behavior!)
    GlobalOrdinal getGlobalElement(LocalOrdinal localIndex) const {
      XPETRA_MONITOR("EpetraMap::getGlobalElement");

      GlobalOrdinal gid = map_->GID(localIndex);
      if (gid == map_->IndexBase()-1) return (-1);
      else                            return (gid);
     }

    //! @name Xpetra specific
    //@{

    //! Destructor.
    virtual ~EpetraMap() { } // virtual because EpetraMap used as a base class of EpetraStridedMap

    //! EpetraMap constructor to wrap a Epetra_Map object
    EpetraMap(const Teuchos::RCP<const Epetra_BlockMap> &map)
      : map_(map) { }

    //! Get the library used by this object (Epetra or Epetra?)
    UnderlyingLib lib() const { return Xpetra::UseEpetra; }

    //! Get the underlying Epetra map
    //const RCP< const Epetra_Map > & getEpetra_Map() const { return map_; }
    const Epetra_BlockMap& getEpetra_BlockMap() const { return *map_; }
    const Epetra_Map& getEpetra_Map() const { return (Epetra_Map &)*map_; } // Ugly, but the same is done in Epetra_CrsMatrix.h to get the map.

    //@}

  protected:

    RCP<const Epetra_BlockMap> map_;
    //const RCP< const Epetra_BlockMap > map_;
    //const RCP< const Epetra::Map< LocalOrdinal, GlobalOrdinal, Node > > map_;

  }; // $TMPL_CLASS class

} // Xpetra namespace

$TMPL_FOOTERS
