##############################################################################
# Zoltan Dynamic Load-Balancing Library for Parallel Applications            #
# Copyright (c) 2000, Sandia National Laboratories.                          #
# For more info, see the README file in the top-level Zoltan directory.      # 
##############################################################################
##############################################################################
# CVS File Information
#    $RCSfile$
#    $Author$
#    $Date$
#    $Revision$
##############################################################################

##############################################################################
#  Environment variables for compiling the Zoltan and test drivers for
#  IBM ASCI White compilers for ACME, SIERRA and NEVADA.
#  For explanations of these variables, please see Config.generic.
##############################################################################

##############################################################################
# Destination path for the Zoltan library.  If the destination is not defined,
# the library will be placed in the Obj_$(ZOLTAN_ARCH) subdirectory.
##############################################################################
#ZOLTAN_LIB_DIR = /space/home/kddevin

##############################################################################
# General variables used in compilation.
##############################################################################

# Architecture specific definitions.  Zoltan uses very few of these.
#   -DTFLOP flag is used to allow access to specific memory-debugging
#     features available on ASCI Red.
#   -DSMOS flag is used to exclude features not supported in the SUNMOS
#     operating system.
DEFS 			= 

##############################################################################
# Commands for building the Zoltan library.
##############################################################################
RANLIB			= ranlib
AR			= ar r

##############################################################################
# Variables for compiling C code.
##############################################################################

# C Compiler
CC			= newmpcc

# Include paths needed for the C compiler; prefix all paths with -I.
# This path should include the path for MPI, if it is not a default path.
INCLUDE_PATH		=

# Compiler flags to use when compiling debug version.
DBG_FLAGS		= -g

# Compiler flags to use when compiling optimized version.
OPT_FLAGS		= -O

# Flag indicating whether to use $(DBG_FLAGS) or $(OPT_FLAGS) in C 
# compilation.
CFLAGS = $(DBG_FLAGS)

##############################################################################
# Variables for compiling F90 code.  To include the Fortran90 interface in
# the Zoltan library, include YES_FORTRAN=1 on the make command line.  If you
# do not want to include the F90 interface in the Zoltan library, you do not
# have to provide values for the following variables.
##############################################################################

# F90 Compiler; when cross-compiling, specify the cross-compiler.
F90			= mpif90

# Local F90 Compiler; when cross-compiling, specify a F90 compiler for the
# platform on which you are doing the compilation, not for the target 
# architecture.  If you are not cross-compiling, set LOCAL_F90=$(F90).
LOCAL_F90		= f90

# Flags used in C compilation of fort/cwrap.c indicating specific 
# characteristics of the F90 compiler, $(F90).
# Specify -DFMANGLE to define how the F90 compiler needs to have 
#   C function names mangled to be recognized in the linker.  Valid 
#   options are LOWERCASE, UPPERCASE, UNDERSCORE, and UNDERSCORE2.
#   See fort/cwrap.c for more details.
# Some compilers add hidden arguments to function calls.  To make
#   the F90-C interface work correctly, these hidden arguments
#   are defined for given classes of F90 compilers.
#   If you use a PGI compiler, include -DPGI.
#   If you use a FUJITSU or Lahey compiler, specify -DFUJITSU.
# If you are not using MPI2, include -DNO_MPI2.
F90CFLAGS 		= -DFMANGLE=LOWERCASE -DNO_MPI2

# Flags used in F90 compilation of code in fort and fdriver.
FFLAGS    		= 

# Flag used in fort/sppr.f90, a simple preprocessor used for 
# conditional compilation in f90gl.  F90 compilers requiring 
# special support are absoft, nas, and sun; for these compilers
# specify spprinc.absoft, spprinc.nas, or spprinc.sun, respectively.
# 64-bit architectures should use spprinc.64bit.
# For other compilers, use spprinc.most.
SPPR_HEAD 		= spprinc.most

# Flag used by the F90 compiler to indicate in which directories
# it should look for included modules.  Unfortunately, this flag is 
# not standardized across compilers.  Various options are included
# in Makefile.nistlinux.
F90_MODULE_PREFIX 	= -I

# File with command line argument functions for various compilers.  
# This file is used only in compiling zfdrive, the F90 version of
# Zoltan's test driver program.  If you are compiling only the
# Zoltan library, you do not have to define this variable.
# The various FARG files are fdriver/farg*.  Compilers requiring
# special support are nagf90, nagf95, and nas; for these, specify
# farg_nagf90, farg_nagf95 or farg_nas, respectively.  
# For other compilers, use farg_typical.  
FARG      		= farg_typical


##############################################################################
# Third-party libraries needed by the test driver program zdrive.  These 
# variables serve as a model for linking your own application.  In particular,
# applications using Zoltan must link with MPI, and, if graph-partitioning
# algorithms are desired, either ParMETIS or Jostle.
##############################################################################

# MPI Libraries (prefix all libraries with -l) and paths to the 
# libraries (prefix all paths with -L).
MPI_LIBS			= 
MPI_LIBPATH		=

# For graph-partitioning, Zoltan includes an interface to the
# ParMETIS graph-partitioning library of G. Karypis, K. Schloegel,
# and V. Kumar, U. Minnesota.
# If you wish to exclude ParMETIS from compilation in Zoltan and 
# linking in zdrive, comment out the PARMETIS_* variables.  Otherwise,
# if you already have ParMETIS on your machine, give the path here.
# Otherwise you first need to obtain and make ParMETIS. A version of
# ParMETIS that is compatible with Zoltan is distributed with Zoltan.
# You may also obtain ParMETIS directly from UMN at 
# http://www-users.cs.umn.edu/~karypis/metis/parmetis/index.html
# After building ParMETIS, set PARMETIS_LIBPATH to the directory
# containing the libraries.  (For this example, we copied the ParMETIS
# libraries to the Obj_* directory.) PARMETIS_INCPATH should point to 
# a directory that contains the parmetis.h header file. If you don't have
# this header file on your system, you may use the header file that
# is distributed with Zoltan. Make sure that you use a header file
# that is compatible with the library version you link. 
#PARMETIS_LIBPATH 	=
#PARMETIS_INCPATH      =

# For graph-partitioning, Zoltan includes an interface to the
# Jostle graph-partitioning library of Chris Walshaw, U. Greenwich.
# If you wish to exclude Jostle from compilation in Zoltan and 
# linking in zdrive, comment out the JOSTLE_* variables.
# If you already have Jostle on your machine, give the path here.
# Otherwise, you first need to get Jostle from Chris Walshaw and
# install it on your system.
#JOSTLE_LIBPATH 	=
#JOSTLE_INCPATH 	=
#JOSTLE_SRCPATH 	=

# In addition to accepting Chaco input files, the test driver zdrive 
# can use Nemesis mesh database files as input.
# If you wish to exclude Nemesis from compilation and linking in
# zdrive, comment out the NEMESIS_* variables.  Otherwise,
# specify paths to the Nemesis, Exodus and NetCDF libraries and
# include files.
#NEMESIS_LIBPATH	=
#NEMESIS_INCPATH	=
 
