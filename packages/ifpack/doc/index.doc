/*! \mainpage Trilinos/IFPACK: Object-oriented Algebraic Preconditioner Package

\image html ../IFPACKLogo.gif

\section ifp_table Table of Contents

- \ref ifp_intro
- \ref ifp_download
- \ref ifp_configure
- \ref ifp_example 
- \ref ifp_params
- \ref ifp_tools 
- \ref ifp_error 
- \ref ifp_bugs
- \ref ifp_copyright
- \ref ifp_browser

\section ifp_intro Introduction

IFPACK, developed by Marzio Sala (ETHZ/D-INFK) and Micheal Heroux (SNL 9214), 
provides a suite of object-oriented algebraic preconditioners
for the solution of preconditioned iterative solvers.  IFPACK
constructors expect an Epetra_RowMatrix object for construction.
IFPACK is part of the Trilinos Solver Project and IFPACK object
interacts well with other Trilinos classes.  In particular, IFPACK can
be used as a preconditioner for AztecOO.

<P>Most IFPACK preconditioners can be rewritten as additive Schwarz methods,
of overlapping domain decomposition type. The user can adopt
a minimal-overlap (that is, zero-row overlap), 
or ask IFPACK to extend the overlap.
The resulting preconditioner reads:
\f[
P_{IFPACK}^{-1} = \sum_{i = 0}^{NumProcs-1} P_i A_i^{-1} R_i
\f]
where \f$R_i\f$ is the restriction operator from the global vector, to the
overlapping subdomain \f$i\f$,
and \f$P_i\f$ is the prolongator operator. 
\f$P_i\f$ is generally the transpose of \f$R_i\f$ (in which case
the resulting preconditioner is symmetic).
It is assumed that each subdomain
is assigned to a different processor.

<P>A key component of the previous formula is a strategy to apply
\f$A_i^{-1}\f$. Using IFPACK, this can be defined by one of the
following:
- one or more steps of a point/block method (like Jacobi and Gauss-Seidel);
- an incomplete factorization (for symmetric and non-symmetric matrices, with
  dropping based on graph or on values);
- an exact LU solve on each subdomain (using Amesos' factorizations).

More precisely, the choices for \f$A_i^{-1}\f$ are:

<ul>

<li> Point relaxation preconditioners (through class Ifpack_PointRelaxation).
  Point relaxation preconditioners are probably the simplest iterative methods,
  and are generally used as smoothers in multilevel
  methods (for instance, within ML). Available choices are:
  - Jacobi
  - Gauss-Seidel
  - symmetric Guass-Seidel

<li> Block relaxation preconditioners (through class Ifpack_BlockRelaxation).
Block relaxation preconditioners represent an extension of point preconditioners.  The
local matrix \f$A_i\f$ is divided into blocks, then a relaxation method is
applied on the block structure of \f$A_i\f$. 
  Available choices are:
  - block Jacobi
  - block Gauss-Seidel
  - block symmetric Gauss-Seidel

The code extracts the diagonal blocks (the application of whose
inverses is required), and stored them either as dense or as sparse matrices.
Dense matrices should be used if the dimension of each block is small, since
LAPACK routines are used to factorize the block and to perform the backsolve.
For large blocks, instead, it is suggested to store the blocks are sparse
matrices (Epetra_CrsMatrix's). Any IFPACK preconditioner derived from
Ifpack_Preconditioner can be used to apply the inverse of the diagonal blocks.

<li> Point incomplete factorizations (through classes Ifpack_IC, Ifpack_ICT,
  Ifpack_ILU, Ifpack_ILUT). See \ref ifp_ilu .

<li> Exact factorizations (through class Ifpack_Amesos):
  - all Amesos classes can be used to compute the LU factorization
    of a given matrix.

<li> Chebyshev polynomials (through class Ifpack_Chebyshev).

</ul>

\note IFPACK preconditioners can be used as smoothers for multilevel solvers,
like ML.

\section ifp_download Download IFPACK

IFPACK can be downloaded from the web page http://trilinos.sandia.gov/download/

\section ifp_configure Configuring IFPACK

IFPACK is configured with autotools. IFPACK is enabled by default
if configured at the Trilinos level (please refer to the Trilinos
documentation for more details). This section briefly recalls some
of the configure parameters that affect the IFPACK compilation. For
a complete list of parameters, please type
\code
% $TRILINOS_HOME/packages/ifpack/configure --help
\endcode

An (incomplete) list of parameters recognized by the IFPACK configure is
reported below.

- \c "enable-amesos" enables the support for Amesos (off by default).
- \c "enable-aztecoo" enables the support for AztecOO (on by default).
- \c "enable-teuchos" enables the support for Teuchos (off by default).
- \c "enable-thyra" enables the support for Thyra (off by default).
- \c "enable-triutils" enables the support for Triutils (on by default).
- \c "enable-ifpack-metis" enables the support for the METIS package. The
  location of the header files should be specified using 
  \c "--with-incdirs=-I/include/location", the path of the METIS library with
  \c "--with-ldflags=-L/lib/location", and the library name using
  \c "--with-libs=-lmetis-name.".

\note IFPACK cannot be build without Epetra. Most of IFPACK preconditioners
cannot be used without the Teuchos library. Most of the examples requires
triutils and AztecOO.
  
\section ifp_example Examples of Usage

This section details how to use the IFPACK Factory class.

<P>Probably, the easiest way to use IFPACK is through the function class
Ifpack. This is a \e factory class, that contains only one method,
Create(). A call to Create() returns a pointer to a newly-created
IFPACK object. The user is responsible of deleting this object.

An example of usage is reported by the following code:
\code
#include "Ifpack.h"
...
Ifpack Factory;
Epetra_RowMatrix* A; // A is already FillComplete()'d
                     // but its values can still change (not its structure)
string PrecType = "Amesos"; // exact solve on each subdomain 
int OverlapLevel = 1; // one row of overlap among the processes
Ifpack_Preconditioner* Prec = Factory.Create(PrecType, A, OverlapLevel);
assert (Prec != 0);

IFPACK_CHK_ERR(Prec->SetParameters(List));
IFPACK_CHK_ERR(Prec->Initialize());
IFPACK_CHK_ERR(Prec->Compute());

// we can query the status of the preconditioner
assert (Prec->IsInitialized() == true);
assert (Prec->IsComputed() == true);

// information about the preconditioner
// 1.- number of initialization phases
cout << Prec->NumInitialize() << endl; 
// 2.- number of computation phases
cout << Prec->NumCompute() << endl; 
// 3.- number of applications of the prconditioner
cout << Prec->NumApplyInverse() << endl; 
// we can query for flops and CPU time as well, consult the
// documentation of Ifpack_Preconditioner, or simply write
cout << *Prec;

// now destroy the preconditioner
delete Prec;
\endcode

<P>Although the Ifpack factory is appropriate for most users, 
it is possible to create IFPACK preconditioners by handling
directly an Ifpack_AdditiveSchwarz object.
The preconditioner of the previous example is equivalent to
the one created in the following fragment of code:
\code
#include "Ifpack_AdditiveSchwarz.h"
...
Epetra_RowMatrix* A; 
int OverlapLevel = 1;
Ifpack_AdditiveSchwarz Prec<Ifpack_Amesos> (A, OverlapLevel);
\endcode

Another example is the following, where the local solve is
a block Jacobi method, which uses dense containers (LAPACK).
\code
#include "Ifpack_AdditiveSchwarz.h"
#include "Ifpack_DenseContainer.h"
#include "Ifpack_BlockJacobi.h"
...
Epetra_RowMatrix* A; 
int OverlapLevel = 1;
Ifpack_AdditiveSchwarz Prec<Ifpack_BlockJacobi<Ifpack_DenseContainer> > (A, OverlapLevel);
\endcode

Using sparse containers and Amesos the code may look as follows.
\code
#include "Ifpack_AdditiveSchwarz.h"
#include "Ifpack_SparseContainer.h"
#include "Ifpack_BlockJacobi.h"
#include "Ifpack_Amesos.h"
...
Epetra_RowMatrix* A; 
int OverlapLevel = 1;
Ifpack_AdditiveSchwarz Prec<Ifpack_BlockJacobi<Ifpack_SparseContainer<Ifpack_Amesos> > > (A, OverlapLevel);
\endcode

<P>Other examples are reported in the \c example subdirectory with several
comments:
- \ref ifp_ex_factory shows how to use Ifpack factory to create
                            a variety of IFPACK preconditioners.  This is the simplest way to use IFPACK.  The example details all the phases of IFPACK. Difficulty level: beginners.
- \ref ifp_ex_mm reads an MatrixMarket matrix (a simple
                             format that contains i,j and a(i,j) of
                             all nonzero elements), redistribute
                             the matrix to all avaialble processes
                             (using a linear distribution), and
                             solve the problem with AztecOO and IFPACK.
                             Matrices downloaded from
                             math.nist.gov/MatrixMarket/ in .mtx
                             format can be used with this example. A
                             small example is reported.
                             Difficulty level: beginners.
- \ref ifp_ex_amesos      shows how to use exact LU solvers on
                            each subdomain, using Amesos. This example
                            is very similar to the previous one.
                            Difficulty level: beginners.
- \ref ifp_ex_vict     shows how to define incomplete Cholesky
                            factorizations (with dropping based on values),
			    and tune parameters. Although
                            an vICT factorization can be constructed using
                            the Factory (as done in file
                            Ifpack_ex_Factory.cpp), this example tells
                            the real story: how to define an
                            Ifpack_AdditiveSchwar which uses vICT on
                            each subdomain.
                            Difficulty level: intermediate.
- \ref ifp_ex_block  shows how to define block preconditioner
                            in the more general case, using
                            Ifpack_AdditiveSchwarz.
                            Difficulty: advanced.

\section ifp_params List of Supported Parameters

The complete list of supported parameters is reported below.

- \c "relaxation: type": specifies the type of point and block relaxation scheme. Valid
  values: 
  - \c "Jacobi";
  - \c "Gauss-Seidel";
  - \c "symmetric Gauss-Seidel";

- \c "relaxation: sweeps": specifies the number of sweeps in the application
  of point relaxation schemes. 

- \c "relaxation: damping factor": specifies the damping factor in the
  application of point relaxation schemes. 

- \c "relaxation: min diagonal value": replace
  diagonal values below this value with this value (only for point relaxation).

- \c "relaxation: zero starting solution": if \c true, uses the values in the vector
  to be preconditioned as starting solution. Otherwise, use the zero vector
  as starting solution.

- \c "relaxation: backward mode": Does Gauss-Seidel in backward order (rather than forward)

- \c "relaxation: use l1": Use the "L1-Gauss-Seidel" method of Baker, Falgout, Kolev and Yang (SISC 2011).
  This can be especially advantageous for using Gauss-Seidel and symmetric Gauss-Seidel in parallel.

- \c "relaxation: l1 eta": Sets the "eta" parameter used by the L1 GS/SGS method.

- \c "relaxation: number of local smoothing indices": Sets the number of
  local unknowns over which to smooth.  This is used for selective (local) smoothing.

- \c "relaxation: local smoothing indices": A list of local unknowns over which to smooth.
  This can be used for selective (local) smoothing or to force the method to smooth unknowns
  in a particular order (such as upwind smoothing).

- \c "partitioner: type": specifies the scheme to adopt to partition
  the graph (for block relaxation methods only). Valid values: 
  - \c "linear" (uses a linear decomposition);
  - \c "greedy" (uses a simple greedy algorithm);
  - \c "metis" (calls METIS, this required \c --enable-ifpack-metis).
  - \c "equation" (groups together all the nodes belonging to the same
    equation. The number of equation is specified using \c "partitioner: local
    parts", and it is supposed that the equation for each grid node are
    ordered consecutevely).

- \c "partitioner: overlap": specifies the overlap among the blocks
  which can differ from the overlap among the processors. Note that
  only the Jacobi block relaxation scheme can take advantage
  of non-zero overlaps.

- \c "partitioner: local parts": specifies the number of local blocks.

- \c "partitioner: root node": specifies the root node for greedy algorithm.

- \c "partitioner: use symmetric graph": if \c true, METIS will partition
  the graph of A + A<sup>T</sup>. If \c false, METIS will partition the graph
  of A. Note that METIS can core dump if the input graph is non-symmetric.
  Users should set this option to \c false only when the graph is
  symmetric. If the non-symmetry is determined by Dirichlet nodes, then
  the singleton filter should create a symmetric graph. Note also that
  dropping techniques applied to non-symmetric matrices can result in
  non-symmetric graph.

- \c "amesos: solver type": defines the Amesos solver to be
  used by class Ifpack_Amesos. Valid values:
  - \c "Amesos_Lapack" (use Amesos interface to LAPACK);
  - \c "Amesos_Klu" (use Amesos' internal solver KLU);
  - \c "Amesos_Umfpack" (use UMFPACK interface);
  - \c "Amesos_Superlu" (use serial SuperLU interface);
  - \c "Amesos_Mumps" (use MUMPS interface);
  - \c "Amesos_Dscpack" (use DSCPACK interface).
 
- \c "fact: level-of-fill": defines the level of fill for ILU
  factorizations. This is based on powers of the graph, so 
  the value 0 means no-fill.

- \c "fact: ilut level-of-fill": defines the level of fill for ILUT
  factorizations. This is a ratio, so 1.0 means same number of
  nonzeros for the ILU factors as in the original matrix.

- \c "fact: ict level-of-fill": defines the level of fill for ICT
  factorizations, and is a fill-ratio as for ILUT. 
  Currently this parameter is used in both Ifpack_IC and Ifpack_ICT.

- \c "fact: absolute threshold": defines the value \f$\alpha\f$ 
  to add to each diagonal
  element (times the signum of the actual diagonal element), 
  for incomplete factorizations only.

- \c "fact: relative threshold": defines \f$\rho\f$, so that the diagonal 
  element of the matrix (without the contribution specified by
  \c "fact: absolute threshold") is multiplied by \f$rho \f$. 

- \c "fact: relax value": if different from zero, the elements dropped during
  the factorization process will be added to the diagonal term, multiplied by
  the specified value.

- \c "schwarz: combine mode": defines how values corresponding to
  overlapping nodes are handled (after the solution of the local problem).
  Any Epetra_CombineMode is valid. Users should set this value to
  \c Add if interested in a symmetric preconditioner. Otherwise,
  the default value of \c "Zero" usually results in better convergence.
  Other details on combine mode are reported. 
  All Ifpack preconditioners work on parallel distributed memory computers by
  using the row partitioning the user input matrix to determine the
  partitioning for local ILU factors.  If the level of overlap is set to zero,
  the rows of the user matrix that are stored on a given processor are treated
  as a self-contained local matrix and all column entries that reach to
  off-processor entries are ignored.  Setting the level of overlap to one
  tells Ifpack to increase the size of the local matrix by adding rows that
  are reached to by rows owned by this processor.  Increasing levels of
  overlap are defined recursively in the same way.  For sufficiently large
  levels of overlap, the entire matrix would be part of each processor's local
  ILU factorization process.  Level of overlap is defined during the
  construction of the Ifpack_IlukGraph object.  The application of the inverse
  of the local matrix results in redundant approximations for any elements of
  y that correspond to rows that are part of more than one local ILU factor.
  The combine mode defines how these redundancies are handled using the
  Epetra_CombineMode enum.  The default (\c Zero) means to zero out all values
  of y for rows that were not part of the original matrix row distribution.

- \c "schwarz: compute condest": it \c true, compute a cheap estimate
  of the condition number. Warning: this is not the REAL conditioner number,
  but only a very light-weight indication of how well the current
  preconditioner is expected to behave.

- \c "schwarz: filter singletons": it \c true, singletons in the
  local matrix are removed.

- \c "schwarz: reordering type": it \c none, no reordering is applied.
  If \c rcm or \c metis, a reverse Cuthill-McKee or METIS are used
  to reorder to local matrix.

<P>The table below reports the C++ type and the default value of each
parameter.
<center>
<table>
<tr>
<td><b>Parameter name</b></td><td><b>C++ type</b></td><td><b>Defaut value</b></td>
</tr> <tr>
<td>\c "relaxation: type"              </td><td>\c string </td><td>\c "Jacobi" </td>
</tr> <tr>
<td>\c "relaxation: sweeps"            </td><td>\c int    </td><td>\c "1" </td>
</tr> <tr>
<td>\c "relaxation: damping factor"    </td><td>\c double </td><td>\c "1.0" </td>
</tr> <tr>
<td>\c "relaxation: min diagonal value" </td><td>\c double </td><td>\c "0.0" </td>
</tr> <tr>
<td>\c "relaxation: zero starting solution" </td><td>\c bool </td><td>\c "true" </td>
</tr> <tr>
<td>\c "relaxation: backward mode" </td><td>\c bool </td><td>\c "false" </td>
</tr> <tr>
<td>\c "relaxation: use l1" </td><td>\c bool </td><td>\c "false" </td>
</tr> <tr>
<td>\c "relaxation: l1 eta" </td><td>\c double </td><td>\c "1.5" </td>
</tr> <tr>
<td>\c "relaxation: number of local smoothing indices" </td><td>\c int </td><td>\c "A->NumMyRows()" </td>
</tr> <tr>
<td>\c "relaxation: local smoothing indices" </td><td>\c int* </td><td>\c "0" </td>
</tr> <tr>
<td>\c "partitioner: type"        </td><td>\c string </td><td>\c "greedy" </td>
</tr> <tr>
<td>\c "partitioner: overlap"     </td><td>\c int    </td><td>\c "0" </td>
</tr> <tr>
<td>\c "partitioner: local parts" </td><td>\c int    </td><td>\c "1" </td>
</tr> <tr>
<td>\c "partitioner: root node"   </td><td>\c int    </td><td>\c "0" </td>
</tr> <tr>
<td>\c "partitioner: use symmetric graph" </td><td>\c bool </td><td>\c "true" </td>
</tr> <tr>
<td>\c "amesos: solver type"      </td><td>\c string </td><td>\c "Amesos_Klu" </td>
</tr> <tr>
<td>\c "fact: absolute threshold"      </td><td>\c double </td><td>\c "0.0" </td>
</tr> <tr>
<td>\c "fact: relative threshold"      </td><td>\c double </td><td>\c "0.0" </td>
</tr> <tr>
<td>\c "fact: relax value"      </td><td>\c double </td><td>\c "0.0" </td>
</tr> <tr>
<td>\c "schwarz: combine mode"    </td><td>\c Epetra_CombineMode </td><td>\c "Zero" </td>
</tr> <tr>
<td>\c "schwarz: compute condest"  </td><td>\c bool </td><td>\c "true" </td>
</tr> <tr>
<td>\c "schwarz: reordering type"  </td><td>\c string </td><td>\c "none" </td>
</tr> <tr>
<td>\c "schwarz: filter singletons"  </td><td>\c string </td><td>\c "false" </td>
</tr>
</table>
</center>

\note Whenever possible, the Teuchos::ParameterList given in input
to SetParameters() is only parsed. There are cases, however, where the
solver needs to store a copy of this list, because it will be used
in a later stage. This happens, for example, in block relaxation schemes that
use Amesos as local solver. As the the list given in input to SetParameters()
is parsed or copied, this list can go out of scope after this function
returns. 

\section ifp_tools Brief Description IFPACK Classes

IFPACK classes are divided into classes for users and classes for developers.

Users' Tools

- Ifpack_PointRelaxation and Ifpack_BlockRelaxation should be considered to
  define relaxation preconditioners (or smoothers);
- Ifpack_IC, Ifpack_ICT are incomplete Cholesky factorizations;
- Ifpack_ILU, Ifpack_ILUT are incomplete LU factorizations;
- Ifpack_AdditiveSchwarz is the general handle to define overlapping Schwarz
  methods with overlap.
- The matrix to be preconditioned can be filtered before performing the 
  actual factorization. Available filters are Ifpack_LocalFilter,
  Ifpack_DropFilter, Ifpack_SparsityFilter, Ifpack_DiagonalFilter, 
  Ifpack_ReoderFilter, Ifpack_SingletonFilter;
- Function Ifpack_PrintSparsity() and Ifpack_PrintSparsity_Simple() can be
  used to print out the sparsity pattern of an Epetra_RowMatrix (as PS, or on
  screen);
- Function Ifpack_Analyze() can be used to analyze basic properties of a given
  Epetra_RowMatrix; see an example of output \ref ifp_analyze.
- Function Ifpack_AnalyzeMatrixElements() can be used to evaluate the
  distribution of matrix elements; see an example of output \ref ifp_matrix.
- Function Ifpack_AnalyzeVectorElements() can be used to evaluate the
  distribution of vector elements; see an example of output \ref ifp_vector.

Developers' Tools 

- Graphs are derived from the pure virtual class Ifpack_Graph
  (whose documentation details the concept of graphs for IFPACK).
  Concrete implementations are Ifpack_Graph_Epetra_CrsGraph 
  and Ifpack_Graph_Epetra_RowMatrix;
- Containers are derived from the pure virtual class Ifpack_Container
  (whose documentation describes what a container is). Concrete
  implementations are Ifpack_DenseContainer and Ifpack_SparseContainer;
- Reorderings are derived from the pure virtual class Ifpack_Reordering.
  Concrete implementations are
  Ifpack_RCMReordering and Ifpack_METISReordering;
- Partitioners are derived from the pure virtual class Ifpack_Partitioner.
  Concrete
  implementations are Ifpack_LinearPartitioner, Ifpack_METISPartitioner,
  Ifpack_GreedyPartitioner, Ifpack_EquationPartitioner, and
  Ifpack_UserPartitioner. See Ifpack_OverlappingPartitioner;
- Ifpack_ReorderFilter and Ifpack_SingletonFilter are used in
  Ifpack_AdditiveSchwarz.

\section ifp_error Error Table

The following table defines the class of IFPACK errors.
Return code should be checked using the IFPACK_CHK_ERR() macro.
In general terms, we follow this convention:
- a return value of 0 means that the called 
function or method successfully completed;
- a negative return function means that an error occurred;
- a positive value is a warning for the user.

<center>
<table>
<tr>
<td><b>Error Code</b></td><td><b>Meaning</b></td>
</tr>
<tr>
<td>-1</td><td>Generic Error (called method or function returned an error)</td>
</tr>
<tr>
<td>-2</td><td>Input data not valid (wrong parameter, out-of-bounds, wrong
dimensions, matrix is not square,...)</td>
</tr>
<tr>
<td>-3</td><td>Data has not been correctly pre-processed</td>
</tr>
<tr>
<td>-4</td><td>Problem encountered during application of the 
algorithm (division by zero, out-of-bounds, ...)</td>
</tr>
<tr>
<td>-5</td><td>Memory allocation error</td>
</tr>
<tr>
<td>-98</td><td>Feature is not supported</td>
</tr>
<tr>
<td>-99</td><td>Feature is not implemented yet (check \ref ifp_bugs, or submit a bug)</td>
</tr>
</table>
</center>

\section ifp_bugs Known Bugs and Future Developments

- IFPACK does not support Epetra matrices whose OperatorDomainMap() is different from the  OperatorRangeMap() and from RowMatrixRowMap(). Handling of this particular case is under development for class Ifpack_AdditiveSchwarz only.
- not all IFPACK preconditioners work correctly when \c UseTranspose() \c ==
  true. Ifpack_PointRelaxation and Ifpack_BlockRelaxation do not support \c
  UseTranspose, while Ifpack_ILU, Ifpack_ILUT and Ifpack_Amesos do.


\section ifp_copyright Copyright

\verbatim
Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
license for use of this work by or on behalf of the U.S. Government.

This library is free software; you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation; either version 2.1 of the
License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
USA
\endverbatim

\section ifp_browser Browse all of Ifpack as a single doxygen collection

You can browse all of Ifpack as a <A HREF="../../browser/doc/html/index.html">single
doxygen collection</A>. Warning, this is not the recommended way to learn
about Ifpack software.  However, this is a good way to browse the <a
href="../../browser/doc/html/dirs.html">directory structure of ifpack</a>, to <a
href="../../browser/doc/html/files.html">locate files</a>, etc.

*/

/*! \page ifp_ex_factory Ex_Factory

\include Ifpack_ex_Factory.cpp

*/

/*! \page ifp_ex_amesos Ex_AmesosPrec

\include Ifpack_ex_Amesos.cpp

*/

/*! \page ifp_ex_vict Ex_vIctPrec

\include Ifpack_ex_vIct.cpp

*/

/*! \page ifp_ex_block Ex_BlockRelaxationPrec

\include Ifpack_ex_BlockPrec.cpp

*/

/*! \page ifp_ex_mm Ex_MatrixMarket

\include Ifpack_ex_MatrixMarket.cpp

*/

/*! \page ifp_analyze Usage of Ifpack_Analyze().

The output of function Ifpack_Analyze() applied to matrix fidap019.rua is as
reported below.
\code
================================================================================
Label                          = Epetra::CrsMatrix
Global rows                    = 12005
Global columns                 = 12005
Stored nonzeros                = 259863
Nonzeros / row                 = 21
Estimated storage (Mbytes)     = 3.16638

Actual nonzeros                = 259561
Nonzeros in strict lower part  = 123929
Nonzeros in strict upper part  = 123929

Empty rows                     = 0                    ( 0 %)
Dirichlet rows                 = 302                  ( 2.51562 %)
Diagonally dominant rows       = 402                  ( 3.3486 %)
Weakly diag. dominant rows     = 704                  ( 5.86422 %)

Maximum bandwidth              = 169

                                 one-norm       inf-norm       Frobenius
                                 ========       ========       =========

A                              = 7.29106e+07    7.29106e+07    3.25455e+08
A + A^T                        = 7.29106e+07    7.29106e+07    3.25455e+08
A - A^T                        = 2.00455        2.00455        19.3218

                                 min            avg            max
                                 ===            ===            ===

 A(i,j)                        = -1.36169e+07   3440.55        2.75322e+07
|A(i,j)|                       = 1              130430         2.75322e+07


 A(k,k)                        = 0.000198963    626967         2.75322e+07
|A(k,k)|                       = 0.000198963    626967         2.75322e+07
================================================================================
\endcode
*/

/*! \page ifp_matrix Usage of Ifpack_AnalyzeMatrixElements()

The output of function Ifpack_AnalyzeMatrixElements() applied to matrix fidap019.rua is as
reported below.
\code
================================================================================
Label of matrix = Epetra::CrsMatrix

Elements in [-1.361693e+07, -9.502017e+06) =         48 ( =  0.02 %)
Elements in [-9.502017e+06, -5.387105e+06) =        220 ( =  0.08 %)
Elements in [-5.387105e+06, -1.272193e+06) =       2396 ( =  0.92 %)
Elements in [-1.272193e+06, +2.842719e+06) =     255985 ( = 98.51 %)
Elements in [+2.842719e+06, +6.957631e+06) =        939 ( =  0.36 %)
Elements in [+6.957631e+06, +1.107254e+07) =        149 ( =  0.06 %)
Elements in [+1.107254e+07, +1.518745e+07) =         69 ( =  0.03 %)
Elements in [+1.518745e+07, +1.930237e+07) =         36 ( =  0.01 %)
Elements in [+1.930237e+07, +2.341728e+07) =         15 ( =  0.01 %)
Elements in [+2.341728e+07, +2.753219e+07) =          5 ( =  0.00 %)
================================================================================\endcode
*/

/*! \page ifp_vector Usage of Ifpack_AnalyzeVectorElements()

The output of function Ifpack_AnalyzeVectorElements() applied to the diagonal of matrix fidap019.rua is as
reported below.
\code
================================================================================
Vector label = Epetra::Vector

Elements in [+1.989626e-04, +2.753219e+06) =      11246 ( = 93.68 %)
Elements in [+2.753219e+06, +5.506438e+06) =        391 ( =  3.26 %)
Elements in [+5.506438e+06, +8.259657e+06) =        154 ( =  1.28 %)
Elements in [+8.259657e+06, +1.101288e+07) =         88 ( =  0.73 %)
Elements in [+1.101288e+07, +1.376610e+07) =         52 ( =  0.43 %)
Elements in [+1.376610e+07, +1.651931e+07) =         31 ( =  0.26 %)
Elements in [+1.651931e+07, +1.927253e+07) =         21 ( =  0.17 %)
Elements in [+1.927253e+07, +2.202575e+07) =         13 ( =  0.11 %)
Elements in [+2.202575e+07, +2.477897e+07) =          5 ( =  0.04 %)
Elements in [+2.477897e+07, +2.753219e+07) =          3 ( =  0.02 %)
================================================================================
\endcode
*/

/*! \page ifp_ilu General description of incomplete factorizations

  The IFPACK incomplete factorizations (IC, ICT, ILU, ILUT) compute a "Relaxed" LDL^T or ILU factorization 
  of a given Epetra_RowMatrix.  The factorization that is produced is a function of several parameters.

<ol>
  <li> The pattern of the matrix (for Ifpack_IC and Ifpack_ILU) - All fill is
    derived from the original matrix nonzero structure.  Level zero fill is
    defined as the original matrix pattern (nonzero structure), even if the
    matrix value at an entry is stored as a zero. (Thus it is possible to add
    entries to the ILU factors by adding zero entries the original matrix.)

  <li> Level of fill (for Ifpack_IC and Ifpack_ILU) - (integer value) Starting
    with the original matrix pattern as level fill of zero, the next level of
    fill is determined by analyzing the graph of the previous level and
    determining nonzero fill that is a result of combining entries that were
    from previous level only (not the current level).  This rule limits fill
    to entries that are direct decendents from the previous level graph.  Fill
    for level k is determined by applying this rule recursively.  For
    sufficiently large values of k, the fill would eventually be complete and
    an exact LU factorization would be computed.  object.

  <li> Level of fill (for Ifpack_ICT and Ifpack_ILUT) - (double value) During the
    factorization, a complete row of the factors is computed, then only the
    fill-in-value * nonzeros-in-row elements with largest magnitude are kept
    (fill-in-value is the specified level of fill, and nonzeros-in-row is the
    number of nonzeros in the original matrix nonzero structure). 

  <li> Drop tolerance (for Ifpack_ICT and Ifpack_ILUT) - (double value)
    Entries with magnitude less than the drop tolerance will be dropped. 
    Ifpack may perform this dropping on the original matrix A instead of the factors L and U. Thus, Ifpack_ILUT will give a slightly different preconditioner than the standard ILUT.

  <li>  Fraction of relaxation - Ifpack_ILU computes the ILU factorization
     row-by-row.  As entries at a given row are computed, some number of them
     will be dropped because they do match the prescribed sparsity pattern.
     The relaxation factor determines how these dropped values will be
     handled.  If the RelaxValue is zero, then these extra entries will by
     dropped.  This is a classical ILU approach.  If the RelaxValue is 1, then
     the sum of the extra entries will be added to the diagonal.  This is a
     classical Modified ILU (MILU) approach.  If RelaxValue is between 0 and
     1, then RelaxValue times the sum of extra entries will be added to the
     diagonal. 

  For most situations, RelaxValue should be set to zero.  For certain kinds of
  problems, e.g., reservoir modeling, there is a conservation principle
  involved such that any operator should obey a zero row-sum property.  MILU
  was designed for these cases and you should set the RelaxValue to 1.  For
  other situations, setting RelaxValue to some nonzero value may improve the
  stability of factorization, and can be used if the computed ILU factors are
  poorly conditioned.

  <li> Diagonal perturbation - Prior to computing the factorization, it is
    possible to modify the diagonal entries of the matrix for which the
    factorization will be computing.  If the absolute and relative
    perturbation values are zero and one, respectively, the factorization will
    be compute for the original user matrix A.  Otherwise, the factorization
    will computed for a matrix that differs from the original user matrix in
    the diagonal values only. More details can be found below. 

  Given the above method to estimate the conditioning of the incomplete
  factors, if we detect that our factorization is too ill-conditioned we can
  improve the conditioning by perturbing the matrix diagonal and restarting
  the factorization using this more diagonally dominant matrix.  In order to
  apply perturbation,
  prior to starting
  the factorization, we compute a diagonal perturbation of our matrix
  \f$A\f$ and perform the factorization on this perturbed
  matrix.  The overhead cost of perturbing the diagonal is minimal since
  the first step in computing the incomplete factors is to copy the
  matrix \f$A\f$ into the memory space for the incomplete factors.  We
  simply compute the perturbed diagonal at this point. 
  The actual perturbation values we use are the diagonal values \f$(d_1, d_2, \ldots, d_n)\f$
  with \f$d_i = \rho sgn(d_i)\alpha + d_i\rho\f$, \f$i=1, 2, \ldots, n\f$, where
  \f$n\f$ is the matrix dimension and \f$sgn(d_i)\f$ returns
  the sign of the diagonal entry.  This has the effect of
  forcing the diagonal values to have minimal magnitude of \f$\alpha\f$ and
to increase each by an amount proportional to \f$\rho\f$, and still keep
the sign of the original diagonal entry.

</ol>

*/
