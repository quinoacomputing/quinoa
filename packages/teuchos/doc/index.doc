/*! \mainpage Teuchos:  The Trilinos Tools Library

\section Teuchos_outline Outline

<ul>
<li>\ref Teuchos_intro
<li>\ref Teuchos_contributors
<li>\ref Teuchos_startup
  <ul>
  <li>\ref Teuchos_sclasses
  <li>\ref Teuchos_eclasses
  </ul>
<li>\ref Teuchos_browser
</ul>

\section Teuchos_intro Introduction

Teuchos provides a suite of common tools for Trilinos for developers to use.  These tools 
include BLAS/LAPACK wrappers, smart pointers, parameter lists, XML parsers, etc. 

\section Teuchos_contributors Teuchos Contributors

The following people have contributed to the development of Teuchos:

<ul>
	<li> Chris Baker, Oak Ridge National Lab, bakercg@ornl.gov
	<li> Roscoe Bartlett, Sandia National Labs, rabartl@sandia.gov
	<li> Michael Heroux, Sandia National Labs, maherou@sandia.gov
	<li> Kris Kampshoff, University of Minnesota, kamp@cs.umn.edu
	<li> Kevin Long, Sandia National Labs, krlong@sandia.gov
	<li> Kurtis Nusbaum, Sandia National Labs, klnusbaum@gmail.com
	<li> Paul Sexton, University of Illinois-Chicago, pmsext@software.sandia.gov
	<li> Heidi Thornquist (Package Lead), Sandia National Labs, hkthorn@sandia.gov
</ul>

\section Teuchos_startup Overview of Teuchos

Teuchos contains a number of classes.  These classes have been divided 
between a "standard" build and an "extended" build.  The "standard" build has shown to be 
a portable subset of the Teuchos tools and is built by default when Teuchos is enabled (<i>--enable-teuchos</i>).  
The "extended" build is also portable, but contains more special purpose tools like XML parsing and
communicators (<i>--enable-teuchos-extended</i>).

Additionally, boundschecking for some of the container classes can be enabled through configuring 
Trilinos with <i>--enable-teuchos-abc</i>.  <b>Boundschecking incurs a significant performance penalty and so is 
not recommended for production builds.</b>  To enable complex arithmetic in the computational classes, 
Teuchos must be configured with <i>--enable-teuchos-complex</i>.

\subsection Teuchos_sclasses Teuchos "Standard" Classes

<ul>

<li> <b>Low-level math</b>

  <ul>

  <li> Numerical scalar traits : Teuchos::ScalarTraits - a traits class defining basic propertys and elementary
  functions for various scalar data types to be used in numerical computations.

  <li> BLAS wrapper class: Teuchos::BLAS - A ``thin'' layer of C++ code wrapping the basic linear algebra subprograms (BLAS).
       This class provides a single instance interface between Teuchos and the BLAS.  In this way we can easily
       switch BLAS interfaces and manage the C++/Fortran translation differences that exist between different
       computer systems.  This class also provides a very convenient
       way to templatize the BLAS.

  <li> LAPACK wrapper class: Teuchos::LAPACK - A ``thin'' layer of C++ code wrapping LAPACK.  Like Teuchos::BLAS,
       it provides nice C++ access to LAPACK.

  <li> Serial Dense Matrix class:  Teuchos::SerialDenseMatrix - A templated, dense rectangular matrix class that provides basic
       operations like addition, multiplication, scaling, logical comparison, norms, etc.  This class also provides support for a dense
       matrix that needs to be replicated across processors in a parallel application.  Teuchos::SerialDenseVector inherits from
       Teuchos::SerialDenseMatrix, providing some additional methods that are useful to dense vectors.  Boundschecking
       can be turned on at compile time with the
       <tt>--enable-teuchos-abc </tt> configure flag.

  </ul>

<li> <b> Parameter Options: </b>

  <ul>

  <li> Parameter Entry:  Teuchos::ParameterEntry - A structure that holds a Teuchos::any object as the value
       and information on the status of the parameter.  The type of parameter is chosen through the templated Set/Get methods.
       Teuchos::ParameterEntry object is held as the "value" in the Teuchos::ParameterList map.

  <li> Parameter List:  Teuchos::ParameterList - A templated parameter list which holds a map of <key,value> pairs, where the
       "value" is a Teuchos::ParameterEntry object and the "key" is a string object.  The type of parameter is chosen through
       the templated Set/Get methods, which allows it to be any standard type (float, double, int, ...) or another parameter list.

  <li> Commandline arguments: Teuchos::CommandLineProcessor - processes commandline arguments from (argc,argv[])
       in a validated manner and automatically generates a documented --help option. 

  </ul>

<li> <b> Memory Management: </b>

  For a detailed description of the Teuchos memory management classes, see the
  report <a
  href="http://www.cs.sandia.gov/~rabartl/TeuchosMemoryManagementSAND.pdf">Teuchos
  C++ Memory Management Classes, Idioms, and Related
  Topics: The Complete Reference</a>.  An abbreviated table of contents can be
  found in the Preface of the document.

  The classes are:

  <ul>

  <li> Teuchos::Ptr:  Light-weight smart pointer class for replacing the use
  if raw C++ pointers for pointing to a single object in funtion argument
  lists.  This is only for non-persisting relationships.

  <li> Teuchos::RCP: Reference-counted smart pointer class for managing
  dynamically allocated memory to single object that is safe under multiple
  inheritance.  This is only for persisting relationships.  See
  <a href="RefCountPtrBeginnersGuideSAND.pdf">this report</a>

  <li> Teuchos::ArrayRCP:  Reference-counted pointer for managing dynamically
  allocated array memory.  This is a general replacement for a raw C++ pointer
  to handle an array.  This is only for persisting relationships.

  <li> Teuchos::ArrayView: Light-weight replacement for raw pointers for
  passing arrays into functions.  This is only for non-persisting
  relationships.

  <li> Teuchos::Array: Templated array class idential to the STL vector,
  but with optional very strong debug-mode runtime checking and full
  integration with other array types.

  <li> Teuchos::Tuple: Compile-time sized array class.

  <li> Teuchos::ConstNonconstObjectContainer: A simple wrapper class for
  implementing the "runtime protection of const" idiom.

  </ul>

  Runtime debug checking of the above classes can be turned on by setting
  <tt>-DTeuchos_ENABLE_DEBUG:BOOL=ON</tt> when configuring.  Also, strong runtime
  checking of reference counting including detection of circular RCPs,
  detection of duplicate owning RCPs, and detection of dangling non-owning RCPs
  can be turned on by also configuring with
  <tt>-DTeuchos_ENABLE_DEBUG_RCP_NODE_TRACING:BOOL=ON</tt>.  Support for boost
  must also be enabled with <tt>-DTeuchos_ENABLE_BOOST=ON</tt> in order to get
  the strongest debug-mode runtime checking. Without these
  configure options, all of these classes are configured by default to
  be as efficient as possible.

<li> <b> Low-Level Language Support: </b>

  <ul>

  <li> Abstract factories:
    <ul>
    <li> Teuchos::AbstractFactory - defines a basic "Abstract Factory" interface
         that allocates objects and returns them wrapped in <tt>Teuchos::RCP</tt>
         objects.
    <li> Teuchos::AbstractFactoryStd - defines a general concrete implementation of 
         Teuchos::AbstractFactory that allows creating quick concrete subclass
         implementations for concrete types.
    </ul>

  <li> Dynamic casting: Teuchos::dyn_cast - a wrapper for
  <tt>dynamic_cast<></tt> that throws <tt>std::bad_cast</tt>
  exceptions with very detailed error messages on what types are involved.

  <li> Array argument call generation : \ref Teuchos_Array_Arguments "arrayArg()" - a set of overloaded
  templated functions for generating inline array arguments for
  function calls.

  <li><tt>Teuchos::getConst()</tt> is a silly little templated function that returns a
  constant reference given any constant object.  This function allows a piece of code
  to access the <tt>const</tt> version of a member function given a non-<tt>const</tt> reference
  to an object.

  </ul>

<li> <b> Outputting support </b>

  <ul>

  <li><tt>Teuchos::FancyOStream</tt> wraps any <tt>std::ostream</tt> object and
  produces nicely indented outputting.  It can also add prefixes to each line
  of output such as the processor rank.

  <li><tt>Teuchos::OSTab</tt> is used in conjunction with a
  <tt>Teuchos::FancyOStream</tt> object to generate exception safe indentation
  control as well as set other information related to the line prefix.

  <li><tt>Teuchos::VerboseObject</tt> is a base class that objects can inherit
  from that makes producing coordinated informative outputting easier.  This
  class can be inherited by any C++ subclass without requiring any function
  overrides but to be useful the class object must use the embedded ostream
  and verbosity level to print its activities.

  <li><tt>Teuchos::oblackholestream</tt> is a concrete subclass of <tt>std::ostream</tt>
  that ignores all output.  This class is very useful in writing SPMD parallel programs
  and controlling which processor(s) produce output.  Generally only the the root process
  uses a real <tt>std::ostream</tt> object while all of the slave processors use
  a <tt>Teuchos::oblackholestream</tt> for console output.

  <li> <tt>Teuchos::Describable</tt> defines an interface that
  subclasses can override that allows the creation of formated
  output of an object's state complete with indentation control.
  This class has default definitions for all of its virtual member
  functions and therefore can be inherited by existing C++ classes
  without requiring any additional implementation support to get
  started.

  </ul>

<li> <b> Performance Monitoring </b>

  <ul>

  <li> Timing class: Teuchos::TimeMonitor - Provides timing functions for the
       purposes of performance analysis. 

  <li> Floating point operation class: Teuchos::Flops - Provides floating point operations (FLOPS)
       counting and reporting functions for the purposes of performance analysis.  All Teuchos computational
       classes accumulate FLOP counts associated with the \e this object of the computations.

  </ul>

<li> <b> Exception Handling </b>

  <ul>

  <li> <em>Testing for Exceptions</em>: The TEUCHOS_TEST_FOR_EXCEPTION() macro accepts
  a
  logical test, an exception handler, and a
  message.  It then throws an "intelligent" exception informing the
  user of the file, line, and message where
  the exception was thrown.  The macro TEUCHOS_TEST_FOR_EXCEPT() is a shorter
  macro that just accepts a logic test and is therefore easier to write.
  Please use TEUCHOS_TEST_FOR_EXCEPT(!test) as an alternative to assert(test).</li>

  <li> <em>Stack Tracing</em>: When a debug build is enabled
  (CMAKE_BUILD_TYPE=DEBUG OR Trilinos_ENABLE_DEBUG=ON) and when using GCC and
  when enabling BinUtils (TPL_ENABLE_BinUtils=ON) then the
  TEUCHOS_TEST_FOR_EXCEPTION() family of macros
  will take snapshopts of the stacktrace when exceptions are thrown.  These
  stacktraces can be printed out after an exception is thrown using the
  funciton Teuchos::get_stored_stacktrace().  The standard catch macro
  TEUCHOS_STANDARD_CATCH_STATEMENTS() automatically invokes this function so
  all main() programs written using this macro will automatically print out
  stack trace information when uncaught exceptions are encountered.  A program
  can also cause strack tracing info to be printed when an segfault occurs by
  calling Teuchos::print_stack_on_segfault() before main() runs.  More fine
  tuning of stacktracing can be controlled at configure time using the CMake
  options Teuchos_ENABLE_STACKTRACE and Teuchos_ENABLE_DEFAULT_STRACTRACE.
  When Teuchos_ENABLE_STACKTRACE=ON, then stracktracing of exceptions can be
  turned on and off at runtime using the function
  Teuchos::TestForException_setEnableStacktrace().  The configure varible
  Teuchos_ENABLE_DEFAULT_STRACTRACE determines if stack tracing is on or off
  by defualt at runtime.

  NOTE: Stacktracing is always off by default
  in any build type except CMAKE_BUILD_TYPE=DEBUG and/or
  Trilinos_ENABLE_DEBUG=ON.  Therefore, by default an optimized build of the
  code will never have stack tracking enabled and will suffer no performance
  penalty due to stacktracing.  It is just debug builds that it is enabled
  for (and then only be default and can be disabled).

  NOTE: Stacktracing is only enabled when the using GCC and when the binutils
  libraries are available (see teuchos/CMakeLists.txt and cmake configure
  output for details).

  <b>WARNING:</b> Printing stacktraces can be very
  expensive if your program throws a lot of excpetions.  Therefore, the
  testing infrastructure for Trilinos with the checkin-test.py script turns
  off stack tracing by default by configuring with
  Teuchos_ENABLE_DEFAULT_STRACTRACE=OFF.

  </li>

  </ul>

<li> <b> Testing Unit Support </b>

  Teuchos contains some utilities that make it easier to write unit tests.
  See the native \ref Teuchos_UnitTest_grp "Unit Testing Support Code".

</ul>

\subsection Teuchos_eclasses Teuchos "Extended" Classes

<ul>

<li> <b> Containers </b>

<ul>

<li> Teuchos::Hashtable is a templated map with constant-time lookup.

<li> Teuchos::HashSet is a templated set with constant-time lookup.

</ul>

<br>
<li> <b> XML </b>
<ul>

<li> Teuchos::XMLObject is an object representation of a subset of XML data. Supported XML features
are tags, attributes, and character content. 

<li> Teuchos::FileInputSource can read XML from a file and produce a Teuchos::XMLObject

<li> Teuchos::StringInputSource can read XML from a character string and produce a Teuchos::XMLObject

</ul>

<br>
<li> <b> MPI </b>
<ul>

<li> Teuchos::MPISession has methods to initialize, finalize, and query the global MPI environment.

<li> Teuchos::MPIComm represents an MPI communicator

<li> Teuchos::MPIContainerComm has methods to communicate Teuchos::Array objects

</ul>

</ul>

\section Teuchos_browser Browse all of Teuchos

You can browse all of Teuchos as a <A HREF="../../browser/doc/html/index.html">single
doxygen collection</A>. Warning, this is not the recommended way to learn
about Teuchos software.  However, this is a good way to browse the <a
href="../../browser/doc/html/dirs.html">directory structure of teuchos</a>, to <a
href="../../browser/doc/html/files.html">locate files</a>, etc.

*/


/** \defgroup Teuchos_Depreicated_grp Deprecated Teuchos Code

All of the code that shows up here is depricated and should not be used by
clients (because it will be removed at some point).

*/


/** \defgroup Teuchos_UnitTest_grp Unit Testing Support

Teuchos contains a simple but very effective native unit testing support code.

Unit tests can be defined in separate files which can be as simple as:

\code

// Int_UnitTests.cpp

#include "Teuchos_UnitTestHarness.hpp"

namespace {

TEUCHOS_UNIT_TEST( Int, Basic )
{
  int i1 = 5;
  TEST_EQUALITY_CONST( i1, 5 );
}

TEUCHOS_UNIT_TEST( Int, Assignment )
{
  int i1 = 4;
  int i2 = i1;
  TEST_EQUALITY( i2, i1 );
}

} // namespace

\endcode

and then compiled along with other unit testing definition files into
executables along with a simple main function like:

\code

// UnitTestMain.cpp

#include "Teuchos_UnitTestRepository.hpp"
#include "Teuchos_GlobalMPISession.hpp"

int main( int argc, char* argv[] )
{
  Teuchos::GlobalMPISession mpiSession(&argc, &argv);
  return Teuchos::UnitTestRepository::runUnitTestsFromMain(argc, argv);
}

\endcode

using CMake code like:

\code

PACKAGE_ADD_EXECUTABLE_AND_TEST(
  MyUnitTests
  SOURCES
    UnitTestMain.cpp
    Int_UnitTests.cpp
    ... other unit test files ...
  STANDARD_PASS_OUTPUT
  )

\endcode

Once the Unit test exectuable is built, it will run with CTest automatically and
produce output and pass/fail.  It is just run as:

\verbatim
  ./MyPackage_MyUnitTest.exe
\endverbatim

One of the most useful properties of this simple unit testing support code
is that the unit testing exectuable (created by the above CMake code)
accepts command-line arguments for showing more or less output, runing only
particular sets of tests, etc.  Just pass in the <tt>--help</tt> flag to see all
of the options as:

\verbatim
  ./MyPackage_MyUnitTest.exe --help
\endverbatim

Now learn about unit tests, for example, at:

  http://www.oreillynet.com/pub/a/oreilly/oracle/utplsql/news/fulldoc.html

References for Teuchos Unit Testing Support:

<ul>

<li> \ref Teuchos_UnitTestDefinitionMacros_grp "Unit Testing Definition
Macros": Macros used to define individual unit test blocks line TEUCHOS_UNIT_TEST().

<li> \ref Teuchos_UnitTestAssertMacros_grp "Unit Testing Assert Macros": Used
within a given unit test to individual statement-level checks like
TEST_EQUALITY().

</ul>

Suggestions for unit testing:

<ul>

<li> Put all unit tests for a given class <tt>MyClass</tt> into a single
file with the name <tt>MyClass_UnitTests.cpp</tt>.  This makes the unit
tests for a class easy to find and maintain.

<li> Aggregate unit tests for related classes and functionality into single
executables.  Putting lots of related unit tests in the same exectuable
ensures the process startup and shutdown for a given exectuable run by CTest
does not overwelm the cost of the the actual unit tests.  If well defined,
you can run thousands of unit tests in a single exectuable in a fraction of
a second.

<li> Don't bother writing you own simple UnitTestMain.cpp like above, just include the standard
one <tt>teuchos/test/UnitTest/Teuchos_StandardUnitTestMain.cpp</tt> in your
PACKAGE_ADD_EXECUTABLE_AND_TEST(...) CMake macro.

<li> When doing TDD, write a single unit test at a time (fail, pass,
refactor) and constantly be rebuilding and rerunning the unit test
exectuable.

<li> Get an idea of all the different ways you can write unit tests by
searching for unit test examples in Trilinos by doing:

\verbatim
$ find . -name "*" -exec grep -l 'TEUCHOS_UNIT_TEST' {} \;
\endverbatim

Just open a bunch of those files and see how people use these unit testing tools.

Search packages like Teuchos and Tpetra first since these are the most numerous
and mature unit testing examples you will find in Trilinos.

</ul>

*/


/** \defgroup Teuchos_UnitTestDefinitionMacros_grp Unit Testing Definition Macros

\ingroup Teuchos_UnitTest_grp

There macros are used to define individual unit test code blocks.  For example:

\code
TEUCHOS_UNIT_TEST(SomeTestGroup, SomeTestName)
{
  int i = 1;
  TEST_EQUALITY_CONST(i, 1);
  int j = 2;
  TEST_EQUALITY_CONST(j, 2);
  TEST_INEQUALITY_CONST(i, j);
  ...
}
\endcode

*/


/** \defgroup Teuchos_UnitTestAssertMacros_grp Unit Testing Assert Macros

\ingroup Teuchos_UnitTest_grp

These are macros used to define individual checks within an single unit test
(e.g. defined by TEUCHOS_UNIT_TEST()).

NOTE: When a single check fails, the unit test is not aborted but instead will
just print the failure to the local stream 'out' with the line number and
continue on.

NOTE: The local unit test stream object 'out' will be written to and the
variable 'success' will be set to 'false' if a test fails.

*/
