/*
//@HEADER
// ***********************************************************************
// 
//        AztecOO: An Object-Oriented Aztec Linear Solver Package 
//                 Copyright (2002) Sandia Corporation
// 
// Under terms of Contract DE-AC04-94AL85000, there is a non-exclusive
// license for use of this work by or on behalf of the U.S. Government.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the Corporation nor the names of the
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Questions? Contact Michael A. Heroux (maherou@sandia.gov) 
// 
// ***********************************************************************
//@HEADER
*/


//
//This file is generated by the script AztecOO_string_maps_builder.pl.
//Example: % AztecOO_string_maps_builder.pl 
//             AztecOO_string_maps.txt > AztecOO_string_maps.cpp
//

#include <AztecOO_string_maps.h>

#ifdef HAVE_AZTECOO_TEUCHOS
//=============================================================================
Teuchos::map<std::string,int>& AztecOO_key_map()
{
  static Teuchos::map<std::string,int> azoo_key_map;
  return( azoo_key_map );
}

//=============================================================================
Teuchos::map<std::string,int>& AztecOO_value_map()
{
  static Teuchos::map<std::string,int> azoo_value_map;
  return( azoo_value_map );
}

//=============================================================================
void AztecOO_initialize_maps()
{
  static bool maps_already_initialized = false;
  if (maps_already_initialized) {
    return;
  }

  Teuchos::map<std::string,int>& azoo_key_map = AztecOO_key_map();

  azoo_key_map["AZ_SOLVER"] = AZ_solver;
  azoo_key_map["AZ_SCALING"] = AZ_scaling;
  azoo_key_map["AZ_PRECOND"] = AZ_precond;
  azoo_key_map["AZ_CONV"] = AZ_conv;
  azoo_key_map["AZ_OUTPUT"] = AZ_output;
  azoo_key_map["AZ_PRE_CALC"] = AZ_pre_calc;
  azoo_key_map["AZ_MAX_ITER"] = AZ_max_iter;
  azoo_key_map["AZ_POLY_ORD"] = AZ_poly_ord;
  azoo_key_map["AZ_OVERLAP"] = AZ_overlap;
  azoo_key_map["AZ_TYPE_OVERLAP"] = AZ_type_overlap;
  azoo_key_map["AZ_KSPACE"] = AZ_kspace;
  azoo_key_map["AZ_ORTHOG"] = AZ_orthog;
  azoo_key_map["AZ_AUX_VEC"] = AZ_aux_vec;
  azoo_key_map["AZ_REORDER"] = AZ_reorder;
  azoo_key_map["AZ_KEEP_INFO"] = AZ_keep_info;
  azoo_key_map["AZ_SUBDOMAIN_SOLVE"] = AZ_subdomain_solve;
  azoo_key_map["AZ_GRAPH_FILL"] = AZ_graph_fill;
  azoo_key_map["AZ_INIT_GUESS"] = AZ_init_guess;
  azoo_key_map["AZ_KEEP_KVECS"] = AZ_keep_kvecs;
  azoo_key_map["AZ_APPLY_KVECS"] = AZ_apply_kvecs;
  azoo_key_map["AZ_ORTH_KVECS"] = AZ_orth_kvecs;
  azoo_key_map["AZ_IGNORE_SCALING"] = AZ_ignore_scaling;
  azoo_key_map["AZ_CHECK_UPDATE_SIZE"] = AZ_check_update_size;
  azoo_key_map["AZ_EXTREME"] = AZ_extreme;
  azoo_key_map["AZ_TOL"] = AZ_tol;
  azoo_key_map["AZ_DROP"] = AZ_drop;
  azoo_key_map["AZ_ILUT_FILL"] = AZ_ilut_fill;
  azoo_key_map["AZ_OMEGA"] = AZ_omega;
  azoo_key_map["AZ_RTHRESH"] = AZ_rthresh;
  azoo_key_map["AZ_ATHRESH"] = AZ_athresh;
  azoo_key_map["AZ_UPDATE_REDUCTION"] = AZ_update_reduction;
  azoo_key_map["AZ_ILL_COND_THRESH"] = AZ_ill_cond_thresh;

  Teuchos::map<std::string,int>& azoo_value_map = AztecOO_value_map();

  azoo_value_map["AZ_NONE"] = AZ_none;
  azoo_value_map["AZ_CG"] = AZ_cg;
  azoo_value_map["AZ_GMRES"] = AZ_gmres;
  azoo_value_map["AZ_CGS"] = AZ_cgs;
  azoo_value_map["AZ_TFQMR"] = AZ_tfqmr;
  azoo_value_map["AZ_BICGSTAB"] = AZ_bicgstab;
  azoo_value_map["AZ_SLU"] = AZ_slu;
  azoo_value_map["AZ_SYMMLQ"] = AZ_symmlq;
  azoo_value_map["AZ_GMRESR"] = AZ_GMRESR;
  azoo_value_map["AZ_FIXED_PT"] = AZ_fixed_pt;
  azoo_value_map["AZ_ANALYZE"] = AZ_analyze;
  azoo_value_map["AZ_LU"] = AZ_lu;
  azoo_value_map["AZ_CG_CONDNUM"] = AZ_cg_condnum;
  azoo_value_map["AZ_GMRES_CONDNUM"] = AZ_gmres_condnum;
  azoo_value_map["AZ_JACOBI"] = AZ_Jacobi;
  azoo_value_map["AZ_BJACOBI"] = AZ_BJacobi;
  azoo_value_map["AZ_ROW_SUM"] = AZ_row_sum;
  azoo_value_map["AZ_SYM_DIAG"] = AZ_sym_diag;
  azoo_value_map["AZ_SYM_ROW_SUM"] = AZ_sym_row_sum;
  azoo_value_map["AZ_EQUIL"] = AZ_equil;
  azoo_value_map["AZ_SYM_BJACOBI"] = AZ_sym_BJacobi;
  azoo_value_map["AZ_SYM_GS"] = AZ_sym_GS;
  azoo_value_map["AZ_NEUMANN"] = AZ_Neumann;
  azoo_value_map["AZ_LS"] = AZ_ls;
  azoo_value_map["AZ_ILU"] = AZ_ilu;
  azoo_value_map["AZ_BILU"] = AZ_bilu;
  azoo_value_map["AZ_ICC"] = AZ_icc;
  azoo_value_map["AZ_ILUT"] = AZ_ilut;
  azoo_value_map["AZ_RILU"] = AZ_rilu;
  azoo_value_map["AZ_RECURSIVE"] = AZ_recursive;
  azoo_value_map["AZ_SMOOTHER"] = AZ_smoother;
  azoo_value_map["AZ_DOM_DECOMP"] = AZ_dom_decomp;
  azoo_value_map["AZ_MULTILEVEL"] = AZ_multilevel;
  azoo_value_map["AZ_USER_PRECOND"] = AZ_user_precond;
  azoo_value_map["AZ_R0"] = AZ_r0;
  azoo_value_map["AZ_RHS"] = AZ_rhs;
  azoo_value_map["AZ_ANORM"] = AZ_Anorm;
  azoo_value_map["AZ_SOL"] = AZ_sol;
  azoo_value_map["AZ_WEIGHTED"] = AZ_weighted;
  azoo_value_map["AZ_EXPECTED_VALUES"] = AZ_expected_values;
  azoo_value_map["AZ_NOSCALED"] = AZ_noscaled;
  azoo_value_map["AZTECOO_CONV_TEST"] = AZTECOO_conv_test;
  azoo_value_map["AZ_INF_NOSCALED"] = AZ_inf_noscaled;
  azoo_value_map["AZ_ALL"] = AZ_all;
  azoo_value_map["AZ_LAST"] = AZ_last;
  azoo_value_map["AZ_SUMMARY"] = AZ_summary;
  azoo_value_map["AZ_WARNINGS"] = AZ_warnings;
  azoo_value_map["AZ_INPUT_FORM"] = AZ_input_form;
  azoo_value_map["AZ_GLOBAL_MAT"] = AZ_global_mat;
  azoo_value_map["AZ_EXPLICIT"] = AZ_explicit;
  azoo_value_map["AZ_CALC"] = AZ_calc;
  azoo_value_map["AZ_RECALC"] = AZ_recalc;
  azoo_value_map["AZ_REUSE"] = AZ_reuse;
  azoo_value_map["AZ_SYS_REUSE"] = AZ_sys_reuse;
  azoo_value_map["AZ_DIAG"] = AZ_diag;
  azoo_value_map["AZ_FULL"] = AZ_full;
  azoo_value_map["AZ_STANDARD"] = AZ_standard;
  azoo_value_map["AZ_SYMMETRIC"] = AZ_symmetric;
  azoo_value_map["AZ_CLASSIC"] = AZ_classic;
  azoo_value_map["AZ_MODIFIED"] = AZ_modified;
  azoo_value_map["AZ_RESID"] = AZ_resid;
  azoo_value_map["AZ_RAND"] = AZ_rand;

  maps_already_initialized = true;
}
#endif //HAVE_AZTECOO_TEUCHOS

