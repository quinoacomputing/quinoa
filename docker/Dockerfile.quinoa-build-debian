################################################################################
# vim: filetype=dockerfile:
#
# \file      docker/Dockerfile.quinoa-build-debian
# \author    J. Bakosi
# \copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.
# \brief     Dockerfile for a simple dynamic build of Quinoa on Debian
#
################################################################################

# Dockerfile for a simple dynamic build of Quinoa on Debian Linux using the
# native system-wide compiler and MPI wrappers.
#
# We start from the Debian/testing Linux distribution and install all possible
# prerequisites, then build the required but missing third-party libraries,
# build the code, and test.
#
# This docker image is intended to test and demonstrate a simple way of building
# Quinoa. It creates dynamically built executables which require runtime
# libraries. At the end we clean the clone, preparing the ground for development
# via a docker host mount. The container still contains the full operating
# system, compilers, and libraries. The image is intended as a complete
# development environment using the system-wide GNU compilers and OpenMPI.
#
# This container does not contain proprietary software and thus the container
# image can be publicly distributed.

FROM debian:testing

# Install system-wide prerequisites
RUN apt-get update -y && apt-get install -y debian-keyring debian-archive-keyring wget
RUN echo "deb http://ftp.us.debian.org/debian testing main \n deb http://security.debian.org testing/updates main" > /etc/apt/sources.list
RUN apt-get update -y && apt-get install -y m4 git cmake gfortran gcc g++ gmsh libpugixml-dev libpstreams-dev libboost-all-dev libblas-dev liblapack-dev liblapacke-dev libhypre-dev zlib1g-dev pegtl-dev libhdf5-dev libhdf5-openmpi-dev

# Setup user
RUN adduser --gecos "" --disabled-password quinoa
WORKDIR /home/quinoa
USER quinoa
WORKDIR /home/quinoa
CMD ["/bin/sh"]

# Clone quinoa
RUN git clone --recursive https://github.com/quinoacomputing/quinoa.git
# Build TPLs
RUN cd quinoa && mkdir -p tpl/build && cd tpl/build && cmake .. && make -sj$(grep -c processor /proc/cpuinfo)
# Build & test
RUN cd quinoa && mkdir -p build && cd build && cmake -DCMAKE_CXX_FLAGS=-Werror ../src && make -sj$(grep -c processor /proc/cpuinfo) && ../script/run_tests.sh
# Clean code
RUN rm -rf /quinoa
